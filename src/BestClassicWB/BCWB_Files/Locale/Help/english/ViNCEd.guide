@DATABASE VNC
@$VER: ViNCEd.guide 41.40 (1.4.2024)
@(C) THOR-Software 1997-2001,2020-2024
@AUTHOR Thomas "the Judge" Richter
@SMARTWRAP
@INDEX Index
@REMARK Global nodes
@NODE MAIN "ViNCEd Guide"
@NEXT SetVNCToc
@{CODE}
    ___      ___                  ___    _____      _______          _
     |        |           |\\       |    /     \\    |       |         |
     |        |     *     | \\      |   /      --   |                 |
     |        |           |  \\     |  |            |            _____|
     |        |     |     |   \\    |  |            |____       /     |
      \\      /      |     |    \\   |  |            |          |      |
       \\    /       |     |     \\  |  |            |          |      |
        \\  /        |     |      \\ |   \\      --   |          |      |
         \\/       __|__  _|_      \\|    \\_____/    |_______|   \\____/|

                                                Version 3.107
____________________________________________________________________________


ViNCEd - Guide  41.40                                      ViNCEd 3.107



@{"The Licence:       Legal Stuff                    READ THIS FIRST!       " link Licence }

@{"General Overview:  What is this about?                                   " link Overview }

@{"Installation                                                             " link Install }



@{"User's Guide                 " link UserToc }              @{"Configuration, SetVNC        " link SetVNCToc }

All day usage: Keyboard,                   Configuring ViNCEd:
Window Paths, TAB Expansion,               The SetVNC program, Shell,
Icon Drop, Ctrl-Z, Macros,                 Arguments, the GUI, Button &
Buttons, Window Title Macros,              Macro Setup, Keyboard Con-
Scripts, Cmd-History                       figuration, Flags, Colors


@{"Programmer's Guide           " link ProgToc }

        For the freak: CSI and ESC
        Sequences, DOS Packets, Owners,
        Internas, other Goodies



@{"Frequently Asked Questions:  Did you check these?                        " link FAQ }

@{"Version Information          " link Story }              @{"Thank You !                   " link Thanks }

@{"Future plans with ViNCEd                                                 " link Future }

@{"Book References                                                          " link References }

@{"Bug notes and reports, how to contact the author                         " link Bugs }


@{"Index                                                                    " link Index }



   © THOR-Software
   Thomas Richter
   Rühmkorffstraße 10 A
   12209 Berlin

   Germany


   EMAIL: thomas.richter\@alumni.tu-berlin.de
   (You tried the FAQ, did you?)

____________________________________________________________________________


Trademarks:

"SGI", "IRIX" and "winterm" are trademarks of Silicon Graphics.

"DEC" and "DECTerm" are trademarks of Digital.

"Tektronix" is a trademark of Tektronix.

Other trademarks may appear in the text without further note and are
copyrights of the corresponding companies or copyright holders.

@{BODY}


@ENDNODE
@NODE Licence "The THOR-Software Licence"
                      The THOR-Software Licence (v3, January 2nd 2021)

This License applies to the computer programs known as "ViNCEd" and
"SetVNC", and the "ViNCEd.guide". The "Program", below, refers to such
program. The "Archive" refers to the original and unmodified package of
distribution, as prepared by the author of the Program. Each licensee is
addressed as "you".


The Program and the data in the archive are freely distributable
under the restrictions stated below, but are also Copyright (c)
Thomas Richter.

Distribution of the Program, the Archive and the data in the Archive by a
commercial organization without written permission from the author to any
third party is prohibited if any payment is made in connection with such
distribution, whether directly (as in payment for a copy of the Program) or
indirectly (as in payment for some service related to the Program, or
payment for some product or service that includes a copy of the Program
"without charge"; these are only examples, and not an exhaustive
enumeration of prohibited activities).


However, the following methods of distribution involving payment shall not
in and of themselves be a violation of this restriction:

(i) Distributing the Program on a physical data carrier (e.g. CD-ROM,
    DVD, USB-Stick, Disk...) provided that:

a) the Archive is reproduced entirely and verbatim on such data carrier,
   including especially this licence agreement;

b) the data carrier is made available to the public for a nominal
   fee only, i.e. for a fee that covers the costs of the data carrier,
   and shipment of the data carrier;

c) a data carrier with the Program installed is made available to the
   author for free except for shipment costs, and

d) provided further that all information on said data carrier is
   redistributable for non-commercial purposes without charge.


Redistribution of a modified version of the Archive, the Program or the
contents of the Archive is prohibited in any way, by any organization,
regardless whether commercial or non-commercial. Everything must be kept
together, in original and unmodified form.



Limitations.


THE PROGRAM IS PROVIDED TO YOU "AS IS", WITHOUT WARRANTY. THERE IS NO
WARRANTY FOR THE PROGRAM, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. THE ENTIRE
RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD
THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
SERVICING, REPAIR OR CORRECTION.


IF YOU DO NOT ACCEPT THIS LICENCE, YOU MUST DELETE THE PROGRAM, THE ARCHIVE
AND ALL DATA OF THIS ARCHIVE FROM YOUR STORAGE SYSTEM. YOU ACCEPT THIS
LICENCE BY USING OR REDISTRIBUTING THE PROGRAM.


                                                        Thomas Richter

@ENDNODE
@NODE UserToc "The User's Guide"
@{CODE}
                All Day Usage - General Information
____________________________________________________________________________


@{"Keyboard Functions:      How to type ?                                   " link Keyboard }

@{"Window Gadgets:          The buttons, arrows and scrollers around        " link Gadgets }

@{"Block Operations:        Mark text, cut and copy it, and reinsert it     " link BlockOps }

@{"The Window Buffers:      The inside which keeps the (not only) text      " link Buffers }

@{"The Menu:                The default menu installed by ViNCEd            " link Menu }

@{"Macros and Buttons:      The helpers for fast and efficient typing       " link Macros }

@{"The Window Path:         How to open a ViNCEd window ?                   " link OpenPath }

@{"The Window Title:        The control sequences expanded in the title     " link Title }

@{"The Shell Mode:          An introduction                                 " link ShellMode }

        @{"Icon drop in the Shell mode                                      " link IconDrop }

        @{"TAB expansion in the Shell mode                                  " link TabExpand }

        @{"All TAB expansion settings at once                               " link Tab_Settings }

        @{"The magic Ctrl Z key in the Shell mode                           " link CtrlZ }


@{"The command history                                                      " link History }

@{"All history settings at once                                             " link History_Settings }



@{"The scripts contained in this package                                    " link Scripts }

        @{"Details about the Job control scripts                            " link JobCtrl }

@{"Compatibility notes                                                      " link Compatibility }
@{BODY}


@ENDNODE
@NODE SetVNCToc "The SetVNC Tool"
@{CODE}
                Configuration and Customization of ViNCEd
____________________________________________________________________________


@{"The graphical Interface of SetVNC                                        " link SetVNCGui }

        @{"The control pages of SetVNC                                      " link PagesToc }



@{"Shell and Workbench Operation of SetVNC                                  " link SetVNCArgs }

        @{"Workbench ToolTypes                                              " link SetVNCToolTypes }

        @{"Shell Arguments                                                  " link SetVNCShellArgs }

        @{"Job Control                                                      " link SetVNCJobs }

        @{"Buffer input/output                                              " link SetVNCIO }


@{"The Format of the Preferences File                                       " link PrefsFormat }


@{"Special Goodies of SetVNC                                                " link SetVNCGoodies }


@{BODY}
REMARK: The SetVNC program uses overlays to minimize memory usage and disk
loading time. Please DO NOT make it resident and DO NOT crunch it! Some
virus checkers have problems testing overlayed programs. THIS IS NOT A BUG
in SetVNC, but a bug in the virus checkers!

@ENDNODE
@NODE ProgToc "The Programmer's Manual"
@{CODE}

The Programmer's Manual:                The prime source for the real freak

____________________________________________________________________________


@{"CSI and ESC Sequences                                                    " link CsiEsc }

        @{"List of control characters                                       " link CtrlList }

        @{"List of unsupported control characters                           " link UnCtrlList }

        @{"List of ESC sequences                                            " link EscList }

        @{"List of unsupported ESC sequences                                " link UnEscList }

        @{"List of OSC sequences                                            " link OscList }

        @{"List of unsupported OSC sequences                                " link UnOscList }

        @{"List of CSI sequences                                            " link CsiList }

        @{"List of CSI sequences that return results                        " link SendBackCsi }

        @{"List of unsupported CSI sequences                                " link UnCsiList }

        @{"List of sequences you might receive                              " link ReceiveCsi }

        @{"List of control sequences the keyboard parser sends and receives " link KeyboardList }

        @{"Mouse Tracking information                                       " link MouseTrack }

@{"ANSI colors                                                              " link ANSIColors }

@{"List of console operation modes                                          " link ConsoleModes }

@{"List of understood DOS packets                                           " link PacketList }

@{"List of GURUs thrown by ViNCEd                                           " link Gurus }




@{"What is a ViNCEd Owner, please ?                                         " link Owners }

@{"The Format of the Preferences File                                       " link PrefsFormat }

@{"The tbiclass Boopsi Interface                                            " link Boopsis }

@{"Other goodies of ViNCEd                                                  " link Goodies }

@{"Goodies of the SetVNC program                                            " link SetVNCGoodies }

@{"Compatibility notes for the experts                                      " link Prog_Compatibility }
@{BODY}

@ENDNODE
@NODE Me "My address"

@{CODE}
   Thomas Richter
   Rühmkorffstraße 10 A
   12209 Berlin

   Germany


   EMAIL: thomas.richter\@alumni.tu-berlin.de
@{BODY}
@ENDNODE
@NODE References "Book references"
For a (not so) complete documentation of all CON: control sequences, read
@{CODE}
The Amiga ROM Kernal Reference Manual, Volume Devices. 3rd Edition.
Addison-Wesely Publishing Company, Inc.
ISBN 0-201-56755-X
@{BODY}


For a list of recommended user interfacing methods, read
@{CODE}
The Amiga ROM Kernal Reference Manual,
Volume User Style Interface Style Guide. 1st Edition.
Addison-Wesely Publishing Company, Inc.
ISBN 0-201-57757-7
@{CODE}


For a description of the Amiga hardware in general and the keyboard raw key
codes in special, read
@{CODE}
The Amiga Hardware Reference Manual. 3rd Edition.
Addison-Wesely Publishing Company, Inc.
ISBN 0-201-56776-8
@{BODY}


For a (poor) documentation of AmigaDOS and packet types:
@{CODE}
The AmigaDOS Manual, 3rd Edition.
Bantam Books (The Bantam Amiga Library)
ISBN 0-553-35403-4
@{BODY}


For an (excellent) documentation of AmigaDOS and packet types:
@{CODE}
The Amiga Guru Book
Ralph Babel, Taunusstein
@{BODY}


Additional information about the XTerm and WinTerm control sequences was
taken from the manual pages and the documentation of XTerm and WinTerm.


The XTerm docs can be found on every well installed unix system, since this
program is a standard tool. The WinTerm docs can be found on SGI systems
only.


However, the location of these docs may vary from system to system. You
usually obtain them by "man xterm" or "man winterm" - if the documentation
is installed.

@ENDNODE
@NODE Overview "Overview: What is ViNCEd about? And why this strange name?"
ViNCEd is a console handler replacement for the console device and the
related DOS drivers, CON: and RAW:. So much nothing new, you say?



There is a difference, a big difference. You'll notice that as soon as you
work with ViNCEd. It's different, really different - ViNCEd is a full screen
console handler with many additional features.


As for this full screen thing: The whole window contents is kept in
memory, so you may use the cursor keys to move upwards on the screen and
may re-execute commands you typed some time ago by pressing the return key
again in the input line. Reminds you on some 8 bit computers? You're right!
But there's more...



You can cut, copy and paste text to and from the clipboard, as with the
standard handler. You may insert text quickly with the middle mouse button
or a replacement sequence, you may ask ViNCEd, too, to copy the text
automatically as soon as you marked it. If you're used to the Unix XTerm
program, you'll appreciate this feature. But there's more...



ViNCEd comes with two scrollers, to scroll the window contents left and
right, up and down. ViNCEd keeps a limited, but configurable amount of the
input and output for you. Available for re-execution by the return key. The
buffer contents can be saved and reloaded if required, the buffer size can
be configured. There's of course a command history as usual. But there's
more...



ViNCEd offers "Macros" and "Buttons". These are short keyboard sequences
that can be invoked by either a gadget in the window title, a keystroke or a
menu item. Macros can not only replace keyboard sequences - they can also
show requesters and expand wild cards for you. ViNCEd uses also build-in
macros for all-day purposes like closing the shell, or calling a
configuration program. But there's more...



The Shell mode of ViNCEd comes with up to six configurable TAB expansion
keys, each of them can be setup individually with an optional file
requester, individual priorities for the files to be searched, and a TAB
expansion cache for quick disk access. But there's more...



ViNCEd offers a Ctrl-Z key and job control for the standard Amiga shell.
That means, in case you wonder, that you can always invoke a new shell in
a ViNCEd window, even if another program blocks the current shell. You can
switch back and forth between the different shells in the programs with two
unix like commands "fg" and "bg". But there's more...



ViNCEd comes with a fully configurable keyboard. If you don't like the
control keys where they are, just use a different set. Configuration of the
keyboard can be done thru a graphical user interface, the SetVNC program.
But there's more...



ViNCEd understands far more control codes than the ordinary console. It
offers a VT-220 compatibility mode which might come handy for terminal
programs. A lot of private commands and XTerm commands round up this set.
And there is still more...



ViNCEd supports graphics cards and customizable color sets. ViNCEd windows
are, unlike the console windows, not restricted to the first eight pens. It
comes with a set of sixteen configurable pens, which can be setup in a way
that they match the ANSI standard. ViNCEd can be made to appear on its own
screen, which can be made public, if required. The screen mode for this
screen is under your control, of course. The window font is too. And there
is still more...



Ooops, just forgot the most important point... It's free. Well, at least for
the private user - please check the @{"licence agreement" link Licence}.


Oh yes, about this strange name, I forgot to tell you: The first version
of ViNCEd appeared years ago (even before 1990, so this is a very old
program, indeed). In lack of a better name, I called it VeryNewCon - as
opposed to the NEWCON: developed by Commodore for the 1.3 Workbench which
was the latest clue at this time. VeryNewCon was short VNC: - but since this
name is really boring, I decided to fill in some vowels - and add an "Ed".
Well, it's an editor which runs, apparently, a shell in it. Not just a
console...

@ENDNODE
@NODE Install "How to install ViNCEd"
@TOC Main
Installation is easiest with the supplied "Installer" script in the archive.
In expert mode, it will ask you about each step and won't hurt your system
at all. However, in case you have to install by hand, for whatever reason,
look at the "InstallVNC" file in the "S" drawer of the distribution. The
following steps are required:


o) open a shell, create a new directory and extract the archive into that
directory.


o) copy the "vnc.library" from the "libs" drawer of the distribution to a
location where libraries will be found, i.e. "LIBS:".


o) copy the "SetVNC" program from the "c" drawer of the distribution to a
place where it will be found by shell, i.e. somewhere in the command path.


o) copy the "ViNCEd.guide" to a place where you want to keep it.


o) copy the "SetVNC.info" icon from the "prefs" drawer of the distribution
to a place where you keep your preferences. Edit this icon by the workbench.
Adjust the "Default Tool" to the location where you put the SetVNC program.
Adjust the "Helppath" tooltype to the location where you stored the guide.


o) copy part of the localizations in the "Locale/Catalogs" drawer to the
LOCALE: drawer of your workbench. No other place will work!


o) copy the files in the "Devs/Dosdrivers" directory of the distribution to
a place where mount icons will be found. This is usually "DEVS:Dosdrivers"
or "Storage/Dosdrivers". "VNC" and "NEWCON" mount ViNCEd as a CON:
replacement under the names "VNC" resp. "NEWCON", "VNR" is a "raw version"
of ViNCEd. If you're using Workbench 2.0, edit the "Devs:MountList" file and
insert the files "DEVS/Mount_VNC" and/or "DEVS/Mount_NEWCON" in the
distribution.


o) copy the scripts "fg", "bg", "fork", "history", "More", "SetKeyboard"
and "SetFont" in the "S" drawer of this distribution to a place where shell
scripts will be found. Set the "s" bit by hand if it possibly got lost by
"lha". Change your path in a way such that these scripts are found BEFORE
the CBM "More", "SetFont" and "SetKeyboard" commands. These scripts replace
ugly and hackish implementations of the CON: related commands.


o) if you want to replace the standard console handler CON: completely by
ViNCEd, add the following line to your startup-sequence or user-startup:
@{CODE}

SetVNC quiet mount override as CON:

@{BODY}
You may also remove the "ConClip" command in this case.


o) if you want to replace the "Shell" icon, install the ViNCEd shell icon in
the distribution. If not, and you don't want to replace CON: with ViNCEd
completely, edit the "Shell" icon of your system. Adjust or add the
following tooltype:
@{CODE}

WINDOW=VNC:0/0/-1/-1/AmigaShell/SHELL/CLOSE

@{BODY}


o) if you want to keep the vnc.library documentations, read the ReadMe in
the "Include" drawer and install it where you want to keep it.


o) if you're still working with Os 2.0 or Os 2.1 and want to use the Ctrl-Z
function of ViNCEd, copy the NamedConsoleHandler from the "Extras" directory
into the L: directory of your boot partition, and copy the "CONSOLE" icon
and mount entry from the same drawer to DEVS:DosDrivers. DO NOT CHANGE ITS
NAME. Make sure this "CONSOLE" is mounted on startup.


o) if you want to patch "More" to allow iconification of windows "More" run
in, you should enter the following command:
@{CODE}

Extras/SPatch -ot:More -pExtras/More.pch SYS:Utilities/More

@{BODY}
Then copy t:More on top of the original "More" program. This requires,
however, the original and unmodified 40.3 (Os 3.1) version of "More".


o) correct a bug in the rexxsyslib.library: Copy the original
rexxsyslib.library to a safe place, then go into the directory where you
extracted the archive. Enter the following command:
@{CODE}

Extras/SPatch -ot:rexxsyslib.library -pARexx/rexxsyslib.pch LIBS:rexxsyslib.library

@{BODY}
Then copy the t:rexxsyslib.library on top of the LIBS:rexxsyslib.library.
This fixes an ARexx bug (which is however not related to ViNCEd).


o) if you want to install the "StringSnip" program: This program improves
the behavour of "String gadgets" and makes most ViNCEd style keyboard
commands available in string gadgets, too. Copy the file "Extras/StringSnip"
file to a directory where commands will be found. Then add the following
command to your startup-sequence:
@{CODE}

StringSnip >NIL: install

@{BODY}


o) if you want to use Massimo's ToolButtonClass - ViNCEd uses this to
get an image for its iconification gadget - copy this from the "Extras"
drawer to "SYS:Classes/Images"


o) if you want to install the "UnixDirs3" patch by "Timo Kaikumaa" (thanks,
Timo, by letting me include this program here!): Read the "UnixDirs3" guide
in the Extras/UnixDirs3 drawer first. This program modifies certain AmigaDos
functions in a way that make "unix" path conventions available to AmigaDos.
Installation is simple, just drag the "UnixDirs3" icon in the
"Extras/UnixDirs3" directory into your "WBStartup" drawer. Copy the
"UnixDirs3" guide to a place where you want to keep it. Disable other
patches that try to improve the AmigaOs in a similar way. I checked most of
them and most of them are buggy in one or another way. "UnixDirs3" has
proven to work reliable here. Especially, if you see "SetVNC" crash on
loading, it might be the fault of a broken patch!


o) you are HIGHLY ADVICED to install the "TrueMultiAssigns" program as well.
It fixes severals flaws of the AmigaOs concerning multi-directory-assigns.
Without it, TAB expansion in multi assigns might behave a bit strange. If
you're running other patches that try to fix this as well, DISABLE THEM. I
tried various, but none of them worked as reliable as they should. This
patch has been successfully tested with ViNCEd and the rest of the system.

For installation, copy the file "Extras/TrueMultiAssigns" to a location
where it is found by the shell, i.e. into the command path. Then add the
following line to your startup-sequence:
@{CODE}

TrueMultiAssigns

@{BODY}

o) if you want to keep it: Install the "topaz6.font" of this distribution.
It replaces the "xen font" which is, unlike what you might think, a
proportional font and does therefore @{B}not@{UB} work with ViNCEd. To do
so, go into the directory where you've extracted this archive to and enter
the following command:
@{CODE}

copy Fonts/topaz6#? to FONTS: all

@{BODY}

o) reboot your system. That's it.


@ENDNODE

@REMARK Keyboard related nodes
@NODE Keyboard "The Keyboard - how to type?"
@TOC UserToc
How to type then? Sounds like a silly question, I guess... However, there's
somewhat more to be said than pressing the "a" key prints an "a" on the
screen, since the keyboard in a ViNCEd window is configurable. This means a
lot more than just selecting a national keyboard as with the Preferences
"Locale" editor. It means that you can


@{B}
Bind Keyboard Functions to Keyboard Keys.
@{UB}


The reason why the "a" key inserts an "a" is now that all standard ViNCEd
settings DO NOT bind @{"a function" link KeyFunction} to the "a" key, which
means that the "a" key invokes the default function it was given by the Os
- namely to print an "a". As for ViNCEd, you can easely
@{"bind" link KeyBind} this key to the
@{"Cursor Up" link Kf_Cursor_Up} @{"function" link KeyFunction}.
If you really want to....


Here's, for first, the functions the keyboard keys invoke as long as they
are NOT BOUND to any function explicitly. You will rarely see these
functions because even the "Default Keyboard Settings" which are fixed
down below in ViNCEd bind at least some of the keys. However, since this
"binding" is done at ViNCEd level, you can change these "default bindings".


@{B}
The Default Key Binding is Something Different than Unbound Keys.
@{UB}


Here now the list of functions unbound keys invoke:
(see also: @{"Keyboard notations" link KeyNotation})


@{CODE}
All white keys on the main keyboard, characters, numbers and the keys on the
numeric keypad:

                The character that was bound to this key by the keymap of
                the window. This is usually just the letter that is printed
                on the key.



The @{FG Background}@{BG Text}cursor@{FG Text}@{BG Background} keys:

                Moves the cursor in the window in the direction of the
                arrow.


The @{FG Background}@{BG Text}function@{FG Text}@{BG Background} keys:

                Invokes the @{"button macros" link Macros} in the title screen.


The @{FG Background}@{BG Text}Tab@{FG Text}@{BG Background} key:

                Inserts or jumps to the next tabulator stop.


The @{FG Background}@{BG Text}Shift Tab@{FG Text}@{BG Background} combination:

                Deletes characters up to or jumps to the previous tabulator
                stop.


The @{FG Background}@{BG Text}Help@{FG Text}@{BG Background} key:

                Launches the help @{"macro" link Macros}.


The @{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key:

                Collects the inputs of the line the cursor is placed in
                and sends them as inputs to whichever program listens;
                inserts a new line below the current.
                This is just the standard function you expect from the
                console.


The @{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background} key:

                This erases the next character to the left of the cursor,
                if this character has been typed by you. It will stop
                erasing printed characters.


The @{FG Background}@{BG Text}Del@{FG Text}@{BG Background} key:

                This key erases the character under the cursor and scrolls
                the characters to the right inwards. It won't delete printed
                characters but will only remove input characters.


The combination @{FG Background}@{BG Text}Shift cursor@{FG Text}@{BG Background}:

                Moves the cursor half the window to the left, right, up or
                down.


The combination @{FG Background}@{BG Text}Ctrl a@{FG Text}@{BG Background}:

                Moves the cursor to the start of the user inputs, to the
                left edge.


The combination @{FG Background}@{BG Text}Ctrl c@{FG Text}@{BG Background}:

                Sends the @{"break signal" link Break} (signal 12) to the current process
                and the background processes. This should abort a running
                program.


The combination @{FG Background}@{BG Text}Ctrl d@{FG Text}@{BG Background}:

                Sends the @{"stop signal" link Break} (signal 13) to the current process
                and the background processes. This should abort a running
                shell script.


The combination @{FG Background}@{BG Text}Ctrl e@{FG Text}@{BG Background}:

                Sends the @{"signal 14" link Break} to the current process and the
                background processes.


The combination @{FG Background}@{BG Text}Ctrl f@{FG Text}@{BG Background}:

                Sends the @{"signal 15" link Break} to the current process and the
                background processes.


The combination @{FG Background}@{BG Text}Ctrl h@{FG Text}@{BG Background}:

                Identically to the @{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background} key.


The combination @{FG Background}@{BG Text}Ctrl i@{FG Text}@{BG Background}:

                Identically to the @{FG Background}@{BG Text}Tab@{FG Text}@{BG Background} key.


The combination @{FG Background}@{BG Text}Ctrl j@{FG Text}@{BG Background}:

                Insert a new line under the current line, but does not sent
                any inputs.


The combination @{FG Background}@{BG Text}Ctrl k@{FG Text}@{BG Background}:

                Cuts the user inputs starting at the cursor position, and
                places them in the @{"Yank buffer" link Yank}.


The combination @{FG Background}@{BG Text}Ctrl l@{FG Text}@{BG Background}:

                Erases the contents of the visible window and the lines
                below the visible window. This is called the "Line Feed"
                window.


The combination @{FG Background}@{BG Text}Ctrl q@{FG Text}@{BG Background}:

                Resumes a with @{FG Background}@{BG Text}Ctrl s@{FG Text}@{BG Background} stopped output.
                This is also known as the "XON" function.


The combination @{FG Background}@{BG Text}Ctrl m@{FG Text}@{BG Background}:

                Identically to the @{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key.


The combination @{FG Background}@{BG Text}Ctrl r@{FG Text}@{BG Background}:

                Searches the text in front of the cursor position in the
                @{"command history" link History}.


The combination @{FG Background}@{BG Text}Ctrl s@{FG Text}@{BG Background}:

                Stops the output. This is known as the "XOFF" function.


The combination @{FG Background}@{BG Text}Ctrl u@{FG Text}@{BG Background}:

                Cuts all user inputs to the left of the cursor position
                and inserts them into the @{"Yank buffer" link Yank}.


The combination @{FG Background}@{BG Text}Ctrl w@{FG Text}@{BG Background}:

                Erases the @{"word" link Word} to the left of the cursor.


The combination @{FG Background}@{BG Text}Ctrl x@{FG Text}@{BG Background}:

                Cuts the complete user inputs of the current line, and
                inserts them into the @{"Yank buffer" link Yank}.


The combination @{FG Background}@{BG Text}Ctrl y@{FG Text}@{BG Background}:

                Inserts the contents of the @{"Yank buffer" link Yank}.


The combination @{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background}:

                Forks the a new shell in the current window. More about the
                Ctrl-Z function is found at a @{"different location" link CtrlZ }.


The combination @{FG Background}@{BG Text}Ctrl \\@{FG Text}@{BG Background}:

                Invokes either a @{"macro" link Macros} or sends an "End Of File" to the
                current shell or the program running in the window.
                The details depend on a @{"preferences flag" link Fl_SMARTCLOSE}.



@{BODY}
The next keys are @{"not available" link NonStdKey} on a standard amiga
keyboard. However, a replacement keyboard with a properly setup system
keymap definition table may offer these keys. ViNCEd is at least able to
handle them correctly. Even though these keys might be not available for
you, you can still @{"bind" link KeyBind} other keys to the
@{"keyboard functions" link KeyFunction} they generate.
@{CODE}


@{FG Background}@{BG Text}Insert@{FG Text}@{BG Background}:

                Toggles between overwrite and insertion mode.


@{FG Background}@{BG Text}Shift Insert@{FG Text}@{BG Background}:

                Quite the same; toggles between overwriting and insertion.


@{FG Background}@{BG Text}Page Up@{FG Text}@{BG Background}:

                Moves the cursor upwards half a window.


@{FG Background}@{BG Text}Shift Page Up@{FG Text}@{BG Background}:

                Scroll the window upwards half its size. Tries not to move
                the cursor if this is possible.


@{FG Background}@{BG Text}Page Down@{FG Text}@{BG Background}:

                Moves the cursor downwards half a window.


@{FG Background}@{BG Text}Shift Page Down@{FG Text}@{BG Background}:

                Scrolls the screen downwards half a window.


@{FG Background}@{BG Text}Pause/Break@{FG Text}@{BG Background}:

                Pauses the output. If this key is pressed again, the output
                is resumed.


@{FG Background}@{BG Text}Shift Pause/Break@{FG Text}@{BG Background}:

                Always re-enables output, similar to Ctrl q.


@{FG Background}@{BG Text}Home@{FG Text}@{BG Background}:

                Moves the cursor to the beginning of the buffer, to
                the top, left edge.


@{FG Background}@{BG Text}End@{FG Text}@{BG Background}:

                Moves the cursor to the end of the buffer, to the right,
                bottommost position.


@{BODY}

Again, as mentioned above, this is just the list of the keyboard functions
for "unbound" keys. Even the ViNCEd "Default" configuration
@{"binds" link KeyBind} some keys for your convenience. However, this
@{"keyboard configuration" link KeyBind} is completely up to you and can be
modified with the @{"SetVNC" link SetVNCToc} tool.


Here's now the list of keyboad bindings in the default configuration. The
meaning of the keyboard functions, if not obvious, can be found
@{"elsewhere" link KeyFunction} or by following the links. The qualifier
"NumL" means that this keyboard function is only available if NumLock is
active. This does NOT necessarily relate to the numeric keypad, even though
in the default configuration only keys of the numeric keypad make use of
this qualifier. Keys on the numeric keypad itself are identified by a "Num"
in front of them, as for example
@{FG Background}@{BG Text}Num3@{FG Text}@{BG Background}, which is the key
"3" on this pad. The sequence
@{FG Background}@{BG Text}NumL Num3@{FG Text}@{BG Background} means
hence that the key "3" on the numeric pad is bound to the following function
ONLY IF NumLock is active.

@{CODE}
@{FG Background}@{BG Text}Cursor left@{FG Text}@{BG Background}:
                @{"Cursor Left" link Kf_Cursor_Left}

@{FG Background}@{BG Text}Cursor right@{FG Text}@{BG Background}:
                @{"Cursor Right" link Kf_Cursor_Right}

@{FG Background}@{BG Text}Cursor up@{FG Text}@{BG Background}:
                @{"Cursor Up" link Kf_Cursor_Up}

@{FG Background}@{BG Text}Cursor down@{FG Text}@{BG Background}:
                @{"Cursor Down" link Kf_Cursor_Down}

@{BODY}
The binding of these keys could have been avoided because the unbound keys
provide the same function.
@{CODE}

@{FG Background}@{BG Text}Alt Cursor Up@{FG Text}@{BG Background}
                @{"History Up" link Kf_History_Up}

@{FG Background}@{BG Text}Alt Cursor Down@{FG Text}@{BG Background}:
                @{"History Down" link Kf_History_Down}

@{FG Background}@{BG Text}Ctrl r@{FG Text}@{BG Background}:
                @{"Search Partial Upwards" link Kf_Search_Partial_Upwards}

@{FG Background}@{BG Text}Shift Alt Cursor up@{FG Text}@{BG Background}:
                @{"Search History Upwards" link Kf_Search_History_Upwards}

@{FG Background}@{BG Text}Shift Alt Cursor down@{FG Text}@{BG Background}:
                @{"Search History Downwards" link Kf_Search_History_Downwards}


@{BODY}
The next four keyboard bindings are again superfluous:
@{CODE}

@{FG Background}@{BG Text}Shift Cursor left@{FG Text}@{BG Background}:
                @{"Half Screen Left" link Kf_Half_Screen_Left}

@{FG Background}@{BG Text}Shift Cursor right@{FG Text}@{BG Background}:
                @{"Half Screen Right" link Kf_Half_Screen_Right}

@{FG Background}@{BG Text}Shift Cursor up@{FG Text}@{BG Background}:
                @{"Half Screen Up" link Kf_Half_Screen_Up}

@{FG Background}@{BG Text}Shift Cursor down@{FG Text}@{BG Background}:
                @{"Half Screen Down" link Kf_Half_Screen_Down}

@{FG Background}@{BG Text}Ctrl Cursor left@{FG Text}@{BG Background}:
                @{"To Left Border" link Kf_To_Left_Border}

@{FG Background}@{BG Text}Ctrl Cursor right@{FG Text}@{BG Background}:
                @{"To Right Border" link Kf_To_Right_Border}

@{FG Background}@{BG Text}Ctrl Cursor up@{FG Text}@{BG Background}:
                @{"To Top of Screen" link Kf_To_Top_of_Screen}

@{FG Background}@{BG Text}Ctrl Cursor down@{FG Text}@{BG Background}:
                @{"To Bottom of Screen" link Kf_To_Bottom_of_Screen}

@{FG Background}@{BG Text}Ctrl Cursor left@{FG Text}@{BG Background}:
                @{"Prev Word" link Kf_Prev_Word}

@{FG Background}@{BG Text}Ctrl Cursor right@{FG Text}@{BG Background}:
                @{"Next Word" link Kf_Next_Word}

@{FG Background}@{BG Text}Ctrl Alt Cursor left@{FG Text}@{BG Background}:
                @{"Prev Component" link Kf_Prev_Component}

@{FG Background}@{BG Text}Ctrl Alt Cursor down@{FG Text}@{BG Background}:
                @{"Next Component" link Kf_Next_Component}

@{FG Background}@{BG Text}Ctrl Alt Cursor up@{FG Text}@{BG Background}:
                @{"Scroll Up" link Kf_Scroll_Up}

@{FG Background}@{BG Text}Ctrl Alt Cursor down@{FG Text}@{BG Background}:
                @{"Scroll Down" link Kf_Scroll_Down}

@{FG Background}@{BG Text}Ctrl Shift Alt Cursor up@{FG Text}@{BG Background}:
                @{"Scroll Half Screen Up" link Kf_Scroll_Half_Screen_Up}

@{FG Background}@{BG Text}Ctrl Shift Alt Cursor Down@{FG Text}@{BG Background}:
                @{"Scroll Half Screen Down" link Kf_Scroll_Half_Screen_Down}

@{FG Background}@{BG Text}NumL Num4@{FG Text}@{BG Background}:
                @{"Cursor Left" link Kf_Cursor_Left}

@{FG Background}@{BG Text}NumL Num6@{FG Text}@{BG Background}:
                @{"Cursor Right" link Kf_Cursor_Right}

@{FG Background}@{BG Text}NumL Num8@{FG Text}@{BG Background}:
                @{"Cursor Up" link Kf_Cursor_Up}

@{FG Background}@{BG Text}NumL Num2@{FG Text}@{BG Background}:
                @{"Cursor Down" link Kf_Cursor_Down}

@{FG Background}@{BG Text}NumL Num9@{FG Text}@{BG Background}:
                @{"Half Screen Up" link Kf_Half_Screen_Up}

@{FG Background}@{BG Text}NumL Num3@{FG Text}@{BG Background}:
                @{"Half Screen Down" link Kf_Half_Screen_Down}

@{FG Background}@{BG Text}NumL Home3@{FG Text}@{BG Background}:
                @{"Home" link Kf_Home}

@{FG Background}@{BG Text}NumL End@{FG Text}@{BG Background}:
                @{"End" link Kf_End}

@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}:
                @{"Send Inputs" link Kf_Send_Inputs}

@{FG Background}@{BG Text}Alt Return@{FG Text}@{BG Background}:
                @{"Split Line" link Kf_Split_Line}

@{FG Background}@{BG Text}Shift Alt Return@{FG Text}@{BG Background}:
                @{"Insert ^J" link Kf_Insert_Ctrl_J}

@{FG Background}@{BG Text}Ctrl Return@{FG Text}@{BG Background}:
                @{"Send Complete Line" link Kf_Send_Complete_Line}

@{FG Background}@{BG Text}Shift Return@{FG Text}@{BG Background}:
                @{"Line Feed" link Kf_Line_Feed}

@{BODY}
The next two key bindings are again superfluous because the unbound keys
provide the same function:
@{CODE}

@{FG Background}@{BG Text}Tab@{FG Text}@{BG Background}:
                @{"TAB Forwards" link Kf_TAB_Forwards}

@{FG Background}@{BG Text}Shift Tab@{FG Text}@{BG Background}:
                @{"TAB Backwards" link Kf_TAB_Backwards}


@{FG Background}@{BG Text}Ctrl Tab@{FG Text}@{BG Background}:
                @{"Expand Path" link Kf_Expand_Path}

@{FG Background}@{BG Text}Ctrl Shift Tab@{FG Text}@{BG Background}:
                @{"Expand Backwards" link Kf_Expand_Backwards}

@{FG Background}@{BG Text}Ctrl LAlt Tab@{FG Text}@{BG Background}:
                @{"Expand Short" link Kf_Expand_Short}

@{FG Background}@{BG Text}Ctrl RAlt Tab@{FG Text}@{BG Background}:
                @{"Expand Devices" link Kf_Expand_Devices}

@{FG Background}@{BG Text}Ctrl Shift RAlt Tab@{FG Text}@{BG Background}:
                @{"Expand Devs Bkwds" link Kf_Expand_Devs_Bkwds}

@{FG Background}@{BG Text}Ctrl Shift C@{FG Text}@{BG Background}:
                @{"Send ^C" link Kf_Send_Ctrl_C}

@{FG Background}@{BG Text}Ctrl Shift D@{FG Text}@{BG Background}:
                @{"Send ^D" link Kf_Send_Ctrl_D}

@{FG Background}@{BG Text}Ctrl Shift E@{FG Text}@{BG Background}:
                @{"Send ^E" link Kf_Send_Ctrl_E}

@{FG Background}@{BG Text}Ctrl Shift F@{FG Text}@{BG Background}:
                @{"Send ^F" link Kf_Send_Ctrl_F}

@{BODY}
The next six keys bindings are again unnecessary. If you need room in your
keyboard definition, you may for example leave the following four keys
undefined without loss of any function.
@{CODE}

@{FG Background}@{BG Text}Ctrl c@{FG Text}@{BG Background}:
                @{"Send ^C to All" link Kf_Send_Ctrl_C_To_All}

@{FG Background}@{BG Text}Ctrl d@{FG Text}@{BG Background}:
                @{"Send ^D to All" link Kf_Send_Ctrl_D_To_All}

@{FG Background}@{BG Text}Ctrl e@{FG Text}@{BG Background}:
                @{"Send ^E to All" link Kf_Send_Ctrl_E_To_All}

@{FG Background}@{BG Text}Ctrl f@{FG Text}@{BG Background}:
                @{"Send ^F to All" link Kf_Send_Ctrl_F_To_All}

@{FG Background}@{BG Text}Del@{FG Text}@{BG Background}:
                @{"Delete Forwards" link Kf_Delete_Forwards}

@{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background}:
                @{"Delete Backwards" link Kf_Delete_Backwards}


@{FG Background}@{BG Text}Shift Del@{FG Text}@{BG Background}:
                @{"Delete Full Line" link Kf_Delete_Full_Line}

@{FG Background}@{BG Text}Alt Del@{FG Text}@{BG Background}:
                @{"Delete Inputs" link Kf_Delete_Inputs}

@{FG Background}@{BG Text}Alt Backspace@{FG Text}@{BG Background}:
                @{"Delete Word Bkwds" link Kf_Delete_Word_Bkwds}

@{FG Background}@{BG Text}Ctrl Alt Del@{FG Text}@{BG Background}:
                @{"Delete Component Fwds" link Kf_Delete_Component_Fwds}

@{FG Background}@{BG Text}Ctrl Alt Backspace@{FG Text}@{BG Background}:
                @{"Delete Component Bkwds" link Kf_Delete_Component_Bkwds}

@{FG Background}@{BG Text}Shift Alt Del@{FG Text}@{BG Background}:
                @{"Delete End of Line" link Kf_Delete_End_of_Line}

@{FG Background}@{BG Text}Shift Alt Backspace@{FG Text}@{BG Background}:
                @{"Delete Start of Line" link Kf_Delete_Start_of_Line}

@{BODY}
The next binding is again not required because the function bound to the key
is identical to the function of the unbound key:
@{CODE}

@{FG Background}@{BG Text}Ctrl l@{FG Text}@{BG Background}:
                @{"Form Feed" link Kf_Form_Feed}

@{BODY}
The next nine functions are available in the @{"menu" link Menu} anyways.
However, they are bind here because they should work even if no menu is
attached to a ViNCEd window.
@{CODE}

@{FG Background}@{BG Text}RAmiga e@{FG Text}@{BG Background}:
                @{"Delete End of Display" link Kf_Delete_End_of_Display}

@{FG Background}@{BG Text}RAmiga l@{FG Text}@{BG Background}:
                @{"Clear Screen" link Kf_Clear_Screen}

@{FG Background}@{BG Text}RAmiga x@{FG Text}@{BG Background}:
                @{"Cut" link Kf_Cut}

@{FG Background}@{BG Text}RAmiga c@{FG Text}@{BG Background}:
                @{"Copy" link Kf_Copy}

@{FG Background}@{BG Text}RAmiga v@{FG Text}@{BG Background}:
                @{"Paste" link Kf_Paste}

@{FG Background}@{BG Text}RAmiga h@{FG Text}@{BG Background}:
                @{"Hide" link Kf_Hide}

@{FG Background}@{BG Text}RAmiga a@{FG Text}@{BG Background}:
                @{"Select All" link Kf_Select_All}

@{FG Background}@{BG Text}RAmiga r@{FG Text}@{BG Background}
                @{"Reset" link Kf_Reset}

@{FG Background}@{BG Text}RAmiga Shift R@{FG Text}@{BG Background}
                @{"Full Reset" link Kf_Full_Reset}

@{BODY}
The next seven bound function are again identical to the function of the
unbound keys:
@{CODE}

@{FG Background}@{BG Text}Esc@{FG Text}@{BG Background}:
                @{"Toggle ESC" link Kf_Toggle_ESC}

@{FG Background}@{BG Text}Ctrl s@{FG Text}@{BG Background}:
                @{"Suspend" link Kf_Suspend}

@{FG Background}@{BG Text}Ctrl q@{FG Text}@{BG Background}:
                @{"Resume" link Kf_Resume}

@{FG Background}@{BG Text}Ctrl y@{FG Text}@{BG Background}:
                @{"Yank" link Kf_Yank}

@{FG Background}@{BG Text}Ctrl \\@{FG Text}@{BG Background}:
                @{"Generate EOF" link Kf_Generate_EOF}

@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background}:
                @{"Fork New Shell" link Kf_Fork_New_Shell}

@{FG Background}@{BG Text}Help@{FG Text}@{BG Background}:
                @{"Help" link Kf_Help}


@{FG Background}@{BG Text}Alt Num[@{FG Text}@{BG Background}:
                @{"Toggle NumLock" link Kf_Toggle_NumLock}

@{FG Background}@{BG Text}Alt Num0@{FG Text}@{BG Background}:
                @{"Toggle Overwrite" link Kf_Toggle_Overwrite}

@{FG Background}@{BG Text}Alt Esc@{FG Text}@{BG Background}:
                @{"Insert CSI" link Kf_Insert_CSI}

@{FG Background}@{BG Text}Shift Esc@{FG Text}@{BG Background}:
                @{"Insert ESC" link Kf_Insert_ESC}

@{BODY}


This is just the default keyboard configuration, there are lots of other
@{"keyboard functions" link KeyFuncList} available than listed here, check
for details the documentation of the
@{"keyboard pages" link SETVNC_KEYBOARD_1} of the
@{"SetVNC" link SetVNCToc} program.

@ENDNODE
@NODE NonStdKey "Non standard keys"
@TOC Keyboard
This key is usually not found on the Amiga keypad. However, a non-standard
keymap may create the standard ANSI control sequence that is understood by
ViNCEd to invoke the mentioned function.

@ENDNODE
@NODE Yank "The Yank buffer"
@TOC Keyboard
The "Yank Buffer" is a one line internal ViNCEd character buffer. It is set
by various "Cut" commands and can be inserted any time by the
@{"Yank" link Kf_Yank} @{"function" link KeyFunction}. The default
configuration @{"binds" link KeyBind} this function to the
@{FG Background}@{BG Text}Ctrl Y@{FG Text}@{BG Background} keyboard
combination.


The contents of this buffer is never placed in the clipboard, it is kept
completely ViNCEd internal.
@ENDNODE
@NODE KeyNotation "The notation of keyboard sequences in this manual"
@TOC Keyboard
All words printed in @{FG Background}@{BG Text}reverse@{FG Text}@{BG Background} colors represent single keyboard keys or
keyboard combinations. A single key is just represented by a single
character, or a single word - the same text that is printed on this key on
your keypad. As for example:


@{CODE}
@{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background}:

        The "Control" key.


@{FG Background}@{BG Text}a@{FG Text}@{BG Background}:

        The "a" key.
@{BODY}


Keyboard combinations consist of a list of "modifier keys", such as Shift,
Alt, Amiga or Ctrl, and an ordinary key. All these keys have to be pressed
AT ONCE. For example:


@{CODE}
@{FG Background}@{BG Text}Ctrl y@{FG Text}@{BG Background}:

        The "Control" key, pressed together with the "y" key.
@{BODY}


And some trickier combinations:

@{CODE}
@{FG Background}@{BG Text}Ctrl Shift Alt Tab@{FG Text}@{BG Background}:

        The "Control", "Shift", "Alternate" and "Tab" key, all to be pressed
        at once.
@{BODY}


A somewhat special qualifier is
@{FG Background}@{BG Text}NumL@{FG Text}@{BG Background}. Unlike what you
might think, this DOES NOT relate to keys on the numeric keypad. It says
that this function is available as long as "NumLock" is active.
Unfortunately, there's no light on the keyboard available to make the state
of this qualifier visible, but ViNCEd keeps it nevertheless. The keyboard
function @{"Toggle NumLock" link Kf_Toggle_NumLock} is available to change
the state of the NumL qualifier.


The keys on the numeric keypad, however, are identified by a "Num" in front
of their name, as for example
@{FG Background}@{BG Text}Num5@{FG Text}@{BG Background} for the digit "5"
in the middle of the pad, or
@{FG Background}@{BG Text}Num[@{FG Text}@{BG Background} for the square
bracket in the left top corner.


All the other qualifiers are easier to understand:


@{FG Background}@{BG Text}Shift@{FG Text}@{BG Background}: Either the left
or the right shift key.


@{FG Background}@{BG Text}LShift@{FG Text}@{BG Background}: Only the left
shift key.


@{FG Background}@{BG Text}RShift@{FG Text}@{BG Background}: Only the right
shift key.


@{FG Background}@{BG Text}Alt@{FG Text}@{BG Background}: Either the left or
the right alternate key.


@{FG Background}@{BG Text}LAlt@{FG Text}@{BG Background}: Only the left
alternate key.


@{FG Background}@{BG Text}RAlt@{FG Text}@{BG Background}: Only the right
alternate key.


@{FG Background}@{BG Text}LAmiga@{FG Text}@{BG Background}: The left amiga
key. This is the Commodore key on some keyboards.


@{FG Background}@{BG Text}RAmiga@{FG Text}@{BG Background}: The right amiga
key.


@{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background}: The control key.


@ENDNODE
@NODE Word "What is a word?"
@TOC Keyboard
A word is just any sequence of characters that is separated by blank spaces.
No quotation marks or other special characters are parsed. That is, one
shell argument may consist of several words in this sense.

@ENDNODE
@NODE Component "What is a component?"
@TOC Keyboard
A component is any sequence of characters that is separated by either blank
spaces, forward slashes "/" or colons ":". Thus, a component is almost the
same as a path component of an Amiga Dos file name except for the case the
file name contains blanks.


Please note that all component relevant
@{"keyboard functions" link KeyFunction} are only available in
@{"Shell mode" link ShellMode}. If the Shell mode is disabled, a component
is identically to a @{"word" link Word}.

@ENDNODE

@NODE Break "The Break functions of ViNCEd"
There's some difference in philosophy which programs should be "broken" and
which not. ViNCEd supports both philosophies, the "Amiga standard" as well
as the "break force" method.


The "Amiga standard" method is to sent the break signals only to "foreground
processes", i.e. programs that have been started directly in the shell.
Programs that have been launched with the "Run" command will not receive
these signals and can't be aborted for this reason by a standard Amiga
shell. I regard this as a bit dangerous because I won't be able to stop
operations in emergency operations. Therefore, the default keyboard
configuration, as well as the @{"unbound" link Keyboard} break keys will use the ViNCEd
"break force" method which sends the signal bits to both, the foreground and
the background processes.


However, you don't need to join my opinion and can bind the break keys to
the "standard Amiga" functions which operate a bit more restrictive.

@ENDNODE
@NODE KeyFunction "What is a keyboard function?"
@TOC Keyboard
A keyboard function is an "action" ViNCEd can perform in its window which
is invoked whenever a certain key is pressed. The simplest example of a
keyboard function is the @{"Cursor Right" link Kf_Cursor_Right} function.
Whenever it is invoked, the cursor is moved one position to the right.


However, there are fairly more complicated functions than this one: Take the
@{"Tab Expansion" link TabExpand} as another example. It does quite a lot
more than just moving the cursor - it searches directory trees, sorts the
found file names and inserts an expansion back into the window.


Keyboard functions can be @{"bound" link KeyBind} to keys of the keyboard -
that's what they are used for.  However, even the keys that are not bound to
any function at all will perform something, of course, sometimes even
functions you may bind to other keys explicitly. You won't be able to
type anything in the window if they won't - the standard alpha-
numerical keyboard keys perform simply text insertion.


There is also a
@{"list of available keyboard functions" link KeyFuncList} in this guide.

@ENDNODE
@NODE KeyBind "Binding a keyboard function?"
@TOC Keyboard
"Binding" means to tell ViNCEd that a certain key should invoke a certain
@{"keyboard function" link KeyFunction}. This "binding" is done by the
preference editor that comes with ViNCEd, namely @{"SetVNC" link SetVNCToc},
or the @{"Keyboard pages" link SETVNC_KEYBOARD_1} of this program, to be
precise.


All the details how to setup a custom keyboard can be found there, more
about the keyboard in general is in
the @{"keyboard section" link Keyboard}.

@ENDNODE

@REMARK Topics of the user guide
@NODE Gadgets "Gadgets in the Window"
@TOC UserToc
A standard ViNCEd window comes with five sets of "gadgets", i.e. clickable
areas in the window frame. For the first, there are the system standard
gadgets used to move and place the window, to resize it, to "depth arrange"
it and to close it. I guess I need not to say how they work, but I should
say that you can specify which system gadgets should be added when a ViNCEd
window is opened. This is done thru options placed in the
@{"window path" link OpenPath} and is described in detail elsewhere. Even
defaults can be setup thru the @{"SetVNC" link SetVNCToc} preference editor.


A non-standard gadget is the iconify gadget in the top edge of the window,
to the left of the "depth arrange" gadgets. If pressed, it will turn the
window into an "icon" that is placed on the workbench - which is sometimes
useful if you want ViNCEd to get "out of the way". All output can continue,
even if the window is "iconified". This gadget can be turned on or off by
default as well, again by @{"SetVNC" link SetVNCToc}.


However, there's something that needs to be said about iconification:
Certain programs put the window in a state where it cannot get iconified
anymore. There is not much I can do about it except providing "workarounds".
The most common problem is the program "more"; a replacement
@{"script" link Scripts} that fixes this feature has been put into your S:
directory as part of the installation procedure, and this script should be
used as replacement. For details, consider reading the
@{"compatibility" link Compatibility} section.


If iconification cannot be performed, ViNCEd will make the window as small
as possible and will move it back behind all other windows.



Left to the iconify gadget are the @{"buttons" link Macros}, at least some
can be put there if you don't see any. What these gadgets do is that they
invoke a @{"macro" link Macros} as soon as they get pressed, i.e. they are
convenient keyboard shortcuts. You may, for example,
@{"configure the buttons" link SETVNC_MACROS_3} to "type" the "list" command
for you, to see the directory by a press of a button.


To the right and at the bottom of the window are two "scrollers", including
a pair of "arrow gadgets". Guess what, they scroll the contents of the
window to the left and right, as well as upwards and downwards. As all other
gadgets, they can be turned on individually, either with the
@{"window path" link OpenPath} or by providing a default by the
@{"SetVNC" link SetVNCToc} program, in the
@{"third window page" link SETVNC_WINDOW_3}.


In case you don't like the shape of the ViNCEd custom gadgets: There is a
@{"well-defined interface" link Boopsis} to replace these gadgets with
custom images, which is for example used by the "VisualPrefs" program.

@ENDNODE

@NODE Buffers "The Window Buffers"
@TOC UserToc
A window buffer is simply the part of ViNCEd that holds the text. Text
you've typed and text you see on the screen. Unlike what you might think,
there are actually four buffers worth mentioning, not only one.


The first two are easiest to understand, the "upper" and the "lower" display
buffer. Both keep the text printed and typed to the window. Whereas the
lower buffer is responsible for the text starting at the top edge of the
window, the upper buffer keeps all lines "scrolled off" the window - this
kind of buffer is also known as "review" buffer, because it allows you to
"review" what happened some time ago and was simply scrolled out of the
window. Both buffers have a limited size and can only hold a limited amount
of lines. As soon as they overflow, the topmost or the bottommost line of
the upper resp. the lower buffer are removed to make room for more lines.


This is, if the upper or review buffer is full and the window is scrolled
upwards, the topmost line of the lower display buffer is moved to the review
buffer, and the topmost = oldest line of the review buffer gets lost. Quite
the same happens if the window is scrolled downwards and the lower display
buffer cannot hold more lines.


The size of both buffers can be configured either by the
@{"settings menu" link SettingsMenu}, or with the
@{"SetVNC program" link SetVNCToc}, the
@{"first window page" link SETVNC_WINDOW_1} to be precise.


Both buffers hold a bit more than just the plain text. Together with the
text, certain "attributes" are kept. They include not only the color and
style of the text, i.e. whether the characters are black or blue, italic or
bold, but also an attribute that tells ViNCEd whether you typed the text
yourself or the text was printed by program. The first kind of
text can be re-entered by simply placing the cursor at the line containing
the desired input and by pressing the return key. The second kind is
"usually" ignored by the return key.

Why this? Simply because you don't want to enter the shell "prompt" as a
command, won't you?


The display buffer can also be loaded from or saved to the file, that is
done either by the @{"project menu" link ProjectMenu} or by the
@{"SetVNC program" link SetVNCToc} using the @{"GET" link Ca_GET} and
@{"PUT" link Ca_PUT} arguments.


Text within the display buffers can be marked by "dragging" with the mouse,
i.e. place the mouse pointer at the beginning of the area to be marked, then
press the left button, then open a text region by moving the mouse while
holding the button. The text within the region will appear in reverse color.
It can be copied to or cut out to the clipboard for later use. Details are
found in the @{"Edit Menu section" link EditMenu} and in
the @{"block section" link BlockOps}.



The third buffer is called the @{"history" link History}. It keeps your
inputs, too, but in a different way. The text in the display buffers is
mixed input and output, with all the formatting and style information
needed, whereas the history keeps simply your inputs, no style data, no
formatting information. It cannot be "scrolled" into the window or made
visible like the two display buffers before, but is nevertheless useful.
Special @{"keyboard functions" link KeyFunction} are available that reprint
a line from the history and let you edit it again, or that search for a
specific line in the history. It's discussed in detail in the
@{"history" link History} section.


As for the display buffers, it has a limited size which can be setup with
the @{"settings menu" link SettingsMenu} or with the
@{"first window page" link SETVNC_WINDOW_1} of the
@{"SetVNC" link SetVNCToc} program. It can also saved to or loaded from a
file, again with the @{"project menu" link ProjectMenu} or with
@{"SetVNC" link SetVNCToc}, using the @{"GET" link Ca_GET} or
@{"PUT" link Ca_PUT} @{"shell arguments" link SetVNCShellArgs}.
There is also a @{"script" link Scripts} available that will dump the
history to the screen.



The fourth buffer is the "directory cache" of ViNCEd. It keeps the contents
of directories searched with the @{"Tab Expansion" link TabExpand}. It has
also a limited size, which is counted in directories to be cached, but it
can be setup only with the @{"second window page" link SETVNC_SHELL_2} of
the @{"SetVNC preference" link SetVNCToc} editor.


@ENDNODE

@NODE Menu "The ViNCEd Menu"
@TOC UserToc
Unless you provided certain options in the @{"window path" link OpenPath} of
the ViNCEd window, or another program installed a custom menu, ViNCEd
windows will come with a default menu attached to them:


@{"The Project menu" link ProjectMenu}

@{"The Edit menu" link EditMenu}

@{"The Macros menu" link MacrosMenu}

@{"The Settings menu" link SettingsMenu}


@ENDNODE
@NODE ProjectMenu "The Project Menu"
@TOC Menu
The project menu is used to open a new ViNCEd window, to load and save the
various @{"buffer" link Buffers} of ViNCEd, to run the settings editor, the
online-help and other various arrangements of the window itself.


@{B}New Window@{UB}

Invokes the "New Window" @{"macro" link Macros} to open a new ViNCEd window.
This macro can be setup on the
@{"third system page" link SETVNC_SYSTEM_3} of the
@{"SetVNC preferences editor" link SetVNCToc}.


@{B}Open...@{UB}

Loads the @{"display buffer" link Buffers} from a file.


@{B}Open History...@{UB}

Loads the @{"command history" link History} from a file.


@{B}Save As...@{UB}

Saves the @{"display buffer" link Buffers} to a file. The file will be a
plain text file with certain enclosed ANSI CSI sequences that encode the
required formatting information. 


@{B}Save History...@{UB}

Saves the @{"command history" link History} to a plain ASCII text file.


@{B}Expand Window@{UB}

Will resize and reposition the window such that it appears as the topmost
window with the maximal possible size, possibly leaving out the screen drag
bar.


@{B}Shrink Window@{UB}

Minimizes the window to the least possible size and places it behind all
other windows.


@{B}Next Screen to Front@{UB}

Identical to the standard
@{FG Background}@{BG Text}LAmiga m@{FG Text}@{BG Background} keyboard short
cut, this menu item will bring the next available screen to front.


@{B}Iconify@{UB}

Identical to the "Iconification" @{"gadget" link Gadgets} in the window,
this iconifies the window.


@{B}Jump to Next Screen@{UB}

Re-opens the window on the next available public screen.


@{B}Help...@{UB}

Invokes the "Get Help" @{"macro" link Macros} to present the online manual,
i.e. this guide. The specific macro can be setup on the
@{"third system page" link SETVNC_SYSTEM_3} of the
@{"SetVNC" link SetVNCToc} program.


@{B}Settings...@{UB}

Invokes the "Edit Settings" @{"macro" link Macros} to run the
@{"SetVNC" link SetVNCToc} program. The macro can be setup on the
@{"forth system page" link SETVNC_SYSTEM_4}.


@{B}About ViNCEd@{UB}

Presents the version information and the author of the localization.


@{B}Close Window@{UB}

Invokes the "Quit Shell" or "Quit Program" @{"macro" link Macros}, whichever
applies, or sends an "End of File" if the requested macro is empty. Both
macros can be setup on the @{"third system page" link SETVNC_SYSTEM_3}. This
menu item is identical to the @{"Generate EOF" link Kf_Generate_EOF}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE EditMenu "The Edit Menu"
@TOC Menu
The Edit menu provides functions to cut, copy and paste
@{"blocks" link BlockOps} of text to and from the clipboard, functions to
search in the @{"command history" link History} and functions to clear or
reset the window.


@{B}Cut@{UB}

Removes a @{"marked region" link BlockOps} from the window and places it
into the clipboard.


@{B}Copy@{UB}

Copies the @{"marked region" link BlockOps} into the clipboard and un-mark,
i.e. "hide", the region.

ViNCEd can be told to run this operation automatically - without hiding the
block - as soon as you release the mouse button when opening a region. This
is a bit special for the Amiga, but rather common on Unix (X11) machines.

The "Implicit copy after text marking" flag, how it's called, can be found
on the @{"second edit page" link SETVNC_EDIT_2} of the
@{"SetVNC" link SetVNCToc} program.


There is a second flag that changes the operation of "Copy" and "Cut"
operations, namely which part of the text should go into the clipboard: Only
your input, or all text, even output. (For details about the difference
check the @{"buffer" link Buffers} section.)

This flag is called "Don't write printed text into clipboard" and can be
found @{"on the same page" link SETVNC_EDIT_2}.


@{B}Hide@{UB}

Remove the @{"block mark" link BlockOps}, i.e. un-highlite the text.


@{B}Paste@{UB}

Insert the contents of the clipboard as if it was typed in by you. That
might be a bit dangerous because anything what's left in the clipboard is
interpreted as commands by the shell or any other program receiving input
from the ViNCEd window. A "delete #? force all" in the clipboard could be
quite desasterous!


A similar operation can be performed without the menu; If you own a
three-button mouse, you may insert the clipboard contest with the middle
mouse button. It will first place the cursor at the position pointed to by
the mouse, and then perform the same operation as "Paste" above.


Using the middle mouse button as "Paste" replacement is, too, not very
Amiga like; the feature has been adapted from the Unix world as well.


If you do not want to leave the middle mouse button for this "Paste"
operation, you may disable it on the
@{"second edit page" link SETVNC_EDIT_2} of the
@{"preferences editor" link SetVNCToc}.



If you do not own a three button mouse, there is a replacement sequence:
Hold the @{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} key and
press the left mouse button. This replacement works even if the use of the
middle mouse button has been disabled.


@{B}Clear Window@{UB}

Erases the @{"lower display buffer" link Buffers} and requests a new shell
prompt at the first line of the window. This is identical to the
@{"Clear Screen" link Kf_Clear_Screen} keyboard
@{"function" link KeyFunction}.


@{B}Erase to End of Window@{UB}

Removes all text behind and below the cursor position. Quite the same
operation is performed by the
@{"Delete End of Display" link Kf_Delete_End_of_Display} keyboard
@{"function" link KeyFunction}.


@{B}Reset Terminal@{UB}

Resets the terminals. The @{"lower display buffer" link Buffers} will be
cleared, the window style flags and colors will be requested from the
globally active settings and the text styles will be reset.

If you press the
@{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} key while
selecting this item, the reset will be a full reset. Additional to the
actions taken above above, the @{"command history" link History} and the
upper display buffer will be erased as well.

The unshifted variant is identically to the
@{"keyboard function" link KeyFunction} @{"Reset" link Kf_Reset}, the
shifted full version is the function @{"Full Reset" link Kf_Full_Reset}.


@{B}Search Forwards@{UB}

Search the @{"history" link History} in "upwards" direction. This is
identically to the
@{"Search History Upwards" link Kf_Search_History_Upwards} keyboard
@{"function" link KeyFunction}.


@{B}Search Backwards@{UB}

Search the @{"history" link History} in the "downwards" direction. Identical
to the @{"Search History Downwards" link Kf_Search_History_Downwards}
 keyboard @{"function" link KeyFunction}.

@ENDNODE
@NODE MacrosMenu "The Macros Menu"
@TOC Menu
The macros menu provides items to invoke @{"macros" link Macros}, as well as
to define them and to place them into this menu. A macro, for short, is a
shortcut for a longer keyboard sequence you could have typed in as well. For
example, a macro could type in the letters
 @{FG Background}@{BG Text}l@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}i@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}s@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}t@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}Return@{FG Text}@{BG Background}
 to show the contents of the current directory with the press of a button.

More details about macros can be found in the
@{"macro section" link Macros}.


The macros menu consists first of the macros itself, with the keyboard
equivalences @{FG Background}@{BG Text}RAmiga@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}0@{FG Text}@{BG Background} to
 @{FG Background}@{BG Text}RAmiga@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}9@{FG Text}@{BG Background}. Selecting any of
these items will just run the macro that is shown in the menu. In the case
the macro is too long to fit in, only the first few characters will be shown
there, followed by an ellipsis "...".


The first item, however, allows you to define macros: First, type the
keyboard macro anywhere on the screen, wherever you like. For the example
above, you had to type "list".

Then use the mouse pointer and mark the macro body in a
@{"block" link BlockOps}. If you want to include a
final @{FG Background}@{BG Text}Return@{FG Text}@{BG Background} character
as well, mark the line end together with the macro text, i.e. drag the mouse
over the end of the line; ViNCEd will now show a dotted half block at the
end of the line which indicated that the line end is part of the block.


As soon as you've captured the macro in a @{"block" link BlockOps}, select
the macro you want to replace FROM THE FIRST "Cut Macro" sub-menu. ViNCEd
will now remove the macro text from the screen and insert it into the menu
at the desired position. By the way: This sub menu will not be available
unless you really marked a block, of course...


The marked line end will appear there as "\\r", which is the ViNCEd way of
saying that the
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key should be
pressed. More about these "macro control sequences" can be found in the
@{"macro section" link Macros}.

@ENDNODE
@NODE SettingsMenu "The Settings Menu"
@TOC Menu
As you might have guessed, this menu covers some frequently used settings of
ViNCEd. There are far too many possible settings to fit in this menu, all of
them can be selected with the @{"SetVNC program" link SetVNCToc}, so I had
to make an decision and made only the most frequently used available in this
menu.



The first three items in this menu are used to set the size of the
various @{"buffers" link Buffers} ViNCEd provides, namely the size of
the @{"command history" link History} in lines, the size of
the @{"lower display buffer" link Buffers} in lines and the size of the
upper @{"review buffer" link Buffers}, also given in lines. To set any of
these sizes, type in the desired buffer size, wherever you like, capture it
in a @{"block" link BlockOps} and select the appropriate item.


The following items toggle-select various flags ViNCEd offers, please follow
the links:


@{"Dos Cursor Mode" link Fl_DOSCURSOR}

@{"Overwrite Mode" link Overwrite}

@{"Wrap Around Buffer" link Fl_WRAP}

@{"Smart Close" link Fl_SMARTCLOSE}

@{"Safer Close" link Fl_SAFERCLOSE}

@{"Cut Inputs Only" link Fl_CUTUSER}

@{"Rebuild Delay" link Fl_REBUILDDELAY}

@{"Auto Copy" link Fl_AUTOCOPY}

@{"NumPad for Cursor" link NumLock}


@ENDNODE
@NODE Overwrite "Overwrite Mode"
@TOC SettingsMenu
If this menu item is checked, the overwrite mode is active. This means that
text you type overwrites the text that is already in the window, it is not
inserted as usual. The @{"TAB Forwards" link Kf_TAB_Forwards} keyboard
@{"function" link KeyFunction} behaves then a bit different, too. Instead
of inserting as many spaces as required to place the cursor at the next
tabulator stop, the cursor gets just moved. Quite the same happens to
@{"TAB Backwards" link Kf_TAB_Backwards}.


There is also a @{"keyboard function" link KeyFunction} that toggles this
flag; it is called @{"Toggle Overwrite" link Kf_Toggle_Overwrite} and is
@{"bound" link KeyBind} in the default setting to
@{FG Background}@{BG Text}Alt Num0@{FG Text}@{BG Background}.


@ENDNODE
@NODE NumLock "NumPad for Cursor"
@TOC SettingsMenu
If the "NumPad for Cursor" menu item is checked, ViNCEd will set the
"NumLock" qualifier. This qualifier changes the behavour of certain keys in
the keyboard, quite similar to
the @{FG Background}@{BG Text}Caps Lock@{FG Text}@{BG Background} key with
the exception that there is unfortunately no light to indicate its state.


In the default @{"keyboard" link Keyboard} setting, this flag will turn the
numbers on the numeric keypad into cursor key equivalents, i.e. they can be
used to move the cursor around.


This menu item is functional identically to the
@{"Toggle NumLock" link Kf_Toggle_NumLock} keyboard
@{"function" link KeyFunction}; it is @{"bound" link KeyBind} to the
keyboard combination
@{FG Background}@{BG Text}Alt Num[@{FG Text}@{BG Background} in the default
keyboard configuration.

@ENDNODE

@NODE BlockOps "Block Operations"
@TOC UserToc
A "block" is, in ViNCEd terms, a "marked" or "hilited" area of text. With
the help of the @{"edit menu" link EditMenu}, certain operations can be
performed with the text in the block. It can be copied to the clipboard and
by this made available to other programs, it can be cut out, and the
clipboard contents can be re-inserted back into the window.


The text in the "block" is printed with reverse colors, but the block may
contain something more "not so obvious", the "marked line end". It will be
shown as a checkered box at the end of a line, of about half the size of the
cursor. The marked line end is a special character you are not able to see
except for its function and when it's marked. It keeps lines "apart"
and marks the end of a line on the display. This is somehow the printed
equivalent of the
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key on the
keyboard - not a letter, but still something important. If the text block is
later on re-inserted from the clipboard, this marked line end is substitutes
precisely by a press to the
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key.



To mark a block, first move the mouse pointer to the beginning of the
desired block, probably use the @{"scrollers" link Gadgets} to make the
desired part of the @{"display buffer" link Buffers} visible, then hold the
left mouse button. While holding the mouse button, move the mouse to the end
of the desired block, then release it. This is referred to as "dragging".
If the block is too large to fit on one window, move the mouse pointer to
the edges of the window to make ViNCEd scrolling the contents.


If you're marking more than one line, the "ends" of the lines in between
will become marked automatically. However, if the line end of a single line
should be marked, the mouse pointer must be moved behind the line explicitly
until the checkered box appears.


More about the clipboard functions is in the
@{"edit menu sections" link EditMenu}.


Just as a side remark: ViNCEd @{B}DOES NOT@{UB} require the ConClip program.
If you're working exclusively with ViNCEd, you may remove this program from
your startup-sequence.

@ENDNODE

@NODE Macros "Macros and Buttons"
Macros and buttons are used for quite the same: They replace lengthy
keyboard sequences. The only way in which they differ is how they are
defined and how they are "invoked". "Invoking" means that the "contents" of
the macro and the button - which is plain ASCII text - is put into the
keyboard input buffer, as if you had typed this text yourself. Because not
all keys are represented by a printable ASCII character, certain "control
sequences" are available that expand into these keys - more on that below.


Macros are defined by either the @{"macros menu" link MacrosMenu} by cutting
them directly from the text, or by the preferences editor,
@{"SetVNC" link SetVNCToc}, on the @{"Macros" link SETVNC_MACROS} pages.
Macros are made available thru the @{"macros menu" link MacrosMenu} and the
keyboard shortcuts
@{FG Background}@{BG Text}RAmiga 0@{FG Text}@{BG Background} to
@{FG Background}@{BG Text}RAmiga 9@{FG Text}@{BG Background}.


Unlike macros, which consist only of their "macro body", the buttons contain
an additional string, the "button title". This button title will appear in
the title of the ViNCEd window and should be as short as possible, to leave
room for many buttons. Buttons are invoked by their
@{"gadgets" link Gadgets} in the window title, and can be defined
exclusively thru the @{"SetVNC" link SetVNCToc} program, at the
@{"third macro page" link SETVNC_MACROS_3}. Like macros, buttons have
keyboard shortcuts - the function keys on the keyboard. The
@{FG Background}@{BG Text}F1@{FG Text}@{BG Background} key invokes the
rightmost button, @{FG Background}@{BG Text}F2@{FG Text}@{BG Background} the
next button to the left and so on.



Now for the special characters in the macro body. This string is "almost" a
C string with the standard C syntax for special control characters.

A plain ASCII character is hereby represented by itself, special characters
are "escaped" with the backslash "\\" and an ordinary character - this
sequence expands then into a control character. The backslash must be,
therefore, escaped with another backslash. Here's the list:

@{CODE}
\\t:            The TAB character, ASCII 09
\\b:            The Backspace character, ASCII 08
\\r:            The CR character, ASCII 0D. This is the code send by the
               @{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key.
               This sequence MUST be used to include a press to @{FG Background}@{BG Text}Return@{FG Text}@{BG Background}
               in the macro body.
\\n:            The LF character, ASCII 0A. Do not mix this with \\r.
\\a:            The BEL character, ASCII 07
\\f:            The FF character, ASCII 0C
\\\\:            The backslash itself.
\\"             The double quote
\\'             The single quote
\\[             The opening square bracket
\\]             The closing square bracket.
@{BODY}

Additionally, there is a way to insert a character by its ASCII value: Type
the backslash \\, followed by the ASCII value, followed by a dot (.). The
ASCII value can be either given as a decimal number, or, if preceded by $
or 0x, as a hexadecimal value, with § as octal and with % as binary number.
The # marks the number as decimal explicitly. Several examples follow:

@{CODE}
\\155.          The CSI character 9B in decimal
\\0x9b.         same in hex,
\\$9b.          again in hex, but slightly different notation
\\§233.         and in octal
@{BODY}

Please note the "." at the end of the number. This makes some difference, as
for example

@{CODE}
\\$9B.          the CSI character,  and
\\$9.B          the ASCII TAB, followed by the character B
@{BODY}

is quite different. By using the CSI, all CSI keyboard sequences ViNCEd
understands can be inserted into the macro, for example:

@{CODE}
\\$9B.A         move the cursor upwards one line
@{BODY}

The complete list of @{"CSI keyboard sequences" link KeyboardList} is simply
too long to presented here, it's described in detail
@{"elsewhere" link KeyboardList}.


The single or double quotes must be used to enclose leading or trailing
spaces that would be usually ignored:

@{CODE}
" "              the plane space itself.
@{BODY}


The square brackets have a special meaning. Whenever they appear, the string
between "[" and "]" is considered an Amiga DOS file name pattern and a file
requester is opened. You're then allowed to pick a filename the square
brackets will expand into. For example, consider the following macro:

@{CODE}
MultiView [#?.jpg]\\r            Show my favourite pictures!
@{BODY}


Whenever this macro is invoked, a file requester will pop open, allowing you
to select a picture - or to be precise, a file whose file name ends with
".jpg". This picture is then shown by "MultiView". Ain't that great?


@ENDNODE

@REMARK The window open path, and subtopics
@NODE OpenPath "The Window Path"
@TOC UserToc
The "window path" is for ViNCEd what's the file name for an ordinary disk.
This path is, for example, used in the "WINDOW" tooltype of the Shell icon
on your workbench and specifies not only that the output of the Shell should
go to a console window, but also a lot of parameters for the window.


ViNCEd knows quite a lot of parameters here, including the standard CON:
arguments and all parameters of ConMan. Here's the the list:



@{"VNC:" link Op_Name}
@{"[W userwindow/]" link Op_Wuserwindow}
@{"[S userscreen/]" link Op_Suserscreen}
@{"[B superbitmap/]" link Op_Bsuperbitmap}
@{"leftedge/" link Op_leftedge}
@{"topedge/" link Op_topedge}
@{"width/" link Op_width}
@{"height/" link Op_height}
@{"title" link Title}
@{"[/COLS cols]" link Op_COLS}
@{"[/ROWS rows]" link OP_ROWS}
@{"[/WAIT]" link Op_WAIT}
@{"[/AUTO]" link Op_AUTO}
@{"[/CLOSE]" link Op_CLOSE}
@{"[/NOCLOSE]" link Op_NOCLOSE}
@{"[/SMART]" link Op_SMART}
@{"[/SIMPLE]" link Op_SIMPLE}
@{"[/INACTIVE]" link Op_INACTIVE}
@{"[/BACKDROP]" link Op_BACKDROP}
@{"[/BACK]" link Op_BACK}
@{"[/NOBORDER]" link Op_NOBORDER}
@{"[/SIZE]" link Op_SIZE}
@{"[/NOSIZE]" link Op_NOSIZE}
@{"[/DRAG]" link Op_DRAG}
@{"[/NODRAG]" link Op_NODRAG}
@{"[/DEPTH]" link Op_DEPTH}
@{"[/NODEPTH]" link Op_NODEPTH}
@{"[/NOMENU]" link Op_NOMENU}
@{"[/MENU]" link Op_MENU}
@{"[/NOPROPX]" link Op_NOPROPX}
@{"[/NOPROPY]" link Op_NOPROPY}
@{"[/PROPX]" link Op_PROPX}
@{"[/PROPY]" link Op_PROPY}
@{"[/FALLBACK]" link Op_FALLBACK}
@{"[/NOFALLBACK]" link Op_NOFALLBACK}
@{"[/OLDLOOK]" link Op_OLDLOOK}
@{"[/CHUNKY]" link Op_CHUNKY}
@{"[/PLANAR]" link Op_PLANAR}
@{"[/SHELL]" link Op_SHELL}
@{"[/NOSHELL]" link Op_NOSHELL}
@{"[/BUTTONS]" link Op_BUTTONS}
@{"[/NOBUTTONS]" link Op_NOBUTTONS}
@{"[/ICONIFY]" link Op_ICONIFY}
@{"[/NOICONIFY]" link Op_NOICONIFY}
@{"[/ICONIFIED]" link Op_ICONIFIED}
@{"[/ANSI]" link Op_ANSI}
@{"[/NOANSI]" link Op_NOANSI}
@{"[/WINDOW window]" link Op_WINDOW}
@{"[/FONT name.size]" link Op_FONT}
@{"[/KEEP]" link Op_KEEP}
@{"[/SCREEN pubname]" link Op_SCREEN}
@{"[/ALT leftedge/topedge/width/height]" link Op_ALT}
@{"[/STITLE title]" link Op_STITLE}
@{"[/SDEPTH depth]" link Op_SDEPTH}
@{"[/SFONT name.size]" link Op_SFONT}
@{"[/TITLEBAR]" link Op_TITLEBAR}
@{"[/NOTITLEBAR]" link Op_NOTITLEBAR}
@{"[/MONITORID id]" link Op_MONITORID}
@{"[/MONITOR name]" link Op_MONITOR}
@{"[/PLAIN]" link Op_PLAIN}
@{"[/PREFS pathname]" link Op_PREFS}
@{"[/conmanoptions]" link Op_conmanoptions}


All options in square brackets are, uhm, optional. Quite a lot of choice,
don't you think so? Even some of the non-optional arguments, like the
position arguments "leftedge", "topedge", "width" and "height" can be left
blank. ViNCEd picks reasonable defaults in this case. The only thing that
MUST NOT be dropped is the @{"name of the handler" link Op_Name}, VNC: in
the line above. If this is the only argument given, and only in this case,
ViNCEd will get its path from a different location, namely from the "default
path" which can be setup with the @{"SetVNC" link SetVNCToc} program on the
@{"forth system page" link SETVNC_SYSTEM_4}. It uses the same syntax except
that the leading "VNC:" - the name of the handler - MUST NOT be given
in the preferences.



And finally, another note here about proper "escaping":


If you need to put anywhere in this string a literal forwards slash that
should be regarded as character, not as argument separator, either escape it
with a backslash, i.e. write \\/, or enclose the complete parameter of the
argument in double quotes, as for example


..../SCREEN"My/Screen"...       identical to    .../SCREENMy\\/Screen...


to put the window on a public screen of the (undoubtfully silly) name
My/Screen. To insert a literal double quote or a literal backslash, just
escape with a backslash. That is


@{CODE}
\\\\             is the backslash, literally.

\\/             is the forwards slash, but only outside of double quotes

\\"             is the double quote
@{BODY}

Finally, if you want to put all this into a shell command line, all double
quotes in a double-quoted string must be escaped with an asterisk again,
because the shell parses this string, too. That is, you need to write \\*"
to get a single double quote within a quoted string in a shell argument.
Silly? Guess so... An even sillier (and admittedly ill) example is discussed
in the @{"window title" link Title} section.

@ENDNODE
@NODE Op_Name "The name of the ViNCEd handler"
@TOC OpenPath
The name of the ViNCEd window handler chosen by the installation script is
"VNC:", or "CON:" if you choose to replace the default console handler by
ViNCEd; this replacement is done by the @{"SetVNC" link SetVNCToc} program
which is called in the User-Startup on startup.

Another possible name is, for backwards compatibility, "NEWCON:".


Please DO NOT mount ViNCEd under different names, the fixed names are
required for the tricky internal mounting algorithm; the problem is here
that ViNCEd is both, a library and a handler. Unlike all other handlers, it
can be flushed from memory if it is no longer required.


A third available name is "VNR:". This is reserved by the installer script
for the @{"RAW" link ConsoleModes} version of ViNCEd.

@ENDNODE
@NODE Op_Wuserwindow "ConMan W Argument"
@TOC OpenPath
This ConMan compatible argument is used to install a ViNCEd handler into an
already existing intuition window. The address of the intuition window
structure must be given as a hex number following the 'W', optionally with a
leading '$' or '0x'. The intuition window will be closed when ViNCEd is done
unless the @{"KEEP" link Op_KEEP} parameter is given.


This parameter is exclusively reserved for the experts, don't play with it.

@ENDNODE
@NODE Op_Suserscreen "ConMan S Argument"
@TOC OpenPath
This ConMan compatible argument selects an already existing intuition screen
ViNCEd will open its window on. The screen is supposed to be a private
custom screen and must stay open until ViNCEd closes its window. The address
of the custom screen must be given as a hex number following the 'S',
optionally with a leading '$' or '0x'.


This parameter is exclusively the experts. If you want to open ViNCEd on its
own screen, use one of the parameters @{"SDEPTH" link Op_SDEPTH},
@{"SFONT" link Op_SFONT}, @{"MONITORID" link Op_MONITORID},
@{"MONITOR" link Op_MONITOR}, @{"TITLEBAR" link Op_TITLEBAR} or
@{"NOTITLEBAR" link Op_NOTITLEBAR}.

@ENDNODE
@NODE Op_Bsuperbitmap "ConMan B Argument"
@TOC OpenPath
This ConMan compatible argument will turn the ViNCEd window into a
SuperBitmap window, with a bitmap allocated by the invoking program. The
address of the bitmap must be given as a hex number following the 'B',
optionally with a leading '$' or '0x'. The bitmap structure WILL NOT be
released when the window is closed.


This parameter is here just for backwards compatibility, its use is not
recommended. Superbitmap windows are usually much slower than the standard
"simple" or "smart" refresh windows ViNCEd uses. Furthermore, leave it to
the professionals to play with this argument.

@ENDNODE
@NODE Op_leftedge "LeftEdge Argument"
@TOC OpenPath
The left edge given in pixels from the left edge of the screen the window
will appear on. ViNCEd may try to move or scale the window to make it fit on
the screen, the window may appear for this reason at a slightly different
position.

You may drop this argument, ViNCEd will use some reasonable default.

@ENDNODE
@NODE Op_topedge "TopEdge Argument"
@TOC OpenPath
The top edge of the ViNCEd window to open, counted in pixels from the left
edge of the screen. ViNCEd may adjust this value to make the window fit on
the screen.

If you select a top edge of "-1", ViNCEd will adjust the top edge of the
window to the bottom edge of the screen drag bar.


If you drop this argument, ViNCEd will choose a reasonable default.

@ENDNODE
@NODE Op_width "Width Argument"
@TOC OpenPath
The width of the ViNCEd window to open, in pixels. ViNCEd may adjust this
value to make the window fit on the screen.


If the width argument is "-1", the window will be made as wide as possible.


If you drop this argument, ViNCEd will select a reasonable default for you.


Please note that there is also the @{"COLS" link Op_COLS} argument which
selects the size of the window in characters of the selected window font
instead using the size in pixels.

@ENDNODE
@NODE Op_height "Height Argument"
@TOC OpenPath
The height of the ViNCEd window to open, in pixels. ViNCEd may adjust this
value to ake the window fit on the screen.


If the height argument is "-1", the window will be made as wide as possible.


If the argument is dropped, ViNCEd will select a reasonable default for the
width.


If you want to specify the height in text characters of the selected font
instead in pixels, use the @{"ROWS" link Op_ROWS} argument.

@ENDNODE
@NODE Op_COLS "COLS Argument"
@TOC OpenPath
Specifies the width of a ViNCEd window in columns of text of the selected
font that should fit into the window. The number must follow the COLS
argument and can be given in decimal, or hexadecimal with a leading '$' or
'0x'.


ViNCEd may adjust this value to make the window fit on the screen.

@ENDNODE
@NODE Op_ROWS "ROWS Argument"
@TOC OpenPath
Specifies the height of the window in rows of text of the selected font that
should fit into the window. The number of rows must follow ROWS, and can be
given in decimal or hex, with a leading '$' or '0x'.


ViNCEd may adjust this value to make the window fit on the screen.

@ENDNODE
@NODE Op_WAIT "WAIT Argument"
@TOC OpenPath
If given, ViNCEd will keep its window open even if the last program that
used this window closed its stream to ViNCEd. The window must then be closed
by the user explicitly, either by pressing the close gadget or by using the
keyboard @{"EOF" link Kf_Generate_EOF} @{"function" link KeyFunction}, which
is usually @{"bound" link KeyBind} to
@{FG Background}@{BG Text}Ctrl \\@{FG Text}@{BG Background}.

@ENDNODE
@NODE Op_AUTO "AUTO Argument"
@TOC OpenPath
If given, ViNCEd will close the window temporary if the user pressed the
close gadget and no program is waiting for input. The window will pop-open
again as soon as some program running in this window requests input or
prints into the window.


The behavour of ViNCEd if more than one program uses this window can be
setup with the
@{"Don't send EOF until everybody waits" link Fl_CLOSEQUEUE} flag.

@ENDNODE
@NODE Op_CLOSE "CLOSE Argument"
@TOC OpenPath
If given, ViNCEd will add a close gadget to the window. This is, however,
the ViNCEd default since the very first release; there was always a close
gadget...


Anyways, if you don't like this default, you may turn it off on the
@{"third window page" link SETVNC_WINDOW_3} of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Op_NOCLOSE "NOCLOSE Argument"
@TOC OpenPath
If given, ViNCEd will not add a close gadget to the window and hence
possibly override its default to add one.


The default can be setup on the
@{"third window page" link SETVNC_WINDOW_3} of
@{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Op_SMART "SMART Argument"
@TOC OpenPath
If given, ViNCEd will use a "smart refresh" window. This means that the
window refresh will be done by the operating system, not by ViNCEd itself.
The resulting window might refresh a bit faster therefore, but will also use
more chip memory for the buffer. The most important advantage of
"smart refresh" windows is, however, that the scrolling will be a bit
smoother.


The default is @{"SIMPLE" link Op_SIMPLE}.

@ENDNODE
@NODE Op_SIMPLE "SIMPLE Argument"
@TOC OpenPath
Tells ViNCEd to use a "simple refresh" window. This means that ViNCEd is
responsible for reprinting the window contents in case part of the window
gets damaged by overlaying windows. Since ViNCEd is rather fast in printing
and this option is less memory extensive than @{"SMART" link Op_SMART}, this
is the default.

@ENDNODE
@NODE Op_INACTIVE "INACTIVE Argument"
@TOC OpenPath
If given, ViNCEd will not activate this window automatically on open, i.e.
the input focus will not change.

@ENDNODE
@NODE Op_BACKDROP "BACKDROP Argument"
@TOC OpenPath
This argument will turn the window into a backdrop window which sits always
behind all other windows and cannot be brought to front. The main usage of
this argument is to make ViNCEd appear on its own screen, without any
"visible window" or border.


To make this working, specify the options @{"NOBORDER" link Op_NOBORDER},
@{"NOSIZE" link Op_NOSIZE}, @{"NOPROPX" link Op_NOPROPX},
@{"NOPROPY" link Op_NOPROPY}, @{"NODRAG" link Op_NODRAG},
@{"NODEPTH" link Op_NODEPTH} and @{"NOBUTTONS" link Op_NOBUTTONS} as well,
select an empty string as title and adjust the position and the size of the
window accordingly. These options are easely forgotten and therefore bundled
in the "meta"-option @{"BACK" link Op_BACK}. With all that selected, use the
@{"SDEPTH" link Op_STITLE} option to open a custom screen for ViNCEd.


The result will be a "full screen" ViNCEd which looks like a terminal.

@ENDNODE
@NODE Op_BACK "BACK Argument"
@TOC OpenPath
This argument will turn the window into a backdrop window which sits always
behind all other windows and cannot be brought to front; it will also
suppress the window border and all buttons and sliders in it, as there are
the close gadget, the drag gadgets, the horizontal and vertical sliders and
much more. The main usage of this argument is to make ViNCEd appear on its
own screen, without any "visible window" or border.


If you specify the @{"SDEPTH" link Op_STITLE} option as well, ViNCEd will
open on a custom screen as a "shell screen", almost like a terminal.

@ENDNODE
@NODE Op_NOBORDER "NOBORDER Argument"
@TOC OpenPath
If specified, ViNCEd will tell the operating system not to draw a frame
around the border. The result will be usually ugly looking because all the
other system @{"gadgets" link Gadgets} will still be drawn unless you turn
them off explicitly. The main use of this option is to make ViNCEd appear on
its own screen without a visible window border. Check the
@{"BACKDROP" link Op_BACKDROP} or @{"BACK" link Op_BACK} option for details
about this trick.

@ENDNODE
@NODE Op_SIZE "SIZE Argument"
@TOC OpenPath
If present, ViNCEd will add a sizing gadget to the window. Since this is the
default, this argument does usually not much and is just provided for
symmetry.

@ENDNODE
@NODE Op_NOSIZE "NOSIZE Argument"
@TOC OpenPath
If present, ViNCEd will not add a sizing gadget to the window.

@ENDNODE
@NODE Op_DRAG "DRAG Argument"
@TOC OpenPath
If present, ViNCEd will provide a drag bar for the window, i.e. the
window will be movable. This is the default, hence this option does usually
not very much. It is just provided for symmetry.

@ENDNODE
@NODE Op_NODRAG "NODRAG Argument"
@TOC OpenPath
If present, ViNCEd will not provide a drag bar for the window, i.e. the
window will not be movable. This is seldom useful except for building
windows without any actual border at all. For details, check the
@{"BACKDROP" link Op_BACKDROP} documentation.

@ENDNODE
@NODE Op_DEPTH "DEPTH Argument"
@TOC OpenPath
If given, ViNCEd will install a depth arrangement gadget in its window, i.e.
you may bring this window in front of and behind other windows. Since this
is the default anyways, this argument does usually nothing useful. It is
just provided for symmetry.

@ENDNODE
@NODE Op_NODEPTH "NODEPTH Argument"
@TOC OpenPath
If given, ViNCEd will not install a depth arrangement gadget in its window.
This is seldom useful, possibly except for building a window without any
visible frame at all. For details, check the
@{"BACKDROP" link Op_BACKDROP} argument.

@ENDNODE
@NODE Op_NOMENU "NOMENU Argument"
@TOC OpenPath
If present, ViNCEd will not attach its own @{"menu" link Menu} to the
screen. However, most @{"block" link BlockOps} functions like "Cut", "Copy" and
"Paste" will be still available by their shortcuts, provided you
@{"bound" link KeyBind} these shortcuts to the proper keys.


The default is to add a menu for windows running in the
@{"shell mode" link ShellMode}, and not to add a window to all other
windows.

@ENDNODE
@NODE Op_MENU "MENU Argument"
@TOC OpenPath
If present, ViNCEd will attach its @{"menu" link Menu} to the window.


The menu will be there anyways provided the window was opened in
@{"shell mode" link ShellMode}, but must be requested explicitly for all
other windows.

@ENDNODE
@NODE Op_NOPROPX "NOPROPX Argument"
@TOC OpenPath
If this argument is given, ViNCEd will not add the horizontal slider at the
bottom of the window.


This slider can be disabled by default as well, check the
@{"third window page" link SETVNC_WINDOW_3} of the
@{"SetVNC" link SetVNCToc} program.

@ENDNODE
@NODE Op_NOPROPY "NOPROPY Argument"
@TOC OpenPath
If this argument is given, ViNCEd will not provide the vertical slider at
the right edge of the window.


This slider can be disabled by default as well, check the
@{"third window page" link SETVNC_WINDOW_3} of the
@{"SetVNC" link SetVNCToc} program.

@ENDNODE
@NODE Op_PROPX "PROPX Argument"
@TOC OpenPath
If given, ViNCEd will add a horizontal slider to the bottom edge of the
window if this slider was disabled on the
@{"third window page" link SETVNC_WINDOW_3} of the
@{"SetVNC" link SetVNCToc} program.

@ENDNODE
@NODE Op_PROPY "PROPY Argument"
@TOC OpenPath
If given, ViNCEd will add a vertical slider to the right edge of the
window if this slider was disabled on the
@{"third window page" link SETVNC_WINDOW_3} of the
@{"SetVNC" link SetVNCToc} program.

@ENDNODE
@NODE Op_FALLBACK "FALLBACK Argument"
@TOC OpenPath
If this argument is given and ViNCEd is told to open on a public screen
which is not available, ViNCEd will fall back to the default public screen.


This is also the default behavour.

@ENDNODE
@NODE Op_NOFALLBACK "NOFALLBACK Argument"
@TOC OpenPath
If this argument is present and ViNCEd is told to open on a non-available
public screen, it will fail and refuse to open at all.

@ENDNODE
@NODE Op_OLDLOOK "OLDLOOK Argument"
@TOC OpenPath
If given, ViNCEd will color the menus in the old pre-3.0 way, whatever this
might be good for.

@ENDNODE
@NODE Op_CHUNKY "CHUNKY Argument"
@TOC OpenPath
Tell ViNCEd explicitly not to try to optimize scrolling for native amiga
displays. This optimization effort will eventually slow down the graphics
output considerably on gfx boards.

However, ViNCEd will be usually smart enough to detect if a native or a
non-native screen is available, so this argument is not strictly required.


The "chunky" mode can be turned on by default as well, it's on the
@{"first system page" link SETVNC_SYSTEM_1} of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Op_PLANAR "PLANAR Argument"
@TOC OpenPath
Tells ViNCEd that it the window will appear on a native amiga screen and it
should try to optimize the scrolling speed. However, since the PLANAR option
is automatically turned off anyways as soon as a "chunky" non-native screen
is detected, this option doesn't do too much in the current implementation.


The "chunky" mode can be turned on by default as well, it's on the
@{"first system page" link SETVNC_SYSTEM_1} of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Op_SHELL "SHELL Argument"
@TOC OpenPath
If this is present, the window is opened in @{"shell mode" link ShellMode}.
This has quite a lot of consequences, as turning on the menu, the
@{"TAB expansion"  link TabExpand} and other goodies. More details are found
in a @{"separate chapter" link ShellMode}.


The shell mode can be turned on by default as well, the responsible flag is
found on the @{"first shell page" link SETVNC_SHELL_1}.


Under Os 3.2 and above, TAB expansion works independent of the Shell mode,
as the shell performs TAB expansion itself, unless told not do so.

@ENDNODE
@NODE Op_NOSHELL "NOSHELL Argument"
@TOC OpenPath
If this is present, the window is not opened in
@{"shell mode" link ShellMode}, but in standard mode. This has quite a lot
of consequences, as disabling the menu unless turned on explicitly with
@{"MENU" link Op_MENU}, disabling the @{"TAB expansion" link TabExpand} and
other goodies.


The default state of the @{"Shell mode" link ShellMode} can be controlled by
@{"SetVNC" link SetVNCToc} as well, it's on the
@{"first shell page" link SETVNC_SHELL_1}.

@ENDNODE
@NODE Op_BUTTONS "BUTTONS Argument"
@TOC OpenPath
If given, ViNCEd will add the @{"buttons" link Macros} to the window title
and will hence make them available.


This is also the default for windows operating in
@{"Shell mode" link ShellMode}.

@ENDNODE
@NODE Op_NOBUTTONS "NOBUTTONS Argument"
@TOC OpenPath
If given, ViNCEd will suppress the @{"button gadgets" link Macros} in the
window title.

This is the default for @{"non-shell" link ShellMode} windows.

@ENDNODE
@NODE Op_ICONIFY "ICONIFY Argument"
@TOC OpenPath
If given, ViNCEd will add an iconification @{"gadget" link Gadgets} to the
window. If this gadget is pressed, ViNCEd will turn into an icon on the
workbench screen, if possible. Output will resume in this case as usual,
except that it won't be printed, but is just kept internally.


However, there's a certain quirk with this gadget: Certain programs make it
impossible to iconify the window - the window can't be closed safely as soon
as these programs are run; the most (un)famous example is the "More"
command. There is not much I can do about it except offering a work-around:
The installation procedure should have installed a tiny
@{"script" link Scripts} in your "S:" drawer which replaces the standard
"more" and should be used instead. If possible, setup your path in a way
such that "S:More" is used instead of the standard more command. If
unavoidable, run the command @{"SetVNC FreePointer" link CA_FreePointer} in
the shell -this will allow iconification in most cases. Details about this
problem can be found in the @{"compatibility chapter" link Compatibility}.


The iconification gadget will be added by default, but if you don't like the
iconification gadget, you may turn it off with the
@{"third window page" link SETVNC_WINDOW_3} of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Op_NOICONIFY "NOICONIFY Option"
@TOC OpenPath
If this flag is present in the window path, ViNCEd will not add an
iconification gadget to the window. You may also choose to make this the
default, there is a flag on the
@{"third window page" link SETVNC_WINDOW_3} of the
@{"preference editor" link SetVNCToc} that will disable the iconification
gadget unless you ask for it explicitly.


For more insight about this gadget, read the notes about the
@{"ICONIFY" link Op_ICONIFY} gadget and the
@{"gadget section" link Gadgets}.

@ENDNODE
@NODE Op_ICONIFIED "ICONIFIED Option"
@TOC OpenPath
If given, ViNCEd will open the new gadget already in iconified state, i.e.
as an icon on the workbench. All printing will go into the internal buffers
until the icon is double-clicked and hence opened.


There is a tiny problem with this icon, namely that ViNCEd won't be able to
adjust the size of the "virtual window" to the real screen size (simply
because there is no real window), it will try to "guess" how big the window
should be. A program that asks for the window size - this can be done by
sending @{"CSI sequences" link CsiEsc} - will therefore receive the size
of the window ViNCEd *thinks* it will get when it is opened. It's usually
quite good at guessing, though, and that's not a real problem either.

@ENDNODE
@NODE Op_ANSI "ANSI Argument"
@TOC OpenPath
If this argument is present, ViNCEd will use the standard ANSI colors for
the text pens in the window instead of simply mapping the text colors
directly to pen numbers. A detailed description of the ANSI colors can be
found in a @{"separate section" link ANSIColors}.


You may also choose to use the ANSI coloring by default - check for this the
@{"third edit page" link SETVNC_EDIT_3} of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Op_NOANSI "NOANSI Argument"
@TOC OpenPath
If NOANSI is present in the window path, ViNCEd will assign the text colors
directly to pen numbers, as it always was for the CON: windows. For details
about what ANSI colors are, check the
@{"ANSI colors" link ANSIColors} section of this guide.


A flag of the @{"SetVNC" link SetVNCToc} program on the
@{"third window page" link SETVNC_EDIT_3} controls the default of this flag,
i.e. whether @{"ANSI" link Op_ANSI} or NOANSI is the implicit default.

@ENDNODE
@NODE Op_WINDOW "WINDOW Argument"
@TOC OpenPath
This argument is similar to the @{"ConMan W" link Op_Wuserwindow} argument
and allows to attach a ViNCEd handler to an already existing intuition
window. The argument takes an additional parameter, the address of the
intuition window structure as a hexadecimal number, optionally with a
leading '$' or '0x'. Decimal numbers with a leading '#' to indicate the base
are welcome, too. The window will be closed as soon as ViNCEd is closed. If
you want the window to stay open, then specify @{"KEEP" link Op_KEEP} as
well. ViNCEd will be "more friendly" to this guest window in this case.


@{B}BE WARNED!@{UB} This option is definitely for the "professional power
user" and should not be played with.

@ENDNODE
@NODE Op_FONT "FONT Argument"
@TOC OpenPath
This argument takes an additional parameter, namely the name of the font and
its size ViNCEd shall use for the text in the window. The argument is the
base name of the font, a dot, NO trailing "font", but instead the size of
the font to be used as a decimal number.


For example, to use the "topaz.font", size 9, use an argument like this:


FONTtopaz.9


Similarly, FONTcourier.13 will use the "courier.font", size 13.


@{B}NOTE@{UB}: This will ONLY set the font for the text within the window.
ViNCEd will use the font of the screen it appears in for its menus and the
title bar. If you open ViNCEd on its own screen, use
@{"SFONT" link Op_SFONT} to set this additional font.


@{B}Another NOTE@{UB}: DO NOT use proportional fonts. They will produce
certain graphic artifacts on the window.


@{B}A third note@{UB}: By an unfortune error, the popular XEN font, size 8,
is a proportional font. Please use the fixed "XEN" font in this archive
instead.


@ENDNODE
@NODE Op_KEEP "KEEP Argument"
@TOC OpenPath
This argument is only relevant if a ViNCEd handler was installed into an
already existing window with the @{"WINDOW" link Op_WINDOW} or the
@{"ConMan W" link Op_Wuserwindow} argument. Hence, this is somewhat for the
professional user.


If KEEP is present, ViNCEd will be somewhat nicer to the user window. It
will not try to close the window - the user program has to do that - and
will not try to resize it. This is mainly useful if you want to run ViNCEd
in a part of your own window your application created.

@ENDNODE
@NODE Op_SCREEN "SCREEN Argument"
@TOC OpenPath
This argument tells ViNCEd that it should open its window on a given public
screen; the name of the public screen - not the title! - must follow as
parameter to the SCREEN argument. For example, to open a window on the
public screen named "GOLDED.1", use the argument


SCREENGOLDED.1


If the screen name contains any slashes "/", these must be escaped by a
backslash \\, or the whole string must be included in double quotes;
if white spaces are included in the name of the public screen, it should
be quoted with double quotes, too - as in


SCREEN"My Slash/Screen"


Since the standard amiga shell parses this string, too, the double quotes
must be escaped as well as part of a shell command. The result may look very
ugly, as this example shows:


1.SYS:> newshell WINDOW="VNC:////My window/SCREEN*"My Slash/Screen*""


It uses the "*" as (BCPL) escape character for the first string. Urgh.


Hint: The name of the screen in this example is


My Slash/Screen.


If the screen of the given public name does not exist, or is not public, it
depends on a possible @{"NOFALLBACK" link Op_NOFALLBACK} option what
happens. If this option is given, ViNCEd will just fail and refuse to open
any window. If the option is NOT given, or a
@{"FALLBACK" link Op_FALLBACK} is present, ViNCEd will open the window on
the default public screen instead.


The SCREEN argument serves another purpose if other options, as
@{"MONITORID" link Op_MONITORID} or
@{"SDEPTH" link Op_SDEPTH} indicate that ViNCEd shall open its window on its
own screen. If this is the case, ViNCEd will first try to open its window on
a public screen of the given name, and if this fails, will open its own
public screen under the same name, with the given options, and open a
window on its own screen.


Hence, this will put a ViNCEd custom screen into a ViNCEd public screen if
the name does not conflict with another screen.

@ENDNODE
@NODE Op_ALT "ALT Argument"
@TOC OpenPath
The ALT argument takes four numbers as parameters, separated by slashes.
They specify the "alternate" window position which is used if you press the
"zoom" gadget.


The arguments are, to be more precise, the "left edge" and "top edge" of the
window, given as distances in pixels from the left and top edge of the
screen the window appears on, and the "width" and "height" of the window in
pixels - in this order.


@ENDNODE
@NODE Op_STITLE "STITLE Argument"
@TOC OpenPath
The STITLE option takes one parameter, a string. This string is printed in
the screen title as long as the ViNCEd window is active. Except that, it
follows the same syntax rules as the standard
@{"window title" link Title} argument.

@ENDNODE
@NODE Op_SDEPTH "SDEPTH Argument"
@TOC OpenPath
If this option is present, two things happen:

First, ViNCEd is told to open on its own screen. Second, the depth of the
screen will be set to the parameter of this argument. That is,


SDEPTH4


will open ViNCEd on a custom screen which makes 2^4 = 16 colors available.


@{B}NOTE@{UB}: To make this screen a public screen, use the
@{"SCREEN" link Op_SCREEN} argument to provide a name for the public screen.


Other options that make ViNCEd open on its own screen are
@{"SFONT" link Op_SFONT}, @{"MONITOR" link Op_MONITOR},
@{"MONITORID" link Op_MONITORID}, @{"TITLEBAR" link Op_TITLEBAR} and
@{"NOTITLEBAR" link Op_NOTITLEBAR}.

@ENDNODE
@NODE Op_SFONT "SFONT Argument"
@TOC OpenPath
If this argument is present, two things happen:

First, ViNCEd opens its window on its own custom screen. Second, the font
for the menus, the title bar and the screen title will be set to the font
given as parameter to this argument.


The font must be given by its base name, a dot, NO "font" extender and the
size of the font as decimal number; i.e. an argument like


FONTtopaz.11/SFONTruby.15


will open ViNCEd on its own screen, will use the "topaz.font" size 11 for
the text in the window and the "ruby.font", size 15 for the menus and the
title bars.


If NO additional @{"FONT" link Op_FONT} argument is present, the SFONT will
be used for the window contents as well, but in this case only a fixed width
font should be used or ViNCEd will create graphic artifacts. If a FONT is
given as well, every font is acceptable as SFONT, even proportional fonts.


If you want this custom screen to become a public screen, provide a public
screen name with the @{"SCREEN" link Op_SCREEN} argument.


Other options that make ViNCEd open on its own screen are
@{"SDEPTH" link Op_SDEPTH}, @{"MONITOR" link Op_MONITOR},
@{"MONITORID" link Op_MONITORID}, @{"TITLEBAR" link Op_TITLEBAR} and
@{"NOTITLEBAR" link Op_NOTITLEBAR}.


@ENDNODE
@NODE Op_NOTITLEBAR "NOTITLEBAR Argument"
@TOC OpenPath
If this argument is present, two things happen:


First, ViNCEd opens its window on its private custom screen, second, the
title bar of this screen will be shown in behind any backdrop windows. Since
ViNCEd will usually NOT use a backdrop window itself, this won't change too
much anyways and makes only sense together with the
@{"BACKDROP" link Op_BACKDROP} option.


To make this screen a public screen instead of a custom screen, provide the
desired public screen name as parameter to the
@{"SCREEN" link Op_SCREEN} argument.


Other options that make ViNCEd open on its own screen are
@{"SFONT" link Op_SFONT}, @{"SDEPTH" link Op_SDEPTH},
@{"MONITOR" link Op_MONITOR},
@{"MONITORID" link Op_MONITORID} and
@{"TITLEBAR" link Op_TITLEBAR}.

@ENDNODE
@NODE Op_TITLEBAR "TITLEBAR Argument"
@TOC OpenPath
If this argument is present, two things happen:


First, ViNCEd opens its window on its private custom screen, second, the
title bar of this screen will be shown in front of any backdrop windows. Since
ViNCEd will usually NOT use a backdrop window itself, and even more, this
is the default for screens anyhow, this won't change nothing except putting
ViNCEd on its own screen. This argument is simply here for symmetry.

More about what a backdrop window is can be found in the section discussing
the @{"BACKDROP" link Op_BACKDROP} option.


To make this screen a public screen instead of a custom screen, provide the
desired public screen name as parameter to the
@{"SCREEN" link Op_SCREEN} argument.


Other options that make ViNCEd open on its own screen are
@{"SFONT" link Op_SFONT}, @{"SDEPTH" link Op_SDEPTH},
@{"MONITOR" link Op_MONITOR},
@{"MONITORID" link Op_MONITORID} and
@{"NOTITLEBAR" link Op_NOTITLEBAR}.

@ENDNODE
@NODE Op_MONITORID "MONITORID Argument"
@TOC OpenPath
If this argument is present, ViNCEd is opened on its own custom screen whose
"view mode" = "monitor id" is taken from the hex number following the
argument. A leading '$' or '0x' is permitted here to indicate hex notation
explicitly.

Hence, the argument


MONITORID0x19000


will use a NTSC Hi-Res screen.


Useful monitor IDs can be found in the system documentation - it depends on
your hardware which IDs are available.


The default monitor ID can be setup with the
@{"SetVNC" link SetVNCToc} preference editor, on the
@{"first window page" link SETVNC_WINDOW_1}.


To make this screen a public screen instead of a custom screen, provide the
desired public screen name as parameter to the
@{"SCREEN" link Op_SCREEN} argument.


Other options that make ViNCEd open on its own screen are
@{"SFONT" link Op_SFONT}, @{"SDEPTH" link Op_SDEPTH},
@{"MONITOR" link Op_MONITOR},
@{"TITLEBAR" link Op_TITLEBAR} and
@{"NOTITLEBAR" link Op_NOTITLEBAR}.

@ENDNODE
@NODE Op_MONITOR "MONITOR Argument"
@TOC OpenPath
If this argument is present, ViNCEd is opened on its own custom screen whose
"view mode" = "monitor id" is taken from the name of the monitor following
the argument.

Hence, the argument


MONITORNTSC:High Res


will use a NTSC Hi-Res screen, at least for the english language as system
selected language.


Useful monitor IDs can be found for example by browsing the monitor data
base with the system preferences editor "ScreenMode".


@{B}NOTE@{UB}: Except for private use, I @{B}RECOMMEND NOT TO USE@{UB} this
argument. The point is that the monitor names, unlike the monitor IDs,
differ from localization to localization. A program written for the english
language will, hence, not work for german users and vice versa. Keep care
and try the @{"MONITORID" link Op_MONITORID} option whenever possible.


The default monitor ID can be setup with the
@{"SetVNC" link SetVNCToc} preference editor, on the
@{"first window page" link SETVNC_WINDOW_1}.


To make this screen a public screen instead of a custom screen, provide the
desired public screen name as parameter to the
@{"SCREEN" link Op_SCREEN} argument.


Other options that make ViNCEd open on its own screen are
@{"SFONT" link Op_SFONT}, @{"SDEPTH" link Op_SDEPTH},
@{"MONITORID" link Op_MONITORID}, @{"TITLEBAR" link Op_TITLEBAR} and
@{"NOTITLEBAR" link Op_NOTITLEBAR}.

@ENDNODE
@NODE Op_PLAIN "PLAIN Argument"
@TOC OpenPath
"Degrades" a ViNCEd window back to a console-like window. All ViNCEd
specific extensions in the window frame will be disabled, namely the
scrollers, the arrows, the buttons and the iconfication gadget. The
@{"shell mode" link ShellMode} will be turned off, too.


It does not, though, disable the CLOSE gadget or its preferences.

@ENDNODE
@NODE Op_PREFS "PREFS Argument"
@TOC OpenPath
This argument provides a different source for the window settings than the
system global preferences database. If this argument is used, ViNCEd will
read its preferences file - to be written with the
@{"SetVNC" link SetVNCToc} program and its "SAVE" option - from the file
name given as parameter to this option.


Since the path name of this file may contain slashes - which are interpreted
as argument separator, these slashes must be escaped by a backslash in
front of them. For example, to read the preferences from
"SYS:Devpac/ViNCEd.macros", use the following argument:


PREFSSYS:Devpac\\/ViNCEd.macros


Things may get even worse if this is used as an argument to a shell command,
e.g. for "NewShell". Another level of "escaping" might be necessary,
possibly leading to rather absurd constructions. Keep care!


@ENDNODE
@NODE Op_conmanoptions "ConMan style single character options"
@TOC OpenPath
The following options are single character options provided mainly for
backwards compatibility with the "ConMan" console handler. These options
should go as the last options on the window path (but may go, unfortunately,
anywhere in the path, even though I don't like this...). Interestingly, some
official ARexx commands use them. All of these arguments are "toggle
switches", which means that giving them twice is as good as giving them not
at all. All these characters can be combined into a single string - provided
this string does not conflict with any other option as total.


However, I would still not recommend these options. They are mainly provided
for compatibility to ARexx and ConMan.



@{CODE}
Z               Use a "GimmeZeroZero" window. The coordinate origin for
                drawing in this window is really in the upper left edge
                of the window contents and not in the upper left edge of
                the window border. However, ViNCEd doesn't care about these
                offsets anyways. This makes only sense if you plan to draw
                in this window.
                Since this makes re-arrangement of the window slower, this
                option should be avoided.

B               Use a "BACKDROP" window. Check the @{"BACKDROP" link Op_BACKDROP}
                option for details.

N               Use a "BORDERLESS" window. Again, details are in the section
                discussing the @{"NOBORDER" link Op_NOBORDER} argument.

R               Toggle between @{"SIMPLE" link Op_SIMPLE} and @{"SMART" link Op_SMART} windows, the default is
                SIMPLE. Details are found by following the links.

D               Toggles the depth arrangement @{"gadget" link Gadgets} on or off.
                Details are again in the section about the @{"NODEPTH" link Op_NODEPTH} option.

M               Toggles the window drag bar on or off. Details again under
                the recommended @{"NODRAG" link Op_NODRAG} argument.

S               Toggles the @{"sizing gadget" link Gadgets} on or off. Details again
                found in the @{"NOSIZE" link Gadgets} section.

C               Toggles the @{"close gadget" link Gadgets} on or off. Again, check the
                @{"CLOSE" link Op_CLOSE} and @{"NOCLOSE" link Op_NOCLOSE} arguments.

A               Toggles whether the window should be activated when it is
                opened. The default is activation. You should use the newer
                @{"INACTIVE" link Op_INACTIVE} argument instead.

L               A ViNCEd special leftover from releases 1.xx. Toggles the
                "Luxury switch" on and off. Defaults to on. If off, the
                window does not get a menu and no custom gadgets, the
                "Dos Cursor Mode" will be activated. Highly obsolete
                and likely to be removed.

O               Toggles the menu on or off. Default is on for windows using
                the @{"Shell mode" link ShellMode}, off otherwise.
                @{"MENU" link Op_MENU} and @{"NOMENU" link Op_NOMENU} are recommended replacements.

X               Toggles the horizontal scroller on and off. Equivalent to
                @{"NOPROPX" link Op_NOPROPX} resp. @{"PROPX" link Op_PROPX}.

Y               Toggles the vertical scroller on and off. Equivalent to
                @{"NOPROPY" link Op_NOPROPY} resp. @{"PROPY" link Op_PROPY}.

G               Toggles the @{"buttons" link Macros} in the title bar on and off.
                Equivalent to @{"BUTTONS" link Op_BUTTONS} resp. @{"NOBUTTONS" link Op_NOBUTTONS}.

@ENDNODE
@NODE Title "The Window Title"
@TOC UserToc
The window title argument of the ViNCEd @{"window path" link OpenPath}, and
the related @{"STITLE" link Op_STITLE} argument are, of course, in first
place standard strings. However, this string may contain special control
sequences that are expanded as part of the string. You may be able, for
example, to display the size of the window, the name of the current
directory or the number of the Shell in the window or the screen title. The
following list presents all characters that have a special meaning in this
string:

@{CODE}
"       Double quotes should be used to escape leading or trailing blank
        spaces. While this is not strictly required, it is recommended.
        It also "brackets" all single forward slashes between the two
        double quotes, i.e. they are not seen as separators of
        arguments in the @{"window path" link OpenPath}.
        However, read below for special caveats if the title has to be
        given as an argument to the AmigaShell.

\\       The backslash escapes special characters and interprets them
        literally.

\\"      The literal double quote, i.e. the double quote as a character,
        not as a function.

\\/      The literal forward slash. If this character should appear in
        the window title, it MUST be escaped because it's usually read
        as the argument separator in the @{"window path" link OpenPath}.

%       The command sequence introducer. This character takes a single
        character as argument. If this sequence is detected, the percent
        sign and the character is replaced by something else, see below
        for the list.

%%      The percent sign itself.
@{BODY}



And now for the list of the available string substitutions with the percent
sign. Two types of replacement strings are available. The first type works
always, for all ViNCEd windows. The second type requires a shell running in
this window and will, therefore require the @{"Shell mode" link ShellMode}.
Further more, these strings are only expanded when the shell is presenting
its prompt and is waiting for your input. It would be simply too dangerous
to read the shell internal strings at a different time, they may get changed
just in the moment when ViNCEd is trying to read them and this won't do
good.


Here's now the first list of "harmless" sequences:

@{CODE}
%X or %x        The width of the window, in characters.

%Y or %y        The height of the window, in characters.

%P              The name of the public screen this window was opened on,
                or the title of the screen if the screen is non-public.

%p              The name of the public screen if the screen is public,
                or the string "Default PubScreen" for the default
                public screen or "Private Screen" for a custom,
                private screen.

%T              The default title of the screen.

%t              The screen title of the screen.

%L or %l        The current state of the "NumLock" qualifier. If set,
                "NumL" gets printed, four spaces if reset.

%O or %o        The state of the "Overwrite" qualifier. If overwriting
                is enabled, "Ovwr" is inserted.

%V or %v        The current ViNCEd version identifier.


%W              The complete window title. This is a useful choice for
                the screen title only as it copies the window title
                over to the screen title.

%w              The window title ViNCEd prepared for you. This differs
                from %W in case some other program hacked the window
                title itself, %W would be the title set by the external
                program, whereas %w is the title ViNCEd would have
                selected otherwise.

@{BODY}

In almost all cases, %T is identical to %t. At least, I haven't seen
a counter example yet.


The next strings expand only in the @{"Shell mode" link ShellMode}, and only
if the shell is printing its prompt on the command line and waiting for
inputs.


@{CODE}
%N or %n        The CLI number of the shell running in the window.

%S or %s        The current directory of the active shell.

%R or %r        The result code of the last command.

%E or %e        The secondary result code (the error code) of the last
                command used.

%F              A text version of the secondary result code of the last
                command. If the last command returned successful and the
                error code is zero, %F will expand to "no error".

%f              Similar to %F except that it expands into the empty string
                in case the last command did not return an error.
@{BODY}

Finally, a remark about using these sequences from the shell. The AmigaShell
parses all strings again, in a first step. The parsed string is then sent to
ViNCEd, which parses it a second time. That means for you that you have to
escape certain control sequences twice, once for the shell and at a second
level for ViNCEd. The result might look rather complicated and more like a
random line noise than anything useful. For example, the following command



1.SYS:> NEWSHELL "VNC:////*"This is / a \\*"test\\*" \\\\.*""


results in a window with the title


This is / a "test" \\


This is because you've to escape all double quotes with the BCPL escape
character, the "*", again for the shell. All single forward quotes in the
title are enclosed in a pair of double quotes, which are again escaped for
the shell with an asterisk. That is, the forward quote in the string stands
for itself. The double quotes around the word "test" must be escaped twice
because, for first, the shell should regard them as literal characters -
that is again what the star is used for - and ViNCEd should read them as
literal double quotes, too. That is what the backslash is used for.

Confused? I bet you are...


And finally, I had to type this in an AmigaGuide document which means
that the string gets actually parsed THREE TIMES, so I had to escape all
backslashes with another backslash in this manual.... that is, what's
actually printed there in this manual is


1.SYS:> NEWSHELL "VNC:////*"This is / a \\\\*"test\\\\*" \\\\\\\\.*""


where I had to put extra backspaces to make it visible for you right now
and.....


***Break

1.Python, Monty:> STOP IT! THAT'S GETTING SILLY.


And, ooops, if you see too many backslashes here you're either using an old
version of the AmigaGuide instead of MultiView, or it's time to visit your
eye doctor... (-;


***Break

1.Python, Monty:> OUT! ALL OF YOU! OUT! NO MORE BACKSLASHES! OUT!


@ENDNODE

@REMARK The Shell Mode, and subtopics
@NODE ShellMode "The Shell Mode"
@TOC UserToc
The power of ViNCEd is the "Shell Mode"; without it, ViNCEd will behave
"just as a console handler with a full screen buffer". If it is enabled,
however, ViNCEd will provide additional functions which are especially
useful for a shell running in a ViNCEd window, as there are the
@{"TAB Expansion" link TabExpand}, the @{"icon drop" link IconDrop} function,
the @{"Ctrl-Z" link CtrlZ} function and others. All of them are useful
extensions the ordinary "Amiga Shell" does, unfortunately, not provide and
hence have been implemented in the console handler instead. Weird....


To enable these features, you've to tell ViNCEd explicitly that a shell is
running in its window, so to allow it to extract the information it needs
for these functions. To do so, you must provide the
@{"SHELL" link Op_SHELL} argument in the @{"window path" link OpenPath}.


If you're using ViNCEd explicitly as console handler for the shell, you
might enable this flag by default, hence, make this argument superfluous.
This is done by the @{"preferences editor" link SetVNCToc}, on the
@{"first shell page" link SETVNC_SHELL_1}.


However, please note that there is a special danger to use the shell mode in
a window no shell is running in. Nothing bad *should happen* as I
implemented certain security precautions, but who knows? This flag should be
turned on only and only if you can make sure that ViNCEd isn't used for
anything but the shell.


Note, however, that the shell interface was extended in Os 3.2, and ViNCEd
fully complies to this new interface. With the v47 shell present, the shell
will perform TAB expansion itself, bypassing ViNCEd. You can enforce to
bypass the extended Shell mechanisms by the following command:

@{CODE}
set simpleshell on
@{BODY}

The ViNCEd built-in TAB expansion is about to be phased out, though.





More about the shell mode is in these sections:


        @{"Icon drop in the Shell mode                                      " link IconDrop }

        @{"TAB expansion in the Shell mode                                  " link TabExpand }

        @{"All TAB expansion settings at once                               " link Tab_Settings }

        @{"The magic Ctrl Z key in the Shell mode                           " link CtrlZ }

        @{"The Shell mode and Os 3.2                                        " link Shell32 }

@ENDNODE

@NODE Shell32 "The Shell mode and Os 3.2"

The shell of AmigaOs 3.2 has been extended significantly, and as part of its
extended features, the Shell learned to expand paths and file names itself.
The TAB expansion of the Shell is much closer tied to the shell syntax and
understands backticks, variables and all the technicalities of the
sophisticated syntax. If run under Os 3.2, ViNCEd automatically leaves TAB
expansion to the shell, bypassing the ViNCEd mechanism.


The shell uses the @{"medium mode" link ConsoleModes} of ViNCEd to hear
about TAB expansion requests, and then performs the expansion itself, using
the same mechanism the 3.2 CON:-Handler supports. This means, however, that
there is no TAB-Requester because the shell has no idea about windows,
gadgets and requesters.


In case you want the ViNCEd mechanism back, the shell can be instructed not
to use the new console modes by setting the following shell variable:

@{CODE}
set simpleshell on
@{BODY}


This command should be put into S:Shell-Startup to make the change
permanent. Note, however, that the ViNCEd TAB expansion is about to be
phased out in a future release of ViNCEd as the shell knows its syntax
better than ViNCEd possibly could.

@ENDNODE
@NODE IconDrop "Icon drop in the Shell mode"
@TOC ShellMode
If the @{"Shell mode" link ShellMode} is enabled, you may drag icons from
the Workbench screen into the ViNCEd window. ViNCEd will, in this case,
insert the file name, the complete path or the directory name of the icon
dropped. This is mainly useful if you need to locate a file deep down in the
directory tree, which is already available on the workbench. ViNCEd will
type that file name for you, even including double quotes if the file name
contains blank spaces.


If you want ViNCEd to insert something different than the file name, hold
special keys from the keyboard while dragging the icon; the default
"qualifiers" selected for you are as follows:


@{CODE}
no qualifier            :       insert the complete path of the icon

Either @{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} key          :       insert only the file name of the icon

Either @{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} key        :       insert only the directory of the icon dropped
@{BODY}


However, you may select these "qualifiers" yourself as well if the defaults
don't please you. This works, once again, with the
@{"SetVNC" link SetVNCToc} preferences editor, on the
@{"sixth Shell page" link SETVNC_SHELL_6}.


@ENDNODE
@NODE TabExpand "TAB expansion in the Shell mode"
@TOC ShellMode
TAB expansion is a feature offered by most Unix shells. It is a very
convenient feature that avoids typing long and complicated file names;
instead, you just provide a @{"template" link Template} of the file name and
ask ViNCEd for possible "candidates", or "expansions" how they will be
called in what follows. Because this feature is particularly useful for
the shell, TAB expansion is only available in the
@{"Shell mode" link ShellMode}.


The next lines present a tutorial you should work thru if you're not
familiar with ViNCEd's capabilities. (Really, I mean it!)

In case you're just looking for the complete set of configurable settings,
they are @{"elsewhere" link Tab_Settings}.


ViNCEd offers six configurable TAB expansion
@{"keyboard functions" link KeyFunction}, each of them as "forwards" and
"backwards" moving function - it will become clear in a minute what this
means. Each of these functions can be @{"bound" link KeyBind} to a keyboard
combination of your choice, and can be configured individually as well.


The default configuration - and that is what is going to be discussed here
as an example - uses the
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} key for
"forwards" and the
@{FG Background}@{BG Text}Shift Ctrl TAB@{FG Text}@{BG Background} key for
"backwards" expansion. Additional keyboard bindings exist to the other
functions, but they work in a similar manner. Use the
@{"SetVNC keyboard pages" link SETVNC_KEYBOARD_1} adjust the key bindings if
these defaults do not please you.


What happens now if you press
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background}?


In short words, ViNCEd reads the shell argument under the cursor, treads it
as an incomplete file name and searches for possible expansions, in
locations setup by @{"your configuration" link SETVNC_SHELL_5} explicitly;
these include the current directory, the directories in the shell "command
path", the "C:" assignment, the list of devices and the list of resident
commands.

Which of these sources is searched depends on a set of priorities
you @{"assigned" link SETVNC_SHELL_5} to them, and on explicit "hints"
ViNCEd takes from the argument to be expanded. As for example, if the
argument ends with a colon ":", only the device list will be searched,
regardless of the priorities.


The found matches are sorted by the priority you assigned to the different
file types. Found expansions are then inserted into the argument again,
possibly showing a file requester. Once an expansion is complete, you may
use the TAB expansion key again to traverse the list of found matches. The
"forwards" function moves in this list in the one, the corresponding
"backwards" function in the opposite direction, showing the completions one
after another.


Since quite a lot of settings involve the procedure of the TAB expansion and
giving the @{"complete list of settings" link Tab_Settings} involved might be
more confusing than helping, I'd like to present this in the form of a
tutorial. As soon as more details are required, follow the links. This
tutorial assumes that you're working with the default settings, in a ViNCEd
window with the @{"Shell mode" link ShellMode} enabled.


Go to the root level of your hard disk and enter the following line in the
shell, (without the prompt, obviously...)

@{CODE}
1.SYS:> rex@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}

The colored box in this line represents the cursor. Press now the TAB
expansion key @{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background}.


The line above tells ViNCEd to search for
@{"commands" link Tab_WhyCommands} that
@{"start with rex" link Tab_Template}. ViNCEd will search therefore the
current directory, the C: assignment and the complete shell path, i.e. the
directories which are printed by the "Path" command. This can be
@{"changed" link Tab_ChangeCmdDir}, of course.


On my system, this @{"template" link Template} will match the "Rexx"
@{"directory" link Tab_ExcludeDirs} on the root level of my hard disk, the
"RexxMast" program in the "Systems" folder which is in the
@{"command search path" link Tab_ChangeCmdDir}, the "REXX:"
@{"assignment" link Tab_ExcludeAssigns}, and the
@{"icon file" link Tab_ExcludeIcons} "rexx.info".


More details on how to adjust what should match and what not can be found
by following the links above, they will explain how to exclude certain
matches.


To continue with the example, ViNCEd will answer with the following line:


@{CODE}
1.SYS:> Rexx@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


The @{"template" link Template} has been @{"refined" link Refinement} to
"Rexx", but the cursor is placed directly behind the "x", without an
additional blank space, allowing you to continue typing. This means the
following:


- ViNCEd found some matches. It would have flashed the screen if it would
not.


- All the matches start with the letters "Rexx". That is why ViNCEd was able
to present a @{"refinement" link Refinement}. If you don't want a
refinement in that case, you may
@{"turn that feature off" link Tab_NoRefinement} and ask ViNCEd to insert
the first possible match instead.


- However, ViNCEd was not able to find a unique extension, i.e. there is
more than one file that matches the @{"template" link Template}. This is
indicated by placing the cursor directly behind the "x". If a literal "Rexx"
would have been the only possible match, a blank space would have been
inserted. @{"*" link Tab_NotForDirs} Additionally, you may
@{"ask ViNCEd to show a requester" link Tab_AmbigReq} in the case more
than one match, i.e. no unique match was found.



Now wait for a second or two, and press
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} again. ViNCEd
will present now the first match in its full form, the Rexx directory:


@{CODE}
1.SYS:> Rexx/@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


Since this is a directory, a forwards slash "/" instead of a blank space is
inserted behind the name.

You've just seen another purpose of the TAB expansion functions: As soon as
a list of all matches has been constructed, these functions are used to view
this list "item by item". As for the @{"command history" link History}, you
may move in this list in two directions - and that is why all TAB expansion
functions come in two kinds: Both kinds use the same settings, but as soon
as the list of matches is constructed, one function moves in "forwards"
direction whereas the other moves in backwards direction. For the default
settings, the forwards-moving function is @{"bound" link KeyBind} to the
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} key you've just
used, its backwards moving counterpart is
@{FG Background}@{BG Text}Ctrl Shift TAB@{FG Text}@{BG Background}.


The items on this list are sorted by a "priority" you assign to possible
candidates. It's the purpose of the @{"SetVNC" link SetVNCToc} program to
setup these priorities - they can be found on the
@{"fifth shell page" link SETVNC_SHELL_5}, one set of priorities for each
pair of the six assignable TAB expansion functions.


Pressing now
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} again shows the
next match:


@{CODE}
1.SYS:> Rexx.info @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


It is this time the icon file "Rexx.info". Since this is a file anyhow, a
space is behind it, as show above.

If you don't want to see these files, you may
@{"exclude them explicitly" link Tab_ExcludeIcons}, or may at least lower
their priority - they will appear then at a later time behind more important
files.


The next match - press
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} again - is:


@{CODE}
1.SYS:> RexxMast @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


...the RexxMast program. This program is usually not located at the root
level of the system disk, but in the "System" directory. The reason why it
was found anyhow is that you expanded the first argument on the shell line.
ViNCEd noticed that and considered that you may look for a command. Since
the Shell looks for commands in the current directory, the C: assign and the
"command path", so does ViNCEd. The "System" directory is in most
installations part of the "path".


If you don't want ViNCEd to search the complete path, you may simply adjust
some priorities of the @{"configuration" link Tab_ChangeCmdDir}.


Let's check the next match - press
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} again:


@{CODE}
1.SYS:> REXX:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


It's this time the REXX: assign. If you don't want to see assignments:
Nothing as simple as this, the answer is again:
@{"Adjust the priorities." link Tab_ExcludeAssigns}


By the way: Didn't you wonder why "RexxMast.info" wasn't found? ViNCEd
notices that this file CAN'T be a command, and hence you're surely not
looking for non-commands in the command search path. The reason why
"Rexx.info" @{B}WAS@{UB} found, but "RexxMast.info" not is, that the first
file is in the current directory - might be of some interest - whereas the
second is not. In the same spirit as icon files never match outside of the
current directory, neither do directories.


Now let's continue - press again
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background}.


@{CODE}
1.SYS:> REXX:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


...and just a flashing display. That's the end of the list, no more matches
have been found. Things behave a little different if the
@{"Wrap Around Buffer" link SettingsMenu} in the settings menu was turned
on. In this case, ViNCEd will insert a blank line - to indicate that the
end of the buffer was reached. The next
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} will re-insert
the first match of the list.


We can now go backwards from the end of the list to the beginning with the
twin "backwards" function - which is in the default configuration the
@{FG Background}@{BG Text}Ctrl Shift TAB@{FG Text}@{BG Background} key.
You'll see


@{CODE}
1.SYS:> RexxMast @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}


the "RexxMast" program again.


Use now the backspace key to erase the expansion up to the "Rex" we started
with. This will also abort the expansion, as well as any other key except
the TAB expansion @{"functions" link KeyFunction}. Press now
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} again to re-run
the expansion. As soon as the @{"refined" link Refinement} template shows
up, press
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} again. This
will now show a requester with all the matches found, even @{B}including the
assigns and the commands not in the current directory@{UB}. This is due to
some "ViNCEd magic" you may @{"explicitly turn off" link Tab_NoVNCReq}.
However, dependent on the requester package you're using - asl or reqtools -
you may or may not see any icons, i.e. ".info" files because they are
possibly @{"filtered out" link ReqFilters}.


If you now pick an entry from this requester and click "O.K." in the
requester, this entry will be inserted in the ViNCEd window for you. Using
this requester, you may even enter the found directories or assigns and
select a file from there.


However, if you don't like this "double TAB requester" or it's "in the way",
you're of course free to @{"turn it off" link Tab_NoDoubleTab}.

By the way - the time delay ViNCEd allows to occur between the two TABs to
happen within is defined on the @{"Timing page" link SETVNC_TIMING_1} of
SetVNC.

Additionally, you may also ask ViNCEd to preset this requester always after
the second TAB, no matter how much time passed between the first TAB and the
second. This is done by setting the
@{"Double TAB time interval" link SETVNC_TIMING_1} to zero.




Just a last note: Since there are actually SIX tab expansion functions, each
of them in two kinds - forwards and a backwards function - and each of these
functions can be @{"bound" link KeyBind} to a keyboard key of your choice
and configured individually, there's I hope a configuration that everyone
pleases and a TAB expansion for every situation...


A @{"complete overview" link Tab_Settings} of all the TAB expansion settings
is available too.


@ENDNODE
@NODE Tab_Settings "All TAB expansion settings at once"
@TOC TabExpand
Most of the TAB expansion settings are under control of the
@{"third" link SETVNC_SHELL_3}, @{"fourth" link SETVNC_SHELL_4}
and @{"fifth" link SETVNC_SHELL_5} shell
page of the @{"SetVNC program" link SetVNCToc}. However, which key is
@{"bound" link KeyBind} to which of the six
@{"keyboard functions" link KeyFunction} that run a TAB expansion is part of
the keyboard configuration - setup with the
@{"first and second keyboard page" link SETVNC_KEYBOARD_1}. Some minor
options are under control of other flags.


Here the list of available TAB expansion functions on the
@{"second keyboard page" link SETVNC_KEYBOARD_2} - as you see each function
comes in two kinds - both use the same settings, but move in opposite
directions within the list of found matches.


@{CODE}

@{"Expand Path" link Kf_Expand_Path}             :       First function, forwards
@{"Expand Backwards" link Kf_Expand_Backwards}        :       ditto, but backwards
@{"Expand Short" link Kf_Expand_Short}            :       Second function, forwards
@{"Expand Short Bkwds" link Kf_Expand_Short_Bkwds}      :       ditto, but backwards
@{"Expand Devices" link Kf_Expand_Devices}          :       Third function, forwards
@{"Expand Devs Bkwds" link Kf_Expand_Devs_Bkwds}       :       ditto, but backwards
@{"Expand Dirs" link Kf_Expand_Dirs}             :       Fourth function, forwards
@{"Expand Dirs Bkwds" link Kf_Expand_Dirs_Bkwds}       :       ditto, but backwards
@{"Expand Icons" link Kf_Expand_Icons}            :       Fifth function, forwards
@{"Expand Icons Bkwds" link Kf_Expand_Icons_Bkwds}      :       ditto, but backwards
@{"Expand Alt" link Kf_Expand_Alt}              :       Sixth function, forwards
@{"Expand Alt Bkwds" link Kf_Expand_Alt_Bkwds}        :       ditto, but backwards

@{BODY}

The names of the functions are completely arbitrary - you can configure them
as you like.


For each of the pairs above, one set of options and priorities is available
at the @{"shell pages" link SETVNC_SHELL_5}. The name of the pair currently
edited by these pages is printed directly below the headline, and can be
selected by the "« Prev" and "Next »" gadgets near the function name.


Here's the list of available options on the
@{"third shell page" link SETVNC_SHELL_3}:
@{CODE}

@{"Double TAB Requester" link EXPAND_DOUBLEREQ}
@{"First TAB Expands fully" link EXPAND_FULLEXPAND}
@{"Requester if expansion is ambiguous" link EXPAND_AMBIGREQ}
@{"Add ViNCEd matches to the requester" link EXPAND_VNCREQUESTER}

@{BODY}
More related options are on the
@{"fourth shell page" link SETVNC_SHELL_4}:
@{CODE}

@{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
@{"List expansions on the console" link EXPAND_INTOCONSOLE}

@{BODY}
Additionally, the double TAB time interval, i.e. the maximal allowable time
interval between two TAB presses to pop up the double TAB requester is
found on the @{"Timing page" link SETVNC_TIMING_1} of SetVNC. As a special
case, if this time interval is set to zero, the requester will always pop up
after the second TAB.


ViNCEd assigns a priority to each match of the TAB expansion and sorts the
list of found matches by priority. The entries of higher priority are then
shown earlier, on top of the list; hence, you need less keyboard presses to
reach them. Objects with a priority of -128 or below aren't added to the
list at all and will be dropped. That means that you may disable certain
object classes completely by assigning them a priority of -128.


The priority settings are on the @{"fifth shell page" link SETVNC_SHELL_5}.
They are also six sets of priorities, one for each TAB expansion function.
@{CODE}

@{"Files" link EXPAND_FILE_PRI}                   @{"Dirs" link EXPAND_DIRECTORY_PRI}                    @{"Icons" link EXPAND_INFO_PRI}
@{"Devices" link EXPAND_DEVICE_PRI}                 @{"Assigns" link EXPAND_ASSIGN_PRI}                 @{"Volumes" link EXPAND_VOLUME_PRI}
@{"Path" link EXPAND_PATH_PRI}                    @{"C: Dir" link EXPAND_COMMAND_PRI}                  @{"Resident" link EXPAND_RESIDENT_PRI}
@{"Scripts" link EXPAND_SCRIPT_PRI}                 @{"Executables" link EXPAND_EXEC_PRI}

@{BODY}
Your priorities get "adjusted" a bit if you search for a directory or a
device explicitly, i.e. the @{"template" link Template} ends either with a
forwards slash "/" or with a colon ":". In this case, all other file types
except directories or devices/assigns/volumes are ignored and the priority
of the file type looked for is eventually raised from -128 to -127. This
means especially that even if you disabled directories explicitly, searching
for an object ending with "/" will actually match something.


There is actually another flag that has some influence on the
@{"TAB expansion" link TabExpand}, and that's the "History buffer wraps
around" option on the @{"second shell page" link SETVNC_SHELL_2}. If this
option is enabled, the TAB expansion list will "wrap around", too: As soon
as one end of the list is reached, ViNCEd will insert a blank line. If now
one of the TAB expansion functions is pressed again to move on, the buffer
"wraps around" and ViNCEd starts to display the first entry from the other
end of the buffer.


Finally, you find @{"on the same page" link SETVNC_SHELL_2} the number of
directories which are simultaneously kept in the TAB expansion cache.


@ENDNODE
@NODE Tab_WhyCommands "Why does that match commands?"
@TOC TabExpand
ViNCEd knows that you are searching for a command because you're expanding
the first argument on a line, and this argument is neither a directory nor a
device - that is, it's name does not end with a ":" or a "/". The
consequence is that all locations where
@{"commands can be found" link Tab_ChangeCmdDir} are considered. That is,
the current directory, the "C:" (multi-)assign, all directories in the shell
"path", and the list of resident commands.

This can be @{"changed" link Tab_ChangeCmdDir}, of course.

@ENDNODE
@NODE Tab_Template "Why does this match commands that start with rex?"
@TOC TabExpand
ViNCEd extracts the command the cursor is placed in and treads this as a
so called @{"template" link Template}. The rules for these templates are as
follows:


All character strings that match the template must begin with the same
characters in front of the cursor as in the template, and must end with the
same characters as under and behind the cursor in the template. That is, a
possible match must "insert" characters at the cursor position - remember
that if you would type in characters from the keyboard, these would exactly
go between there.


Since the example @{"template" link Template} starts with "rex", and the
cursor is placed behind the "x", all possible matches have to start with
"rex". Since no characters are under or behind the cursor, the end of the
match is arbitrary.


Another example would be

@{CODE}
1.SYS:> l@{BG Fill}@{FG Shine}t@{FG Text}@{BG Background}
@{BODY}

which would match all @{"commands" link Tab_WhyCommands} that begin with "l"
and end with "t".


To express this even in different words for the experts, the Amiga Dos
search pattern is build by the template by inserting a "#?" right at the
cursor position.

@ENDNODE
@NODE Tab_ChangeCmdDir "How to change the command search directory?"
@TOC TabExpand
Which directories are considered for searching commands is part of the
configuration of the TAB expansion
@{"keyboard function" link KeyFunction} used for expansion. In our example,
the first available keyboard function is relevant since this is the function
@{"bound" link KeyBind} to the
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} key.


To change these settings, open the @{"SetVNC" link SetVNCToc} program and go
to the @{"fifth shell page" link SETVNC_SHELL_5}. The page will already
show the settings for the first expansion function, all others can be
adjusted by pressing the "« Prev" and "Next »" buttons on this page. In
total, six expansion @{"keyboard functions" link KeyFunction} are available.


This page shows now a list of priorities which "weight" all possible
matches. As soon as a priority goes below -127, the match is no longer
considered.


As far as the example is concerned, the "Resident", "C: Dir" and "Path"
gadget is of importance:

The first gadget is the absolute priority for matches in the resident list.
Set this to "-128" to ignore resident commands.

The second gadget is a relative priority that is added to matches found in
the "C:" directory. If this is set to "-128", this directory will be ignored
completely, regardless how high the overall priority may grow.

The third gadget is again a relative priority used for matches in the shell
path, i.e. all directories printed by the "Path" command except the current
directory and the C: assign. Again, if this is set to "-128", the path will
be ignored.


More details about how the priorities are used are described in a
@{"different section" link SETVNC_SHELL_5}.

@ENDNODE
@NODE Tab_ExcludeDirs "How to exclude directories?"
@TOC TabExpand
You can of course setup whether directories should be included in this
situation. It's part of the configuration of the TAB expansion keyboard
@{"function" link KeyFunction} used whether directories should match or
not.


In our example, the first available TAB expansion, which is
@{"bound" link KeyBind} to
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background}, has been used.


To change its settings, open the @{"preferences editor" link SetVNCToc}, the
SetVNC program and go to the @{"fifth shell page" link SETVNC_SHELL_5}. The
white text below the headline will show now the TAB expansion function to be
adjusted, to be controlled with the "« Prev" and "Next »" buttons right to
it. The gadgets below setup the priorities assigned to certain objects. You
may change here the entry of the "Dirs:" gadget in the first row to a lower
value, or probably even to -128; objects with a total priority lower than
-127 aren't considered as a valid match, hence this would exclude
directories completely.


More details about how the priorities are used are described in a
@{"different section" link SETVNC_SHELL_5}.

@ENDNODE
@NODE Tab_ExcludeAssigns "How to exclude assignments?"
@TOC TabExpand
It's part of the ViNCEd configuration which sources are searched to find a
match for a given @{"template" link Template}, or to be precise part of
the configurations of one of the six the
@{"keyboard functions" link Keyfunction} used for the TAB expansion. In our
example, the first available TAB function is relevant since this is the
function @{"bound" link KeyBind} to the
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} key used in the
@{"tutorial" link TabExpand}.


To change these settings, open the @{"SetVNC" link SetVNCToc} program and go
to the @{"fifth shell page" link SETVNC_SHELL_5}. The page will already
show the settings for the first expansion function, all others can be
adjusted by pressing the "« Prev" and "Next »" buttons on this page. In
total, six expansion @{"keyboard functions" link KeyFunction} are available.


This page shows now a list of priorities which "weight" all possible
matches. As soon as a priority goes below -127, the match is no longer
considered.


The priority that is relevant for the assigns is, obviously, the
number in the "Assigns" gadget. Set this to -128 to exclude assignments.
Similarly, devices and volume names can be removed as well - by setting their
priority to -128 as well.


More details about how the priorities are used are described in a
@{"different section" link SETVNC_SHELL_5}.

@ENDNODE
@NODE Tab_ExcludeIcons "How to exclude icon files?"
@TOC TabExpand
Which files types match a TAB expansion is under control of the ViNCEd
configuration, or to be specific, under the configuration of one of the
six TAB expansion functions available. In our example, this is the first
function available because that is the function that is
@{"bound" link KeyBind} to the
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} key.


To change its settings, load the @{"SetVNC" link SetVNCToc} program and go
to the @{"fifth shell page" link SETVNC_SHELL_5}. This will show the
priority settings for the first TAB function already.


To exclude icon files, enter a value of "-128" in the top right "Icons:"
gadget on that page - the TAB expansion will ignore all objects with a
priority lower than -127.


More details about how the priorities are used are described in a
@{"different section" link SETVNC_SHELL_5}.

@ENDNODE
@NODE Tab_NotForDirs "Side mark: Inserting spaces"
@TOC TabExpand
As an exception, ViNCEd will NOT insert spaces after a successful and unique
expansion if the match was either a directory or an assign. The last letter
will be a forwards slash "/" or a colon ":". This is mainly for convenience
in all-day use.

@ENDNODE
@NODE Tab_NoRefinement "How to avoid the refinement?"
@TOC TabExpand
In case you don't want ViNCEd to insert a
@{"refined" link Refinement} @{"template" link Template} if more than one
possible match was found, you have to adjust the configuration of the TAB
expansion @{"keyboard function" link KeyFunction} used. This would be the
first available function in our @{"tutorial" link TabExpand} which is
@{"bound" link KeyBind} to
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} by default.


To adjust the settings, load the @{"SetVNC program" link SetVNCToc} and go
to the @{"third shell page" link SETVNC_SHELL_3}. It will already show the
flags of the first TAB expansion function, the others are available by the
arrow gadgets "« Prev" and "Next »". In this page, turn on the gadget "First
TAB expands fully".


More details about how the flags settings are described in the
@{"third shell page" link SETVNC_SHELL_3} and the
@{"fourth shell page" link SETVNC_SHELL_4}.

@ENDNODE
@NODE Tab_AmbigReq "What about a requester if not unique?"
@TOC TabExpand
If you like to see a requester if more than one possible match of your
@{"template" link Template} was found, you have to adjust the configuration
of the TAB expansion @{"keyboard function" link KeyFunction} used. This
would be the first available function in the above
@{"tutorial" link TabExpand} which is @{"bound" link KeyBind} to
@{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background} by default.


To change the settings, load the @{"SetVNC program" link SetVNCToc} and go
to the @{"third shell page" link SETVNC_SHELL_3}. It will already show the
flags of the first TAB expansion function, the others are available by the
arrow gadgets "« Prev" and "Next »". Turn on the gadget "Requester if
expansion is ambiguous" on this page.


More details about how the flags settings are described in the
@{"third shell page" link SETVNC_SHELL_3} and the
@{"fourth shell page" link SETVNC_SHELL_4}.

@ENDNODE
@NODE ReqFilters "About info files and requesters"
@TOC TabExpand
There are two (or three, to be precise) popular requester packages available
- the standard "asl" package which came with your workbench and the
"reqtools" replacement which should be patched in by "reqchange" (I don't
recommend RTPatch, though). The "asl" library shows the "info" files by
default, the reqtools patch does not. However, there should be a tiny
".info" button in each reqtools gadget which allows to include these files
as well. The problem is here that all matches found by ViNCEd are again
filtered by the requester package. A sometimes useful, but sometimes annoying
side effect.

@ENDNODE
@NODE Tab_NoVNCReq "How to use standard requesters?"
@TOC TabExpand
ViNCEd uses a lot of trickery to allow you selecting @{B}ALL@{UB} found
matches of a @{"TAB expansion" link TabExpand} from a file the requester,
and even to enter directories and assigns found in this way. If a file was
found twice - because it happens to be in two directories ViNCEd looked for
expansions in - then @{B}it will appear twice@{UB} in this requester. While
this might look weird, it is supposed to be a warning sign to you that it is
not clear which version is actually used by the shell.


If you don't like all this magic, you can switch back to a plain file
requester. This will, however, ONLY show the files in the current directory
level, @{B}NO@{UB} assigns, @{B}NO@{UB} devices, no extras.



The corresponding flag is located on the
@{"third shell page" link SETVNC_SHELL_3} of the
@{"SetVNC program" link SetVNCToc} - one flag is available for each of the
six TAB expansion functions. To select the function to modify, use the
"« Prev" and "Next »" buttons on top of the page.

@ENDNODE
@NODE Tab_NoDoubleTab "How to turn off the Double-Tab requester?"
@TOC TabExpand
The Double-Tab requester is invoked by ViNCEd as soon as another TAB
expansion @{"keyboard function" link KeyFunction} is used within the
double-click period after the @{"TAB expansion" link TabExpand} has been
completed. If this requester is "in the way" because you prefer keyboard
based working to a graphical interface (I'm faster in typing than in
clicking anyhow...), you may disable this requester function.


To do so, open the @{"SetVNC" link SetVNCToc} preferences editor, go to the
@{"third shell page" link SETVNC_SHELL_3} and select with the "« Prev" and
"Next »" gadgets near the top of the page the TAB function you'd like to
adjust. The first flag on this page - "Double TAB requester" - must be
un-checked to disable the requester.

@ENDNODE

@NODE Refinement "What is a refinement?"
@TOC UserToc
A "refinement" of a @{"template" link Template} is a template that matches
exactly the same entries as the original template, but contains more
characters. Hence, it is the largest possible "partial expansion" of the
@{"template" link Template} given in first place.


ViNCEd will place the cursor within the "refinement" in such a way that
again a valid @{"template" link Template} is constructed. To remove the
ambiguity of this template, or at least to exclude some of the matches,
characters have to be inserted right at the cursor position.
@ENDNODE
@NODE Template "What is a template?"
@TOC UserToc
A "template" is a sequence of characters, the cursor placed within this
sequence, which is used as a "wild card" to search an entry either of the
ViNCEd @{"command history" link History} or of the directories for a
@{"TAB expansion" link TabExpand}. Each object - either an entry of the
@{"history" link History} or a candidate for a
@{"TAB expansion" link TabExpand} is compared against this template and
either considered as a match, or ignored.


The rules for matching are quite simple: A candidate must begin with the
characters in the template up to the character in front of the cursor
position, and must end with the characters under and behind the cursor
position. Hence, a template like


1.SYS:> l@{BG Fill}@{FG Shine}s@{FG Text}@{BG Background}t


would match candidates which start with an "l" and end with "st".


To give an intuitive "rule of thumb" for templates: A possible candidate is
only allowed to insert characters at the cursor position. It is not allowed
to change any other character already given in the template. This means,
especially, that you may always refine a template by typing some characters
at the cursor position.

@ENDNODE

@NODE CtrlZ "The magic Ctrl Z key in the Shell mode"
@TOC ShellMode
This is a unique feature of ViNCEd which is mostly known from the Unix
world; it is only available if the @{"Shell mode" link ShellMode} is
enabled, and it requires at least Os 3.0 to make it working, or the
"NamedConsoleHandler". This handler should be installed as part of the
installer script, and should be mounted in the startup-sequence. It is not
required for Os 3.0 or later.


What does this, now? It happened more than once that I was running a program
in the shell and then decided that I actually need to run another one in
between. However, since I forgot to use "RUN" to start the first program,
the shell in the window was no longer available as it was "blocked" by the
first program already. What I had to do in this situation was to go to
the workbench and open another shell; Unix, however, offers a special key
just for that situation: Hit
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background} to suspend the
currently running program and make the shell re-available again.


ViNCEd offers "almost" the same feature for the Amiga: If a program is
blocking the shell, hit
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background} to launch just
another shell in the same window. Output of the first program going into the
window while the second shell is working will be "suspended". ViNCEd will
not "mix" both outputs and confuse you; only one of the running shells
will be allowed to print in the window. The additional
@{"scripts" link Scripts} "fg" and "bg" implement "almost Unix" "job
control" commands. Using these commands, you're able to control which
program is "in foreground" and which are not. Only foreground commands
are allowed to print on the screen; and if a background program tries so, it
will be "suspended", i.e. stopped until you put it "in foreground"
explicitly.


How about an example? Open a ViNCEd shell - keep care that it is in
@{"Shell mode" link ShellMode} or this magic won't work. Then enter the
command

@{CODE}
1.SYS:> list@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}
@{BODY}

and while the output is in progress, hit
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background}. What you'll see
looks approximately like the following:

@{CODE}
Disk&Debug                   Dir ---arwed 14-Jun-98 19:19:03
Disk&Debug.info              628 ---arw-d 10-Jan-97 22:00:27
Disk.info                    376 ---arw-d 10-Sep-96 22:16:38

New Shell process 2
2.SYS:>
"list" suspended. [ViNCEd output]
2.SYS:>
@{BODY}

At the time you pressed
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background}, ViNCEd launched
a new shell for you, here indicated by the text "New Shell process 2". The
prompt of this new shell is already printed on the line below. However, the
"list" command was still running and tried to print some output. Since the
new shell is now "in foreground", the "list" command has been put in
background. As soon as it tries to print something, it is stopped and ViNCEd
prints a message for you that this happened in the next line:

@{CODE}
"list" suspended. [ViNCEd output]
@{BODY}

The prompt of the new shell is then requested again. As soon as you want to
see the "list" output, you've to put that "to foreground" again. To do that,
you need the "CLI number" of the "list" output; type "status" to see which
commands are currently running:

@{CODE}
1.SYS:> status
Process  1: Loaded as command: list
Process  2: Loaded as command: status
10.SYS:>
@{BODY}

In our tiny example, the "CLI number 1" is used by the "list" command, and
the shell number 2 is running the "status" command you entered. To put now
the "CLI 1" to foreground, type

@{CODE}
2.SYS:> fg 1
Expansion                    Dir ---arwed 30-Apr-98 23:46:36
Expansion.info               632 ---arw-d 04-Sep-96 23:34:48
@{BODY}

and the "list" command will resume. Looking at the prompt some lines below
reveals that you're now back in the "CLI 1" and CLI 2 is in background.
However, since nothing is printed by this shell and it's just sitting there
and waiting for your input, it won't get suspended. Of course, you may still
put it back in foreground with "fg 2":

@{CODE}
1.SYS:> fg 2
2.SYS:>
@{BODY}


Somewhat more insight for the advanced user about the job control is in a
@{"separate section" link JobCtrl}.

@ENDNODE

@NODE History "The command history"
@TOC UserToc
The command history is another ViNCEd @{"buffer" link Buffers}. Unlike the
screen "review buffers", it's not directly visible on the screen, but is
nevertheless useful. (However, it can be made visible with the
@{"history" link Scripts} Shell script).


As soon as you entered a command and press
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} (or precisely,
the @{"Send Inputs" link Kf_Send_Inputs} keyboard
@{"function" link KeyFunction} which is usually @{"bound" link KeyBind} to
this key), your input enters the command history. With the ViNCEd history
functions, this input can be restored later on - which helps typing longer
command lines over and over again. The difference between the history and
the review buffer - which can be used, too, to rerun a command - is that the
cursor doesn't leave the current input line at all.


Besides that, there are @{"keyboard functions" link KeyFunction} to
"move" in the command history - very much like moving in the display buffer.
Even better, you may also search for commands in this buffer.



The following is a tutorial about how to work with the history. The list
history relevant settings is
@{"in a different section" link History_Settings}



To demonstrate a bit how this works, enter the following commands a the
ViNCEd shell:
@{CODE}

1.SYS:> list@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
and press @{FG Background}@{BG Text}Return@{FG Text}@{BG Background} to list
the current directory. Next, run
@{BODY}

1.SYS:> dir@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{CODE}
and, for a last time, enter
@{CODE}

1.SYS:> list SYS:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
The default configuration @{"binds" link KeyBind} the functions traversing
in the history to the
@{FG Background}@{BG Text}Alt Cursor Up@{FG Text}@{BG Background} and
@{FG Background}@{BG Text}Alt Cursor Down@{FG Text}@{BG Background} keys -
so let's try these; press
@{FG Background}@{BG Text}Alt Cursor Up@{FG Text}@{BG Background}:

@{CODE}

1.SYS:> list SYS:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
This shows again the last command entered. Pressing this key again reveals
@{CODE}

1.SYS:> dir@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
the command entered previous to that - you just moved "two lines" in the
history "upwards". Pressing a third time
@{FG Background}@{BG Text}Alt Cursor Up@{FG Text}@{BG Background} shows of
course
@{CODE}

1.SYS:> list@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
and pressing it a fourth time shows just a blank line
@{CODE}

1.SYS:> @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
because you've just encountered the end of the history. Pressing
@{FG Background}@{BG Text}Alt Cursor Up@{FG Text}@{BG Background} again
reveals nothing new, just again the blank line. You may ask ViNCEd to "wrap"
the history "around" in this case, i.e. to start from the opposite beginning
as soon as you passed the end - instead of just stopping at the end. This is
controlled by the @{"History buffer wraps around" link SETVNC_SHELL_2} flag
on the second shell page of the @{"SetVNC" link SetVNCToc} preferences
editor, or alternatively by the "Wrap Around Buffer" item in the
@{"Settings menu" link SettingsMenu}.


Try now the backwards moving functions:
@{FG Background}@{BG Text}Alt Cursor Down@{FG Text}@{BG Background}. As
expected:
@{CODE}

1.SYS:> list@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
Erase now this command and enter a new one:
@{CODE}

1.SYS:> dir SYS:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
This shows, again, the directory. But it will, too, "rewind" the history and
append this command at the end of it. If you had entered the "list SYS:"
command again, ViNCEd would have noticed that there is already another "list
SYS:" at the end of the history and won't keep this duplicate entry - even
though the history gets rewinded. As always, there's a flag in the
@{"SetVNC" link SetVNCToc} program which disables this feature and
hence allows keeping duplicates; it's located on the
@{"second shell page" link SETVNC_SHELL_2}.


Anyways, pressing
@{FG Background}@{BG Text}Alt Cursor Up@{FG Text}@{BG Background} now shows
the command you just entered
@{CODE}

1.SYS:> dir SYS:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
again, and using the history movement function again shows
@{CODE}

1.SYS:> list SYS:@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
the previous one.


Erase now this line, and press
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} on the blank
line. This will also "rewind" the history - but the blank line won't enter
the history. Instead of moving now "upwards" in the history, you may also
start looking at it "downwards", i.e. scan it in "reverse order". Just press
now @{FG Background}@{BG Text}Alt Cursor Down@{FG Text}@{BG Background}, and
ViNCEd prompts with
@{CODE}

1.SYS:> list@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
the very first command entered. Thus, if the history is "rewinded", you're
in some sense both at its beginning and its end at the same time. The first
movement selects from which end to start - this might come useful as soon as
you want to look for a command you entered ages ago.


Since erasing the input line and pressing
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} each time you
want to rewind the history might be a bit unconvenient, there's a short-cut
for this function. It's by default @{"bound" link KeyBind} to the
@{FG Background}@{BG Text}Ctrl b@{FG Text}@{BG Background} key; this
@{"keyboard function" link KeyFunction} is obviously called
@{"Rewind History" link Kf_Rewind_History}.


By the way, ViNCEd @{B}does not@{UB} keep an infinite amount of lines in the
history, it's by default 128 lines big. The size of the history can be
setup on the @{"first window page" link SETVNC_WINDOW_1} of
@{"SetVNC" link SetVNCToc} or by using the
@{"Settings menu" link SettingsMenu} attached to the window.


Let's come to another useful feature of the history - you may search for
commands. For first, rewind the history with
@{FG Background}@{BG Text}Ctrl b@{FG Text}@{BG Background}. Then enter the
following @{"template" link Template}

@{CODE}

1.SYS:> li@{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
and press @{FG Background}@{BG Text}Amiga B@{FG Text}@{BG Background} or,
alternatively,
@{FG Background}@{BG Text}Shift Alt Cursor Up@{FG Text}@{BG Background}.
Both functions search in the history in the "backwards" or "upwards"
direction for a line matching the @{"template" link Template} - in this case
for commands starting with "li".


The rules how templates for searching are
build are described in detail @{"elsewhere" link Template}, but to give an
intuitive rule for how they work: ViNCEd scans the history buffer and looks
for lines that are formed just by inserting characters at the cursor
position. Other modifications are not allowed. Hence, a template like
@{CODE}

1.SYS:> l@{BG Fill}@{FG Shine}t@{FG Text}@{BG Background}

@{BODY}
would allow ViNCEd to insert characters between the "l" and the "t", but
nothing else. Hence, lines starting with "l" and ending with "t" would match
here.


Going back to the tutorial, ViNCEd finds the following line:
@{CODE}

1.SYS:> li@{BG Fill}@{FG Shine}s@{FG Text}@{BG Background}t SYS:

@{BODY}
the last available command that starts with "li". To search on, press
@{FG Background}@{BG Text}Shift Alt Cursor Up@{FG Text}@{BG Background} again
or @{FG Background}@{BG Text}Amiga B@{FG Text}@{BG Background},
whatever you like. ViNCEd remembers the last pattern and will resume
scanning the history from the last found match. Hence, you'll see the
following line on the screen:

@{CODE}

1.SYS:> li@{BG Fill}@{FG Shine}s@{FG Text}@{BG Background}t

@{BODY}
which is the very first command you entered. Searching on reveals no other
matches, it will just flash the screen, obviously (try it!).


If you're left at a certain point in the history, you may of course search
in the opposite direction as well, towards the "newer" entries or the
"bottom end" of it. This works either with
@{FG Background}@{BG Text}Amiga F@{FG Text}@{BG Background} or
@{FG Background}@{BG Text}Shift Alt Cursor Down@{FG Text}@{BG Background}.


This ends the tutorial session - the list of flags that control the history
function is listed in a @{"different section" link History_Settings}.

@ENDNODE
@NODE History_Settings "All history settings at once"
@TOC History
The history is mainly controlled by two flags which are found on the
@{"second shell page" link SETVNC_SHELL_2} of
@{"SetVNC" link SetVNCToc}. The first one,


@{B}History buffer wraps around@{UB}

controls what happens if the end of the history is reached while moving in
the history. If this flag is disabled, the history movement functions will
just stop and present a blank line. If the flag is enabled, the history will
"wrap around" and show again the first line of the opposite end of the
history buffer. This flag controls, too, the
@{"Tab expansion" link TabExpand} list.


The second flag,


@{B}Keep duplicates in the history@{UB}

is used to tell ViNCEd what to with "repeated commands". If the command from
the "bottom" or "newest" end of the history is entered again, this command
will enter the history @{B}only@{UB} if this flag is checked. If the flag is
not checked, ViNCEd will rewind the history, as usual, but will simply
ignore the line as far as the history is concerned.



The size of the history, in lines, is under control of the
@{"first window page" link SETVNC_WINDOW_1}. It defaults to 128 lines. If
the size of the history grows larger than this, the oldest line is thrown
away to make room for the latest one.


Finally, the keys used for the history are setup on the
@{"keyboard pages" link SETVNC_KEYBOARD_1}. The following
@{"keyboard functions" link KeyFunction} are relevant:

@{CODE}

@{"History Up" link Kf_History_Up}               : Moves in the history, towards older entries
@{"History Down" link Kf_History_Down}             : Moves in the history, towards newer entries
@{"Search Partial Upwards" link Kf_Search_Partial_Upwards}   : Interprets the current input line UP TO the
                           cursor position as @{"template" link Template} and searches
                           for this @{"template" link Template} in the history towards
                           older entries. This function is provided
                           for backwards compatibility with the CON: mode
                           of history searching which does not use the
                           ViNCEd template mechanism.
@{"Search Partial Downwards" link Kf_Search_Partial_Downwards} : Similarly, but in downwards direction.
@{"Search History Upwards" link Kf_Search_History_Upwards}   : Interprets the complete current input line as
                           @{"template" link Template} and searches for this template in
                           the history towards the older lines, as
                           described by the @{"tutorial" link History}.
@{"Search History Downwards" link Kf_Search_History_Downwards} : Ditto, but searches towards newer lines.

@{BODY}

@ENDNODE

@REMARK Scripts and other topics of the user index
@NODE Scripts "The scripts contained in this package"
@TOC UserToc
Seven scripts have been copied by the installation disk to your S: drawer
Three of them are part of the @{"job control" link JobCtrl}, and
the others replace standard tools usually found in the C: drawer.


@{B}S:fg@{UB}

is used for @{"job control" link JobCtrl} and calls
@{"SetVNC" link SetVNCToc} to put a specified CLI to
@{"foreground" link JobCtrl}. The argument is the number of the CLI process
that should be put to foreground, as printed by the "status" command.


@{B}S:bg@{UB}

another @{"job control" link JobCtrl} script which sends the
current shell to the background using @{"SetVNC" link SetVNCToc}.
It does not take any arguments.


@{B}S:fork@{UB}

starts a new shell in the current shell window and sends it to foreground.
If an argument is supplied, this command with all remaining arguments is
executed in background. Mostly provided as an example how to use
@{"named consoles" link Owners} and @{"job control" link JobCtrl}.

@{B}REMARK@{UB}: There's one quirk about the "fork" command: If you run a
program with it, its input and output are set to the new "background" owner,
but its controlling terminal, which is used to open a "*" file, will remain
the current stream. Thus opening "*" from such a process *MIGHT* end in a
deadlock situation! This is due to a gap in the RUN command, and some others
in the way how the AmigaDOS executes script files. There's currently no way
to fix this with just a script, so take this as a demonstration what is
possible. A replacement "Run" should be able to fix this


@{B}S:SetKeyboard@{UB}

replaces the C:SetKeyboard command and selects the keyboard for ViNCEd
windows. The old C:SetKeyboard still works, but it is more a "hack" than a
stable implementation. The script uses the recommended way thru documented
@{"Esc" link EscList} sequences. The needed argument is the name of the
keyboard, e.g.
@{CODE}

1.SYS:> SetKeyboard d@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
selects the german keyboard.


@{B}S:SetFont@{UB}

replaces C:SetFont and selects the terminal font. The old C:SetFont still
works, but is like C:SetKeyboard more a hack and conceptionally not clean.
The supplied script uses the documented @{"Esc" link EscList} sequences
to do the same job much better and safer. However, this script does not
check for proportional fonts and uses them in the window without warning. As
a result, the display might look very ugly and the input of commands will be
confusing with proportional fonts, moreover, some graphical artifacts may
show up. Except that, the arguments are identical to C:SetFont. Maybe
somebody wants to write a replacement for C:SetFont that takes care of
ViNCEd? In that case, contact @{"me" link Me}.


@{B}S:More@{UB}

is a workaround for the CBM "More" page utility. It is assumed that you keep
the original More program in the drawer "SYS:Utilities". If your "more" is
located somewhere else, please edit the script!


The script frees the @{"window pointer" link Ca_FreePointer} after "More"
quit, in order to re-establish the @{"iconification" link Gadgets}.


@{B}S:History@{UB}

dumps the history to the screen or to a file and demonstrates the power of
the "PUT" and "GET" arguments of @{"SetVNC" link SetVNCShellArgs}.


@ENDNODE
@NODE JobCtrl "Details about Job Control"
@TOC UserToc
A new feature introduced with ViNCEd is the so-called "job control". A "job"
is just couple of ordinary shell commands that share an common meaning of
"foreground" or "background".


There is only one "foreground" job - which is allowed to receive inputs and
to print on the screen, and arbitrary many "background" jobs. The commands
running as part of these jobs neither receive input, nor may print anything
to the screen. In case they try, they just get "suspended", i.e. halted
until you bring them to "foreground" manually.


An important part of the "job control" managed by ViNCEd is the
@{"Ctrl z" link CtrlZ} function. It aborts the current foreground process,
brings it to background and launches a new shell in foreground. A tutorial
about this key can be found in the @{"Ctrl z" link CtrlZ} section.


Three @{"scripts" link Scripts} for "job control" have been installed in
your "S:" directory as part of the installation process. Let's check how to
use them:

Open a new shell if not already done. Since you should be able to run
commands as usual in this shell, the "job" related to this shell is in
"foreground". We're now starting a second shell in the same window and put
the first shell to background:
@{CODE}

1.SYS:> fork@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
This will print some messy lines on the screen - which are due to the way
how the script works - and ends up with a shell prompt of a different
process number:
@{CODE}

3.SYS:> @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
The "CLI number one" is now in "background", the "CLI three" is in
foreground and ready for input. We may now explicitly put the new shell to
background and bring the "Cli one" to foreground again. This works with
@{CODE}

3.SYS:> bg@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
the "bg" - short for "background" - command. Since just moving "shells" back
and forth doesn't help too much, let's try something useful. Run the "list"
command in the first shell
@{CODE}

1.SYS:> list@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
and "suspend" it in the middle of the output by pressing
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background}. It will be
aborted, put into background and the next available shell will be brought to
foreground:
@{CODE}

Devs                         Dir ---arwed 10-Jul-98 00:10:53
Devs.info                    632 ---arw-d 05-Sep-96 21:22:27
3.SYS:>
"list" suspended. [ViNCEd output]
3.SYS:>

@{BODY}
At first the shell "Cli 3" shows up, and "list" is put to background.
However, since "list" still tries to continue its output, it will get
suspended, i.e. halted. The "Cli 3" prompt is now printed again and ready
for input.

To resume the "list" program, you've to put it back to foreground. That
happens either implicitly with the "bg" command by putting the currently
running shell "back", or by using the "fg" command and a "Cli number"
explicitly. Since "list" runs in "Cli 1" in our tutorial, let's try:
@{CODE}

3.SYS:> fg 1@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
and the output of "list" resumes. "Cli 3" is now in background again.


By the way: The ViNCEd notion of "foreground" and "background" is
@{B}not@{UB} related to the AmigaDos notation of "background processes". A
program launched with "Run" is, in AmigaDos terminology a "background
process". However, it is still allowed to print on the screen since it
shares the "job" with the shell it was started with.

Hence,
@{CODE}

1.SYS:> run list@{FG Text}@{BG Background}Return@{FG Text}@{BG Background}

@{BODY}
will make no difference from what you're used to. However, you won't be able
to abort this output by
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background} since this
program is no longer run as a part of the current shell. A better and job
control compliant way to run "real background processes" is by using the
"fork" command together with an argument. For example,
@{CODE}

1.SYS:> fork list@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
will not only run the "list" command, it will also put it to background.
Hence, the next line of output will be
@{CODE}

"list" suspended. [ViNCEd output]
[CLI 2]
1.SYS:> @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}
@{BODY}
to indicate that "list" was suspended because it tried to print on the
screen. Commands that do not try to print will be of course allowed to run
on as usual.


To go on, let's put "list" back in foreground again. Do to so, we need first
it's "Cli number". This is printed by the status command:
@{CODE}

1.SYS:> status
Process  1: Loaded as command: status
Process  2: Loaded as command: list
Process  3: No command loaded

@{BODY}
In this example, it's the "Cli 2" that runs "list". Hence, to resume output,
enter
@{CODE}

1.SYS:> fg 2@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{BODY}
and the listing will go on. You will, however, still end up in the "Cli 1"
@{CODE}

1.SYS:> @{BG Fill}@{FG Shine} @{FG Text}@{BG Background}

@{BODY}
since the "job" that was "forked" to run "list" quits as soon as the command
quits. In this case, ViNCEd will select the next available shell for you and
bring it to foreground.


Some additional nodes about the "job control scripts": They use all the
@{"SetVNC" link SetVNCShellArgs} program for its function, namely "SetVNC
foreground" and "SetVNC background". ViNCEd - or SetVNC to be precise - will
NOT allow you to control jobs that have been launched from a different
ViNCEd window than the current one - mainly because of security reasons.


However, there's one tiny exception: It may happen that you somehow "got
stuck" because
@{FG Background}@{BG Text}Ctrl z@{FG Text}@{BG Background} doesn't seem to
work anymore and you won't be able to bring a shell back to foreground, even
if there's one available in that window. This happens for example if ViNCEd
can't abort a running process safely since there's currently not enough
information about it available. If this happens, you've to open a new shell
window, unfortunately. You *may try* to bring the shell running in the other
shell window to foreground with a "brute force" method:


First, find its "Cli number" by running the "status" command. The lines
showing
@{CODE}

Process  2: No command loaded

@{BODY}
are in principle available, even though "status" does NOT say in which
window these shells are actually launched. Anyways, to bring this shell to
foreground, even though it is not running in the same window than the
window SetVNC will be run from, enter
@{CODE}

1.SYS:> SetVNC foreground other 2

@{BODY}
The "other" keyword will tell SetVNC to ignore that the "Cli 2" is actually
running in a different window and it will try to bring that to foreground
anyways - usually successful.


However, @{B}BE WARNED!@{UB} This operation is not completely safe. It might
crash your computer in certain, very delicate situations.


Probably a last word for the experts: The ViNCEd "jobs" are implemented thru
so called @{"named consoles" link Owners} - which are part of the ViNCEd
@{"console owner system" link Owners} - which is another ViNCEd speciality.
Named consoles are only supported by Os versions 3.0 and 3.1 - which is
the reason why this doesn't work for Os 2.1 or below.

@ENDNODE
@NODE Compatibility "Compatibility notes"
@TOC UserToc
@{B}More@{UB}

Just a couple of bugs in this program. First, it requests a pointer to the
intuition window without giving it back. This is common to all "CON:"
programs and will disable iconification and closing of AUTO windows. As a
workaround, use the "More" @{"script" link Scripts}, which is part of
the ViNCEd distribution. It will free the window pointer afterwards for you.
Read also about the @{"FreePointer" link CA_FreePointer} command line option
of @{"SetVNC" link SetVNCToc}. This bug has been fixed in More 45.x and up.


Second, "more" expects "Close-Window" events without asking for them. I added
a fix for that: Whenever a window is switched to raw mode, the close window
event is turned on. Sigh. This bug remains open. There's really little one
can do here without breaking "more" on native consoles.


A fix for the iconification bug is now available for the 40.3 version of
"More" and can be installed optionally. However, I would recommend using the
45.xx variants of more, they are 100% less hacky.


@{B}Ed@{UB}

Again, the same pointer problem as above. I said this is usual, but not my
trouble. Second, "Ed" sends the undocumented CSI sequence "CSI 1K" which
should, according to the VT-220 standard, erase the beginning of a line.
Instead, "Ed" expects ViNCEd to erase the end of the line. Added a
workaround for this, "CSI 1K" is now interpreted in the wrong way in CBM
compatibility mode, but works like it should in VT-220 mode. Third, "Ed"
leaves a pending Read packet in the stream of ViNCEd. This packet is now
canceled each time a Close Event is send to the owner used by "Ed", together
with all other packets pending there. Not very nice, in fact, but prevents
crashes and I can't think of another solution. Last, to use "Ed" in a ViNCEd
window, you should change the scrolling behavour by some CSI sequences,
with "CSI >?18l" "CSI >?19l" and change maybe the block control with "CSI
>?25l". Read more about the control codes
@{"in the control code section" link CsiEsc}.



@{B}pdksh resp. ksh@{UB}

This unix korn shell implementation is another program that does not give
back the window pointer it receives. Unless other programs, it asks for the
window pointer EACH TIME it displays a prompt - to find out if it is reading
from a console, I guess - making iconification completely impossible, even
with a "SetVNC FreePointer". The reason is that after freeing the pointer
with this command, it asks again for a new pointer if the prompt gets
displayed, ARGHH! The implementation of this function in "ixemul" should be
really fixed, since there's currently NO solution for this problem. TAB
expansion in "pdksh" windows won't work. The reason is the rather strange
reading mechanism of the pksh which somehow emulates the timed/nonblocking
reads of unix. Instead of sending a read request to the console, a
WaitForChar() style mechanism is used. However, these packets aren't
accepted by ViNCEd as stable basis for a TAB expansion, as the packet might
get answered at a time not fully under control of ViNCEd - and the
CurrentDir() of the waiting process might get lost in between. There's
currently no way to fix this. A private TAB expansion like in the unix
"bash" would be the better and cleaner solution anyways, so I won't support
this bad style.



@{B}Z@{UB}      (The Aztec Editor, ancient!)

Well, if you MUST use this editor (maybe you like VI as well... Argh!), here
is how: Send "CSI >?18l" "CSI >?19l" to turn off the ViNCEd scrolling. See
also the ViNCEd @{"control sequences" link CsiEsc}.



@{B}asm@{UB}    (The lattice assembler, old versions 5.xx)

This program has an illegal control sequence in its title. When printed,
ViNCEd inserts 1988 blank lines. This might take a while, but is not
dangerous. The new versions work well.



@{B}csh,ZShell,NewShell@{UB}

Sends an illegal CSI sequence to ViNCEd ("CSI q" instead of "CSI 0q"). I
added a workaround for this, but don't expect this to work any longer.
It looks like this "CSI q" sequence is very popular and seems to be
documented somewhere. I have no idea who had the strange idea to invent this
sequence instead of taking the documented one.

Additional, it does a lot of switching between raw mode and cooked mode,
which is quite unnecessary, since the editor features of ViNCEd are
superior to that of csh - I advice you to use the "-a" flag.
Again, since "csh" reads the window pointer and does not give it back,
ViNCEd can't iconify this window anymore (different to KingCON, which still
allows the user to iconify the window and, hence, crashes the system). A
second problem is, also I haven't checked that out, that the internal
commands of "csh" are not in the resident list of the DOS (I suppose). For
that reason, they can't get expanded by the TAB key. I advice you to place
some dummy commands in the resident list or in the C: directory.



@{B}CenterTitles@{UB}

Not a real bug, but the window title might look a bit messy for one or two
seconds after opening a ViNCEd window with buttons in it. This messed window
title will go away almost immediately and is harmless (and due to a bug in
CenterTitles which uses the wrong draw mode to refresh the title.)



@{B}ScreenShell@{UB}

The output of ViNCEd with that program might look a bit different
from how CON: outputs looked like. This is due to the fact that ViNCEd does
not ignore the settings of the screen pens, different from CON: which does
not care about the screen pens at all.



@{B}AFS@{UB}            ("Anti File System")

This is actually not a problem with ViNCEd, but a problem with the ExAll()
patch installed by SetPatch 43.6 and later versions, installed for the V39
ROMs. The SetPatch code adds a workaround for a bug in the DirCache filing
system which conflicts with AFS due to another bug in AFS. (ARGH!) ViNCEd
tries to solve this problem by using its own ExAll() routine for these ROM
versions. This is, again, an AFS bug and NOT ViNCEd related.



@{B}Vim@{UB}

As all window editors, it expects window scrolling disabled. Even more, to
make the vim build-in block operations work, the insertion of scrolled lines
into the lower display buffer should be disabled. Some advanced versions of
vim use the extended color highlighting feature, which should be enabled to
make use of the extended colors of ViNCEd instead of printing these lines in
boldface. The CSI sequences that should be sent as part of the startup
process are "CSI >?18l" and "CSI >?19l" to disable scrolling, "CSI >?14h" to
enable the extended colors instead of bold and "CSI >?13l" to disable
scrolling of lines into the lower display buffer. These CSI sequences should
actually be part of the vim "termcap" configuration.



@{B}XEN.8 font@{UB}

The XEN.8 font, even though supposed to be a fixed width font, is in fact a
proportional font. The container size of some characters is actually LARGER
than the font width - the font is declared to be six pixels wide, but the
"f" character has a width of seven pixels. This might cause some graphical
artifacts, but is otherwise harmless. Replace it by the topaz6.8 font
in the ViNCEd archive.

@ENDNODE
@NODE Prog_Compatibility "Compatibility notes for the experts"
@TOC ProgToc
Some programs don't follow the compatibility guide lines formulated in the
@{"Rom Kernal Reference Manuals" link References}. Some of these problems
have been fixed by work-arounds I will remove sometimes.



@{B}ViNCEd compatibility guidelines@{UB}


-Do not send any undocumented CSI sequences. If you want to stay compatible
with CON:, send only codes documented in the
@{"Rom Kernal Reference Manuals" link References}.


-If you want to find out whether a window belongs to ViNCEd, use the
"FindCNWindow()" function of the library. It also provides a pointer to the
intuition window. Call "UnFindCNWindow()" to give this pointer back. If you
don't, the window can't be iconified later on.


-Do not expect that the stream is linked to an open intuition window. It
might be closed by a iconification request any time. To make sure THAT a
valid intuition window exists, call "FindCNWindow()".


-Do not expect your process is in foreground. Printing from a background
process might suspend your program. Read the
@{"job control section" link JobCtrl} and the
@{"console owner section" link Owners} for more details.


-Do not expect that you will receive any raw events you haven't requested,
but be prepared that you might even ask for them in the "cooked" mode.


-Do not expect that the handler will break lines somewhere. Use the
@{"control sequences" link CsiEsc} to select the mode you need.


-Do not poke in the console unit you received with ACTION_DISK_INFO. Changes
in this structure are ignored by ViNCEd. In special, do not set the the font
in that structure and do not set the keymap, even though this MIGHT work as
a part of a compatibility hack. ViNCEd supports CSI sequences to do that,
read @{"control sequence section" link CsiEsc}.


-Do not expect that the startup ID -1 will work. This lesser known feature
of the 1.3 console handler was used to attach the console to a previously
opened window, but is no longer supported - neither by the newer CON:
handlers nor by ViNCEd. Use the WINDOW open path argument, or the ConMan
style "W" argument.

@ENDNODE

@REMARK Keyboard functions
@NODE KeyFuncList "List of all Keyboard Functions"
@TOC Keyboard
@{CODE}
@{"Cursor Left (Keyboard Function)" link Kf_Cursor_Left}
@{"Cursor Right (Keyboard Function)" link Kf_Cursor_Right}
@{"Cursor Up keyboard (Keyboard Function)" link Kf_Cursor_Up}
@{"Cursor Down keyboard (Keyboard Function)" link Kf_Cursor_Down}
@{"History Up (Keyboard Function)" link Kf_History_Up}
@{"History Down (Keyboard Function)" link Kf_History_Down}
@{"Search Partial Upwards (Keyboard Function)" link Kf_Search_Partial_Upwards}
@{"Search Partial Downwards (Keyboard Function)" link Kf_Search_Partial_Downwards}
@{"Search History Upwards (Keyboard Function)" link Kf_Search_History_Upwards}
@{"Search History Downwards (Keyboard Function)" link Kf_Search_History_Downwards}
@{"Half Screen Left (Keyboard Function)" link Kf_Half_Screen_Left}
@{"Half Screen Right (Keyboard Function)" link Kf_Half_Screen_Right}
@{"Half Screen Up (Keyboard Function)" link Kf_Half_Screen_Up}
@{"Half Screen Down (Keyboard Function)" link Kf_Half_Screen_Down}
@{"To Left Border (Keyboard Function)" link Kf_To_Left_Border}
@{"To Right Border (Keyboard Function)" link Kf_To_Right_Border}
@{"To Top of Screen (Keyboard Function)" link Kf_To_Top_of_Screen}
@{"To Bottom of Screen (Keyboard Function)" link Kf_To_Bottom_of_Screen}
@{"Prev Word (Keyboard Function)" link Kf_Prev_Word}
@{"Next Word (Keyboard Function)" link Kf_Next_Word}
@{"Prev Component (Keyboard Function)" link Kf_Prev_Component}
@{"Next Component (Keyboard Function)" link Kf_Next_Component}
@{"Home (Keyboard Function)" link Kf_Home}
@{"End (Keyboard Function)" link Kf_End}
@{"Scroll Up (Keyboard Function)" link Kf_Scroll_Up}
@{"Scroll Down (Keyboard Function)" link Kf_Scroll_Down}
@{"Scroll Half Screen Up (Keyboard Function)" link Kf_Scroll_Half_Screen_Up}
@{"Scroll Half Screen Down (Keyboard Function)" link Kf_Scroll_Half_Screen_Down}
@{"Send Inputs (Keyboard Function)" link Kf_Send_Inputs}
@{"Split Line (Keyboard Function)" link Kf_Split_Line}
@{"Insert ^J (Keyboard Function)" link Kf_Insert_Ctrl_J}
@{"Send Complete Line (Keyboard Function)" link Kf_Send_Complete_Line}
@{"Line Feed (Keyboard Function)" link Kf_Line_Feed}
@{"TAB Forwards (Keyboard Function)" link Kf_TAB_Forwards}
@{"TAB Backwards (Keyboard Function)" link Kf_TAB_Backwards}
@{"Expand Path (Keyboard Function)" link Kf_Expand_Path}
@{"Expand Backwards (Keyboard Function)" link Kf_Expand_Backwards}
@{"Expand Short (Keyboard Function)" link Kf_Expand_Short}
@{"Expand Short Bkwds (Keyboard Function)" link Kf_Expand_Short_Bkwds}
@{"Expand Devices (Keyboard Function)" link Kf_Expand_Devices}
@{"Expand Devs Bkwds (Keyboard Function)" link Kf_Expand_Devs_Bkwds}
@{"Expand Dirs (Keyboard Function)" link Kf_Expand_Dirs}
@{"Expand Dirs Bkwds (Keyboard Function)" link Kf_Expand_Dirs_Bkwds}
@{"Expand Icons (Keyboard Function)" link Kf_Expand_Icons}
@{"Expand Icons Bkwds (Keyboard Function)" link Kf_Expand_Icons_Bkwds}
@{"Expand Alt (Keyboard Function)" link Kf_Expand_Alt}
@{"Expand Alt Bkwds (Keyboard Function)" link Kf_Expand_Alt_Bkwds}
@{"Send ^C (Keyboard Function)" link Kf_Send_Ctrl_C}
@{"Send ^D (Keyboard Function)" link Kf_Send_Ctrl_D}
@{"Send ^E (Keyboard Function)" link Kf_Send_Ctrl_E}
@{"Send ^F (Keyboard Function)" link Kf_Send_Ctrl_F}
@{"Send ^C to All (Keyboard Function)" link Kf_Send_Ctrl_C_To_All}
@{"Send ^D to All (Keyboard Function)" link Kf_Send_Ctrl_D_To_All}
@{"Send ^E to All (Keyboard Function)" link Kf_Send_Ctrl_E_To_All}
@{"Send ^F to All (Keyboard Function)" link Kf_Send_Ctrl_F_To_All}
@{"Delete Forwards (Keyboard Function)" link Kf_Delete_Forwards}
@{"Delete Backwards (Keyboard Function)" link Kf_Delete_Backwards}
@{"Delete Full Line (Keyboard Function)" link Kf_Delete_Full_Line}
@{"Cut Full Line (Keyboard Function)" link Kf_Cut_Full_Line}
@{"Delete Inputs (Keyboard Function)" link Kf_Delete_Inputs}
@{"Cut Inputs (Keyboard Function)" link Kf_Cut_Inputs}
@{"Delete Word Fwds (Keyboard Function)" link Kf_Delete_Word_Fwds}
@{"Cut Words Fwds (Keyboard Function)" link Kf_Cut_Word_Fwds}
@{"Delete Word Bkwds (Keyboard Function)" link Kf_Delete_Word_Bkwds}
@{"Cut Word Bkwds (Keyboard Function)" link Kf_Cut_Word_Bkwds}
@{"Delete Component Fwds (Keyboard Function)" link Kf_Delete_Component_Fwds}
@{"Cut Component Fwds (Keyboard Function)" link Kf_Cut_Component_Fwds}
@{"Delete Component Bkwds (Keyboard Function)" link Kf_Delete_Component_Bkwds}
@{"Cut Component Bkwds (Keyboard Function)" link Kf_Cut_Component_Bkwds}
@{"Delete End of Line (Keyboard Function)" link Kf_Delete_End_of_Line}
@{"Cut End of Line (Keyboard Function)" link Kf_Cut_End_of_Line}
@{"Delete Start of Line (Keyboard Function)" link Kf_Delete_Start_of_Line}
@{"Cut Start of Line (Keyboard Function)" link Kf_Cut_Start_of_Line}
@{"Delete End of Display (Keyboard Function)" link Kf_Delete_End_of_Display}
@{"Form Feed (Keyboard Function)" link Kf_Form_Feed}
@{"Clear Screen (Keyboard Function)" link Kf_Clear_Screen}
@{"Cut (Keyboard Function)" link Kf_Cut}
@{"Copy (Keyboard Function)" link Kf_Copy}
@{"Paste (Keyboard Function)" link Kf_Paste}
@{"Hide (Keyboard Function)" link Kf_Hide}
@{"Select All (Keyboard Function)" link Kf_Select_All}
@{"Copy Quiet (Keyboard Function)" link Kf_Copy_Quiet}
@{"Reset (Keyboard Function)" link Kf_Reset}
@{"Full Reset (Keyboard Function)" link Kf_Full_Reset}
@{"Iconify (Keyboard Function)" link Kf_Iconify}
@{"Toggle ESC (Keyboard Function)" link Kf_Toggle_ESC}
@{"Toggle NumLock (Keyboard Function)" link Kf_Toggle_NumLock}
@{"Toggle Overwrite (Keyboard Function)" link Kf_Toggle_Overwrite}
@{"Suspend (Keyboard Function)" link Kf_Suspend}
@{"Resume (Keyboard Function)" link Kf_Resume}
@{"Abort Expansion (Keyboard Function)" link Kf_Abort_Expansion}
@{"Scroll to Cursor (Keyboard Function)" link Kf_Scroll_to_Cursor}
@{"Rewind History (Keyboard Function)" link Kf_Rewind_History}
@{"Yank (Keyboard Function)" link Kf_Yank}
@{"Generate EOF (Keyboard Function)" link Kf_Generate_EOF}
@{"Display Beep (Keyboard Function)" link Kf_Display_Beep}
@{"Toggle Pause (Keyboard Function)" link Kf_Toggle_Pause}
@{"Help (Keyboard Function)" link Kf_Help}
@{"Fork New Shell (Keyboard Function)" link Kf_Fork_New_Shell}
@{"Insert CSI (Keyboard Function)" link Kf_Insert_CSI}
@{"Insert ESC (Keyboard Function)" link Kf_Insert_ESC}
@{BODY}

@ENDNODE
@NODE Kf_Cursor_Left "Cursor Left (Keyboard Function)"
@TOC Keyboard
Moves the cursor one character to the left. If the cursor is directly right
to printed output, it will stop if the
@{"Don't scroll into the border" link SETVNC_EDIT_1} flag on the first
editor page of the @{"SetVNC program" link SetVNCToc} is set. You may
override this flag temporarely by the "DOS Cursor Mode" in the
@{"Settings menu" link SettingsMenu}.



@ENDNODE
@NODE Kf_Cursor_Right "Cursor Right (Keyboard Function)"
@TOC Keyboard
Moves the cursor one character to the left. If the cursor is directly left
to printed output, it will stop if the
@{"Don't scroll into the border" link SETVNC_EDIT_1} flag on the first
editor page of the @{"SetVNC program" link SetVNCToc} is set. You may
override this flag temporarely by the "DOS Cursor Mode" in the
@{"Settings menu" link SettingsMenu}.
Moves the cursor one character to the right.

@ENDNODE
@NODE Kf_Cursor_Up "Cursor Up keyboard (Keyboard Function)"
@TOC Keyboard
Move the cursor one line upwards on the screen. If the cursor reaches the
upper end of the @{"buffer" link Buffers}, it either inserts a blank line or
stops. This depends on the
@{"Don't scroll into the border" link SETVNC_EDIT_1} flag on the first
editor page of the @{"SetVNC program" link SetVNCToc}.

@ENDNODE
@NODE Kf_Cursor_Down "Cursor Down keyboard (Keyboard Function)"
@TOC Keyboard
Move the cursor downwards one line on the screen. If you reach the lower end
of the @{"display buffer" link Buffers}, ViNCEd inserts a blank line or
stops the cursor there. What happens depends on the
@{"Don't scroll into the border" link SETVNC_EDIT_1} flag on the first
editor page of the @{"SetVNC program" link SetVNCToc}.

@ENDNODE
@NODE Kf_History_Up "History Up (Keyboard Function)"
@TOC Keyboard
Inserts the next available older line of the
@{"command history" link History} at the current cursor position,
and moves the @{"history pointer" link History} one line towards the older
end of the history.


If the end of the history is reached, ViNCEd inserts either a blank line or
"wraps around" to the start of the history. This depends on the
@{"History buffer wraps around" link SETVNC_SHELL_2} flag on the second
shell page of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Kf_History_Down "History Down (Keyboard Function)"
@TOC Keyboard
Inserts the next available newer line of the
@{"command history" link History} at the current cursor position, and moves
the @{"history pointer" link History} one line towards the newer end of the
history.


If the start of the history is reached, ViNCEd inserts either a blank line
or "wraps around" to the end of the history. This depends on the
@{"History buffer wraps around" link SETVNC_SHELL_2} flag on the second
shell page of @{"SetVNC" link SetVNCToc}.

@ENDNODE
@NODE Kf_Search_Partial_Upwards "Search Partial Upwards (Keyboard Function)"
@TOC Keyboard
Takes the user input at the current line up to the cursor position as
@{"template" link Template} to search in the
@{"command history" link History} starting from the current
@{"history pointer" link History} in upwards direction, i.e. towards older
lines.

@ENDNODE
@NODE Kf_Search_Partial_Downwards "Search Partial Downwards (Keyboard Function)"
@TOC Keyboard
Takes the user input at the current line up to the cursor position as
@{"template" link Template} to search in the
@{"command history" link History} starting from the current
@{"history pointer" link History} in downwards direction, i.e. towards newer
lines.

@ENDNODE
@NODE Kf_Search_History_Upwards "Search History Upwards (Keyboard Function)"
@TOC Keyboard
Uses the user input at the cursor position as @{"template" link Template} to
search in the @{"command history" link History} starting from the
@{"history pointer" link History} in upwards direction, i.e. towards older
lines.

@ENDNODE
@NODE Kf_Search_History_Downwards "Search History Downwards (Keyboard Function)"
@TOC Keyboard
Uses the user input at the cursor position as @{"template" link Template} to
search in the @{"command history" link History} starting from the
@{"history pointer" link History} in downwards direction, i.e. towards newer
lines.

@ENDNODE
@NODE Kf_Half_Screen_Left "Half Screen Left (Keyboard Function)"
@TOC Keyboard
Moves the cursor either to the left edge of the visible area, or scrolls the
window leftwards one half window width if it is already at the left edge of
the window. The cursor stops moving at the right border of printed output,
i.e. usually at the prompt of the shell.

@ENDNODE
@NODE Kf_Half_Screen_Right "Half Screen Right (Keyboard Function)"
@TOC Keyboard
Moves the cursor either to the right edge of the visible area, or scrolls
the window rightwards one half window width if it is already at the right
edge.

@ENDNODE
@NODE Kf_Half_Screen_Up "Half Screen Up (Keyboard Function)"
@TOC Keyboard
Moves the cursor either to the top edge of the window, or scrolls the text
upwards one half window height if the cursor is already at the top edge of
the window. If the cursor reaches the upper end of the
@{"display buffer" link Buffers}, ViNCEd inserts either blank lines or stops
there, if the
@{"Don't scroll into the border" link SETVNC_EDIT_1} flag on the first
editor page is set.

@ENDNODE
@NODE Kf_Half_Screen_Down "Half Screen Down (Keyboard Function)"
@TOC Keyboard
Moves the cursor either to the bottom edge of the window, or scrolls the
text downwards one half window height if the cursor is already at the
bottom edge of the window. If the cursor reaches the lower end of the
@{"display buffer" link Buffers}, ViNCEd inserts either blank lines or stops
there, if the
@{"Don't scroll into the border" link SETVNC_EDIT_1} flag on the first
editor page is set.

@ENDNODE
@NODE Kf_To_Left_Border "To Left Border (Keyboard Function)"
@TOC Keyboard
Moves the cursor leftwards either to the start of the line or at least to
the start of the user input data.

@ENDNODE
@NODE Kf_To_Right_Border "To Right Border (Keyboard Function)"
@TOC Keyboard
Moves the cursor rightwards to the end of the line.

@ENDNODE
@NODE Kf_To_Top_of_Screen "To Top of Screen (Keyboard Function)"
@TOC Keyboard
Moves the cursor to the top of the @{"display buffer" link Buffers}.

@ENDNODE
@NODE Kf_To_Bottom_of_Screen "To Bottom of Screen (Keyboard Function)"
@TOC Keyboard
Moves the cursor to the bottom of the @{"display buffer" link Buffers}.

@ENDNODE
@NODE Kf_Prev_Word "Prev Word (Keyboard Function)"
@TOC Keyboard
Moves the cursor to the start of the current @{"word" link Word} or, if
the cursor is already at the start of a word, move it to the start of
the previous word.

@ENDNODE
@NODE Kf_Next_Word "Next Word (Keyboard Function)"
@TOC Keyboard
Moves the cursor to the start of the next @{"word" link Word}.

@ENDNODE
@NODE Kf_Prev_Component "Prev Component (Keyboard Function)"
@TOC Keyboard
If ViNCEd is in @{"shell mode" link ShellMode}, this
@{"keyboard function" link KeyFunction} moves the cursor to the start of the
current @{"component" link Component}. If the cursor was already placed
there, it gets moved to the start of the previous
@{"component" link Component}.


If ViNCEd is NOT in shell mode, this works identical to the
@{"Prev Word" link Kf_Prev_Word} keyboard @{"function" link KeyFunction}.

@ENDNODE
@NODE Kf_Next_Component "Next Component (Keyboard Function)"
@TOC Keyboard
If ViNCEd is in @{"shell mode" link ShellMode}, this
@{"keyboard function" link KeyFunction} moves the cursor to the start of the
next @{"component" link Component}.


If ViNCEd is NOT in shell mode, this works identical to the
@{"Next Word" link Kf_Prev_Word} keyboard @{"function" link KeyFunction}.

@ENDNODE
@NODE Kf_Home "Home (Keyboard Function)"
@TOC Keyboard
Moves the cursor to the leftmost position of the topmost row of the
@{"display buffer" link Buffers}.

@ENDNODE
@NODE Kf_End "End (Keyboard Function)"
@TOC Keyboard
Moves the cursor to the end of the bottommost row of the
@{"display buffer" link Buffers}.

@ENDNODE
@NODE Kf_Scroll_Up "Scroll Up (Keyboard Function)"
@TOC Keyboard
Scrolls the contents of the window downwards one line, hence moves the
buffer position upwards. The cursor position is "not changed"; this means
however different things, dependent on whether the
@{"XTerm/CON: cursor mode" link SETVNC_EDIT_1} is set or not. If this flag is not set, the
cursor will keep its physical position on the screen and the buffer will
scroll under the cursor; that is, the cursor position relative to the text
WILL change, even though the cursor does not move. If the flag IS set, the
cursor will move with the buffer, and hence move physical. However, it will
not change its position relative to the buffer.


This flag can be found on the @{"first edit page" link SETVNC_EDIT_1} of the
@{"SetVNC program" link SetVNCToc}.

@ENDNODE
@NODE Kf_Scroll_Down "Scroll Down (Keyboard Function)"
@TOC Keyboard
Scrolls the contents of the window upwards one line, hence moves the buffer
position downwards. The cursor position is "not changed"; this means however
different things, dependent on whether the
@{"XTerm/CON: cursor mode" link SETVNC_EDIT_1} is set or not. If this flag
is not set, the cursor will keep its physical position on the screen and the
buffer will scroll under the cursor; that is, the cursor position relative
to the text WILL change, even though the cursor does not move. If the flag
IS set, the cursor will move with the buffer, and hence move physical.
However, it will not change its position relative to the buffer.


This flag can be found on the @{"first edit page" link SETVNC_EDIT_1} of the
@{"SetVNC program" link SetVNCToc}.

@ENDNODE
@NODE Kf_Scroll_Half_Screen_Up "Scroll Half Screen Up (Keyboard Function)"
@TOC Keyboard
Scrolls the contents of the window downwards half the window-size
downwards, hence moves the buffer position upwards. The cursor position is
"not changed"; this means however different things, dependent on whether the
@{"XTerm/CON: cursor mode" link SETVNC_EDIT_1} is set or not. If this flag
is not set, the cursor will keep its physical position on the screen and the
buffer will scroll under the cursor; that is, the cursor position relative
to the text WILL change, even though the cursor does not move. If the flag
IS set, the cursor will move with the buffer, and hence move physical.
However, it will not change its position relative to the buffer.


This flag can be found on the @{"first edit page" link SETVNC_EDIT_1} of the
@{"SetVNC program" link SetVNCToc}.

@ENDNODE
@NODE Kf_Scroll_Half_Screen_Down "Scroll Half Screen Down (Keyboard Function)"
@TOC Keyboard
Scrolls the contents of the window downwards half the window-size
upwards, hence moves the buffer position downwards. The cursor position is
"not changed"; this means however different things, dependent on whether the
@{"XTerm/CON: cursor mode" link SETVNC_EDIT_1} is set or not. If this flag
is not set, the cursor will keep its physical position on the screen and the
buffer will scroll under the cursor; that is, the cursor position relative
to the text WILL change, even though the cursor does not move. If the flag
IS set, the cursor will move with the buffer, and hence move physical.
However, it will not change its position relative to the buffer.


This flag can be found on the @{"first edit page" link SETVNC_EDIT_1} of the
@{"SetVNC program" link SetVNCToc}.

@ENDNODE
@NODE Kf_Send_Inputs "Send Inputs (Keyboard Function)"
@TOC Keyboard
Collects the user inputs from the current cursor line and sends them as to
whatever program that wants to receive them, i.e. which called Read() on a
ViNCEd stream. Printed characters as the shell prompt and other output will
be ignored and is not being sent. The user inputs are then appended to the
@{"command history" link History}. A new blank line is inserted below the
current line, and the cursor is placed at the beginning of the inserted
line.


Hence, this implements the usual "Return" key function for a shell.


If the @{"Standard CR insertion at start of line" link SETVNC_EDIT_3} is not
checked, this function behaves slightly different at the start of the line.
Instead of inserting a line below the current line, a blank line is inserted
ON TOP of the current line. The cursor is then moved to the lower, old line.

@ENDNODE
@NODE Kf_Split_Line "Split Line (Keyboard Function)"
@TOC Keyboard
Inserts a new line right under the current line and splits the current line
at the cursor position. The characters behind and under the cursor enter the
inserted line, the characters in front of the cursor remain at their
position. The cursor is then set to the beginning of the inserted line. At
no point any data is sent to a program, nor is the
@{"command history" link History} altered in any way.


If the @{"Standard CR insertion at start of line" link SETVNC_EDIT_3} is not
checked, this function behaves slightly different at the start of the line.
Instead of inserting a line below the current line, a blank line is inserted
ON TOP of the current line. The cursor is then moved to the lower, old line.


Hence, this implements the "Return" key function of an editor.

@ENDNODE
@NODE Kf_Insert_Ctrl_J "Insert ^J (Keyboard Function)"
@TOC Keyboard
Inserts a Ctrl-J = LF ASCII character at the cursor position. This character
will appear as an inverse
@{FG Background}@{BG Text}J@{FG Text}@{BG Background} on the screen.


Using this command, two or more AmigaDos commands can be put in one line and
will be executed sequentially. For example, the command line


1.SYS:> list@{FG Background}@{BG Text}J@{FG Text}@{BG Background}dir


will list the current directory twice, first with the "list" command and a
second time with the "dir" command.

@ENDNODE
@NODE Kf_Send_Complete_Line "Send Complete Line (Keyboard Function)"
@TOC Keyboard
Collects the all inputs from the current cursor line and sends them as to
whatever program that wants to receive them, i.e. which called Read() on a
ViNCEd stream. This keyboard function will sent all characters on the line,
including printed characters, and will append the complete line "as is" to
the @{"command history" link History}.


In order not to make this completely useless by sending the shell prompt,
this function implements a special "trick": If the cursor is placed on
the same line, behind the position where the last output left it, then only
the characters starting from that position up to the end of the line are
sent. If the cursor is moved in front of this position, or to a different
line, then ALL characters, including a possible shell prompt are sent.

This method was already used by the Atari XL operating system and worked
well in the 8-bit times, so this will hopefully prove useful as well.

@ENDNODE
@NODE Kf_Line_Feed "Line Feed (Keyboard Function)"
@TOC Keyboard
Inserts a blank line under the current line and moves the cursor to the
start of the blank line. Does not sent any data, it just moves the cursor,
nothing more.

@ENDNODE
@NODE Kf_TAB_Forwards "TAB Forwards (Keyboard Function)"
@TOC Keyboard
In @{"insertion mode" link Kf_Toggle_Overwrite}, this function inserts blank
spaces up to the next tabulator stop, and places the cursor at this
tabulator stop.


No spaces are inserted in @{"overwrite mode" link Kf_Toggle_Overwrite},
only the cursor gets moved.

@ENDNODE
@NODE Kf_TAB_Backwards "TAB Backwards (Keyboard Function)"
@TOC Keyboard
In @{"insertion mode" link Keyboard}, this function removes characters
backwards, starting at the cursor position until the previous tabulator stop
is reached. The cursor is then moved to that position.


Nothing is removed in @{"overwrite mode" link Keyboard}, only the
cursor gets moved.

@ENDNODE
@NODE Kf_Expand_Path "Expand Path (Keyboard Function)"
@TOC Keyboard
The first @{"TAB expansion" link TabExpand} function in forwards moving
direction.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Backwards "Expand Backwards (Keyboard Function)"
@TOC Keyboard
The first @{"TAB expansion" link TabExpand} function in backwards moving
direction.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Short "Expand Short (Keyboard Function)"
@TOC Keyboard
The second @{"TAB expansion" link TabExpand} function in forwards moving
direction.


The name of this function indicates that it should be used to run a TAB
expansion using a shorter search path, and the default settings are
setup just in this way. However, you may use this function for whatever
you like simply by changing its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Short_Bkwds "Expand Short Bkwds (Keyboard Function)"
@TOC Keyboard
The second @{"TAB expansion" link TabExpand} function in backwards moving
direction.


The name of this function indicates that it should be used to run a TAB
expansion using a shorter search path, and the default settings are
setup just in this way. However, you may use this function for whatever
you like simply by changing its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Devices "Expand Devices (Keyboard Function)"
@TOC Keyboard
The third @{"TAB expansion" link TabExpand} function in forwards moving
direction.


The name of this function indicates that it should be used to expand a
device name, and the default settings are
setup just in this way. However, you may use this function for whatever
you like simply by changing its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Devs_Bkwds "Expand Devs Bkwds (Keyboard Function)"
@TOC Keyboard
The third @{"TAB expansion" link TabExpand} function in backwards moving
direction.


The name of this function indicates that it should be used to expand a
device name, and the default settings are
setup just in this way. However, you may use this function for whatever
you like simply by changing its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Dirs "Expand Dirs (Keyboard Function)"
@TOC Keyboard
The fourth @{"TAB expansion" link TabExpand} function in forwards moving
direction.


The name of this function indicates that it should be used to expand a
directory name, and the default settings are
setup just in this way. However, you may use this function for whatever
you like simply by changing its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Dirs_Bkwds "Expand Dirs Bkwds (Keyboard Function)"
@TOC Keyboard
The fourth @{"TAB expansion" link TabExpand} function in backwards moving
direction.


The name of this function indicates that it should be used to expand a
directory name, and the default settings are setup just in this way.
However, you may use this function for whatever you like simply by changing
its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Icons "Expand Icons (Keyboard Function)"
@TOC Keyboard
The fifth @{"TAB expansion" link TabExpand} function in forwards moving
direction.


The name of this function indicates that it should be used to find icon
names, and the default settings are setup just in this way. However, you may
use this function for whatever you like simply by changing
its @{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Icons_Bkwds "Expand Icons Bkwds (Keyboard Function)"
@TOC Keyboard
The fifth @{"TAB expansion" link TabExpand} function in backwards moving
direction.


The name of this function indicates that it should be used to find icon
names, and the default settings are setup just in this way. However, you may
use this function for whatever you like simply by changing its
@{"settings" link Tab_Settings}.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Alt "Expand Alt (Keyboard Function)"
@TOC Keyboard
The sixth @{"TAB expansion" link TabExpand} function in forwards moving
direction.


This alternate expansion function is reserved for whatever you might need it
for - just adjust the @{"settings" link Tab_Settings} to whatever pleases
you.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Expand_Alt_Bkwds "Expand Alt Bkwds (Keyboard Function)"
@TOC Keyboard
The sixth @{"TAB expansion" link TabExpand} function in backwards moving
direction.


This alternate expansion function is reserved for whatever you might need it
for - just adjust the @{"settings" link Tab_Settings} to whatever pleases
you.


Reads the argument at the cursor position, interprets it as a
@{"template" link Template} and searches for possible expansions. Details
about this process are found in a @{"different section" link TabExpand}.

@ENDNODE
@NODE Kf_Send_Ctrl_C "Send ^C (Keyboard Function)"
@TOC Keyboard
Sends the break signal 12 to the currently running process. The signal gets
NOT transmitted to background processes, such as processes started with
"Run" or processes launched with the "fork" @{"script" link Scripts}.


This signal is mainly used to abort a running program.

@ENDNODE
@NODE Kf_Send_Ctrl_D "Send ^D (Keyboard Function)"
@TOC Keyboard
Sends the break signal 13 to the currently running process. The signal gets
NOT transmitted to background processes, such as processes started with
"Run" or processes launched with the "fork" @{"script" link Scripts}.


This signal is mainly used to abort shell scripts.

@ENDNODE
@NODE Kf_Send_Ctrl_E "Send ^E (Keyboard Function)"
@TOC Keyboard
Sends the break signal 14 to the currently running process. The signal gets
NOT transmitted to background processes, such as processes started with
"Run" or processes launched with the "fork" @{"script" link Scripts}.


This signal is not widely used in the current AmigaDos.

@ENDNODE
@NODE Kf_Send_Ctrl_F "Send ^F (Keyboard Function)"
@TOC Keyboard
Sends the break signal 15 to the currently running process. The signal gets
NOT transmitted to background processes, such as processes started with
"Run" or processes launched with the "fork" @{"script" link Scripts}.


This signal is not widely used in the current AmigaDos.

@ENDNODE
@NODE Kf_Send_Ctrl_C_To_All "Send ^C to All (Keyboard Function)"
@TOC Keyboard
Sends the break signal 12 to the currently running process and all processes
started with "Run" that share the same @{"owner" link Owners} as the
foreground process. These are usually called "background processes" in the
AmigaDos terminology - however, "background" means something different for
the ViNCEd @{"job control" link JobCtrl} mechanism. These "real background"
processes are not affected by this function.


This signal is mainly used to abort a running program.

@ENDNODE
@NODE Kf_Send_Ctrl_D_To_All  "Send ^D to All (Keyboard Function)"
@TOC Keyboard
Sends the break signal 13 to the currently running process and all processes
started with "Run" that share the same @{"owner" link Owners} as the
foreground process. These are usually called "background processes" in the
AmigaDos terminology - however, "background" means something different for
the ViNCEd @{"job control" link JobCtrl} mechanism. These "real background"
processes are not affected by this function.


This signal is mainly used to abort shell scripts.

@ENDNODE
@NODE Kf_Send_Ctrl_E_To_All  "Send ^E to All (Keyboard Function)"
@TOC Keyboard
Sends the break signal 14 to the currently running process and all processes
started with "Run" that share the same @{"owner" link Owners} as the
foreground process. These are usually called "background processes" in the
AmigaDos terminology - however, "background" means something different for
the ViNCEd @{"job control" link JobCtrl} mechanism. These "real background"
processes are not affected by this function.


This signal is not widely used in the current AmigaDos.

@ENDNODE
@NODE Kf_Send_Ctrl_F_To_All  "Send ^F to All (Keyboard Function)"
@TOC Keyboard
Sends the break signal 15 to the currently running process and all processes
started with "Run" that share the same @{"owner" link Owners} as the
foreground process. These are usually called "background processes" in the
AmigaDos terminology - however, "background" means something different for
the ViNCEd @{"job control" link JobCtrl} mechanism. These "real background"
processes are not affected by this function.


This signal is not widely used in the current AmigaDos.

@ENDNODE
@NODE Kf_Delete_Forwards "Delete Forwards (Keyboard Function)"
@TOC Keyboard
Deletes the character in front of the cursor and scrolls the remaining
characters to the left. Thus, this implements the standard function of the
@{FG Background}@{BG Text}Del@{FG Text}@{BG Background} key.

@ENDNODE
@NODE Kf_Delete_Backwards "Delete Backwards (Keyboard Function)"
@TOC Keyboard
Deletes the character in front of the cursor and scrolls the rest of the
line to the left. Thus, this implements the standard function of the
@{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background} key.

@ENDNODE
@NODE Kf_Delete_Full_Line "Delete Full Line (Keyboard Function)"
@TOC Keyboard
Removes the current cursor line completely and scrolls the lines below
upwards.

@ENDNODE
@NODE Kf_Cut_Full_Line "Cut Full Line (Keyboard Function)"
@TOC Keyboard
Removes the current cursor line completely and places all user inputs of
that line in the @{"yank buffer" link Yank}. The lines below the deleted
line are scrolled upwards.

@ENDNODE
@NODE Kf_Delete_Inputs "Delete Inputs (Keyboard Function)"
@TOC Keyboard
Removes all user inputs from the current cursor line.

@ENDNODE
@NODE Kf_Cut_Inputs "Cut Inputs (Keyboard Function)"
@TOC Keyboard
Removes all user inputs from the current line and places them in the
@{"yank buffer" link Yank}.

@ENDNODE
@NODE Kf_Delete_Word_Fwds "Delete Word Fwds (Keyboard Function)"
@TOC Keyboard
Deletes all inputs right to and under the cursor in the current
@{"word" link Word}, up to the end of the word and scrolls the remaining
characters inwards.

@ENDNODE
@NODE Kf_Cut_Word_Fwds "Cut Words Fwds (Keyboard Function)"
@TOC Keyboard
Deletes all inputs under and right to the cursor up to the end of the
@{"word" link Word} the cursor is placed in. The deleted characters are
copied into the @{"Yank buffer" link Yank} and the remaining characters are
scrolled leftwards.

@ENDNODE
@NODE Kf_Delete_Word_Bkwds "Delete Word Bkwds (Keyboard Function)"
@TOC Keyboard
Deletes all inputs left of the cursor up to the beginning of the
@{"word" link Word} under the cursor, and scrolls the remaining characters
backwards.

@ENDNODE
@NODE Kf_Cut_Word_Bkwds "Cut Word Bkwds (Keyboard Function)"
@TOC Keyboard
Deletes all inputs left to the cursor up to the beginning of the
@{"word" link Word} the cursor is placed in, copies these characters to the
@{"Yank" link Yank} buffers and scrolls the remaining characters inwards.

@ENDNODE
@NODE Kf_Delete_Component_Fwds "Delete Component Fwds (Keyboard Function)"
@TOC Keyboard
Deletes all inputs under and right to the cursor up to the end of the
@{"component" link Component} and scrolls the remaining characters inwards.

@ENDNODE
@NODE Kf_Cut_Component_Fwds "Cut Component Fwds (Keyboard Function)"
@TOC Keyboard
Removes all inputs right to and under the current cursor position up to
the end of the @{"component" link Component}, copies the characters to the
@{"Yank" link Yank} buffer and scrolls the remaining line inwards.

@ENDNODE
@NODE Kf_Delete_Component_Bkwds "Delete Component Bkwds (Keyboard Function)"
@TOC Keyboard
Deletes all inputs left to the cursor position up to the beginning of
the @{"component" link Component} and scrolls the rest of the line
leftwards.

@ENDNODE
@NODE Kf_Cut_Component_Bkwds "Cut Component Bkwds (Keyboard Function)"
@TOC Keyboard
Removes all inputs left to the cursor position up to the beginning of
the @{"component" link Component} under the cursor, copies the deleted
characters to the @{"Yank" link Yank} buffer and scrolls the end of the line
back leftwards.

@ENDNODE
@NODE Kf_Delete_End_of_Line "Delete End of Line (Keyboard Function)"
@TOC Keyboard
Deletes all inputs right to and under the cursor up to the end of the
line.

@ENDNODE
@NODE Kf_Cut_End_of_Line "Cut End of Line (Keyboard Function)"
@TOC Keyboard
Removes all inputs right to and under the cursor and copies the removed
characters to the @{"Yank" link Yank} buffer.

@ENDNODE
@NODE Kf_Delete_Start_of_Line "Delete Start of Line (Keyboard Function)"
@TOC Keyboard
Deletes all inputs left to the cursor position and scrolls the remaining
line backwards.

@ENDNODE
@NODE Kf_Cut_Start_of_Line "Cut Start of Line (Keyboard Function)"
@TOC Keyboard
Removes the inputs left of the cursor and copies these characters to the
@{"Yank" link Yank} buffer. The remaining line is then scrolled backwards.

@ENDNODE
@NODE Kf_Delete_End_of_Display "Delete End of Display (Keyboard Function)"
@TOC Keyboard
Deletes all characters at, right to and under the cursor position.

@ENDNODE
@NODE Kf_Form_Feed "Form Feed (Keyboard Function)"
@TOC Keyboard
Clears the complete @{"lower display buffer" link Buffers} and places the
cursor in the upper left corner of the window. If the window is in
@{"RAW mode" link ConsoleModes}, a "Form Feed" character ASCII 0C is send to
the receiver.

@ENDNODE
@NODE Kf_Clear_Screen "Clear Screen (Keyboard Function)"
@TOC Keyboard
Erases the complete @{"lower display buffer" link Buffers} and places the
cursor in the upper left corner of the window. If the window is in
@{"Shell mode" link ShellMode} and a shell is currently waiting for inputs,
the shell prompt is requested again.

@ENDNODE
@NODE Kf_Cut "Cut (Keyboard Function)"
@TOC Keyboard
Removes the currently marked @{"block" link BlockOps} from the
@{"display buffer" link Buffers} and copies it to the clipboard.

@ENDNODE
@NODE Kf_Copy "Copy (Keyboard Function)"
@TOC Keyboard
Copies the currently marked @{"block" link BlockOps} to the clipboard.

@ENDNODE
@NODE Kf_Paste "Paste (Keyboard Function)"
@TOC Keyboard
Inserts the clipboard contents into the input stream as if you've typed the
clipboard contents yourself with the keyboard.

@ENDNODE
@NODE Kf_Hide "Hide (Keyboard Function)"
@TOC Keyboard
Removes the block mark from all characters in the @{"block" link BlockOps},
i.e. un-highlights the block.

@ENDNODE
@NODE Kf_Select_All "Select All (Keyboard Function)"
@TOC Keyboard
Selects the complete contents of the @{"display buffers" link Buffers} and
marks them as a @{"block" link BlockOps}.

@ENDNODE
@NODE Kf_Copy_Quiet "Copy Quiet (Keyboard Function)"
@TOC Keyboard
Copies the currently marked @{"block" link BlockOps} to the clipboard, but
unlike the @{"Copy" link Kf_Copy} function, this does not hide the marked
@{"block" link BlockOps}

@ENDNODE
@NODE Kf_Reset "Reset (Keyboard Function)"
@TOC Keyboard
Erases the @{"lower display buffer" link Buffers} and resets the mode flags
of the terminal emulation to their preferences values and restores the
colors selected in the preferences setting of the window.

@ENDNODE
@NODE Kf_Full_Reset "Full Reset (Keyboard Function)"
@TOC Keyboard
Erases all @{"display buffers" link Buffers} completely, clears the
@{"command history" link History} and restores the mode flags and the colors
of the window to the selected preference values.

@ENDNODE
@NODE Kf_Iconify "Iconify (Keyboard Function)"
@TOC Keyboard
Iconifies the ViNCEd window as if the iconification
@{"gadget" link Gadgets} or the "Iconify"
@{"menu item" link ProjectMenu} has been selected.
@ENDNODE
@NODE Kf_Toggle_ESC "Toggle ESC (Keyboard Function)"
@TOC Keyboard
Toggles the ESC flag on/off. If a control function is found in the input
stream with the ESC flag enabled, the CSI sequence of this control function
is inserted literally into the line instead of getting interpreted by the
keyboard parser. This is especially useful to insert control characters into
the input stream, as for example as control characters for a string to be
printed by "echo".


This function works identically to the
@{FG Background}@{BG Text}ESC@{FG Text}@{BG Background} key of the Atari 8
bit computers.

@ENDNODE
@NODE Kf_Toggle_NumLock "Toggle NumLock (Keyboard Function)"
@TOC Keyboard
Toggles the keyboard qualifier "NumLock" on/off. Some keyboard functions are
only recognized if "NumLock" is enabled. This is especially useful for the
keys of the numeric keypad: These keys could be @{"bound" link KeyBind} to
work as cursor keys if "NumLock" is enabled.

@ENDNODE
@NODE Kf_Toggle_Overwrite "Toggle Overwrite (Keyboard Function)"
@TOC Keyboard
Toggles the overwrite flag on/off. If overwrite is enabled, characters typed
on the keyboard will write over the characters already in the
@{"display buffer" link Buffers} instead of getting inserted.

@ENDNODE
@NODE Kf_Suspend "Suspend (Keyboard Function)"
@TOC Keyboard
Suspends, i.e. stop all output. This is also known as "XOFF" function.

@ENDNODE
@NODE Kf_Resume "Resume (Keyboard Function)"
@TOC Keyboard
Resumes stopped output. This is also known as "XON" function.

@ENDNODE
@NODE Kf_Abort_Expansion "Abort Expansion (Keyboard Function)"
@TOC Keyboard
Aborts a currently running @{"TAB expansion" link TabExpand}. This is
implicit for most keyboard functions anyhow.

@ENDNODE
@NODE Kf_Scroll_to_Cursor "Scroll to Cursor (Keyboard Function)"
@TOC Keyboard
In case the cursor has been scrolled out of the window, this function
scrolls the window back such that the cursor gets visible again. This is
implicit for most keyboard functions anyhow.

@ENDNODE
@NODE Kf_Rewind_History "Rewind History (Keyboard Function)"
@TOC Keyboard
Removes all user inputs from the current line and rewinds the
@{"command history" link History}.

@ENDNODE
@NODE Kf_Yank "Yank (Keyboard Function)"
@TOC Keyboard
Inserts the contents of the @{"Yank buffer" link Yank} at the cursor
position.

@ENDNODE
@NODE Kf_Generate_EOF "Generate EOF (Keyboard Function)"
@TOC Keyboard
Dependent on the @{"Call macro to close window" link SETVNC_SHELL_1} flag,
this selects either one of the two "Close" system @{"macros" link Macros} or
sends an "End Of File" condition to the receiver. This function is invoked
by the @{"close gadget" link Gadgets} of the window, too.

@ENDNODE
@NODE Kf_Display_Beep "Display Beep (Keyboard Function)"
@TOC Keyboard
Beeps the screen. Dependent on the settings of the "Sound" system
preferences, this may also cause an audible beep.

@ENDNODE
@NODE Kf_Toggle_Pause "Toggle Pause (Keyboard Function)"
@TOC Keyboard
This toggles the output on and off; if the function is invoked the first
time, output will be stopped. On the second time, output will resume.

@ENDNODE
@NODE Kf_Help "Help (Keyboard Function)"
@TOC Keyboard
Invokes the "Help" system @{"macro" link Macros}, or sends the Help
@{"CSI sequence" link KeyboardList} if the window is in
@{"RAW Mode" link ConsoleModes}.

@ENDNODE
@NODE Kf_Fork_New_Shell "Fork New Shell (Keyboard Function)"
@TOC Keyboard
Forks a new shell in the current window, sending the currently running
@{"job" link JobCtrl} to background. This is the keyboard function
responsible for the @{"Ctrl-Z" link CtrlZ} feature of ViNCEd.

@ENDNODE
@NODE Kf_Insert_CSI "Insert CSI (Keyboard Function)"
@TOC Keyboard
Inserts a literal CSI (ANSI 9B) character into the display buffer. This
might be useful as an argument of the "echo" command to print a control
sequence.

@ENDNODE
@NODE Kf_Insert_ESC "Insert ESC (Keyboard Function)"
@TOC Keyboard
Inserts a literal ESC (ASCII 1B) character into the display buffer. This
might be useful as an argument to the "echo" command to allow printing of
control sequences.

@ENDNODE

@REMARK Nodes about SetVNC
@NODE SetVNCGui "The graphical Interface of SetVNC"
@TOC SetVNCToc
If you load @{"SetVNC" link SetVNCToc} without any arguments, with
the command "SetVNC Prefs", or by clicking on the "SetVNC" icon in the
"Prefs" drawer, a graphical user interface will be build.


Because the screen is much to small to hold all gadgets necessary to control
ViNCEd, the settings is split into several @{"pages" link PagesToc}, grouped
by function. Most @{"pages" link PagesToc} are itself split into a front
page and one or more back pages which can be selected by the arrow gadgets "
« " and " » " at the top right edge of each page. Left to these arrow
gadgets is the "Help" button which invokes context sensitive help about the
page shown. If these gadgets do NOT work, please check that the path to this
guide, which can be found in the
@{"first system page" link SETVNC_SYSTEM_1} is setup properly. If not,
correct it with the string gadget on this page, or locate the guide using a
requester by pressing the gadget left to it.


Additional to the "Help" gadget, each page has a row of four or three
gadgets at the bottom, used to accept or discard the made changes. The
second gadget from the right, labeled "To Window", is not present if the
@{"argument" link SetVNCShellArgs} "Prefs" was used to invoke SetVNC as a
preferences editor.


@{B}Save@{UB}

Save the changes to a place where they will be loaded each time the system
restarts and use the settings for all new windows to be opened.

@{B}WARNING:@{UB}       Pressing this button DOES NOT change the settings of
the windows already open. Their settings are under control of the programs
running in them, not of SetVNC!


@{B}Use@{UB}

Use the settings for all new ViNCEd windows, but do not save. The settings
will be reset when the system gets rebooted.


@{B}WARNING:@{UB}       Typing "Use" WILL NOT change the settings of the
windows already open! IT WILL ONLY CHANGE THE DEFAULTS FOR NEW WINDOWS.


Pressing either "Use" or "Save" will also change the settings in the
currently active window, as if "To Window" has been selected as well.


@{B}To Window@{UB}

Install the settings in the window which was used to invoke SetVNC. This
gadget is only present if "SetVNC" was NOT invoked as a preferences editor,
i.e. the @{"PREFS" link SetVNCArgs} argument was NOT given.

It DOES NOT touch the settings of all other windows nor the settings of
windows to be created.


@{B}Cancel@{UB}

Aborts the editor and discards the changes; discards also all
@{"shell arguments" link SetVNCShellArgs}.


The pages itself are selected with the "card-index" like gadget on top of
the window. The @{"page index" link PagesToc} is found in a
@{"different section" link PagesToc}.

@ENDNODE
@NODE PagesToc "The control pages of SetVNC"
@TOC SetVNCToc
Here's the index of the "Pages" of the SetVNC program. More details about
how they work can be obtained by following the links below, some general
remarks about them are in the @{"GUI interface section" link SetVNCGui}.

@{CODE}

        @{"The About Page" link SETVNC_ABOUT}

        @{"The first Macros Page" link SETVNC_MACROS}
                @{"The second Macros page" link SETVNC_MACROS}
                @{"The third Macros page" link SETVNC_MACROS_3}

        @{"The first Keyboard Page" link SETVNC_KEYBOARD_1}
                @{"The second Keyboard Page" link SETVNC_KEYBOARD_2}

        @{"The first Edit Page" link SETVNC_EDIT_1}
                @{"The second Edit Page" link SETVNC_EDIT_2}
                @{"The third Edit Page" link SETVNC_EDIT_3}
                @{"The fourth Edit Page" link SETVNC_EDIT_4}

        @{"The first Shell Page" link SETVNC_SHELL_1}
                @{"The second Shell Page" link SETVNC_SHELL_2}
                @{"The third Shell Page" link SETVNC_SHELL_3}
                @{"The fourth Shell Page" link SETVNC_SHELL_4}
                @{"The fifth Shell Page" link SETVNC_SHELL_5}
                @{"The sixth Shell Page" link SETVNC_SHELL_6}
                @{"The seventh Shell Page" link SETVNC_SHELL_7}

        @{"The first Window Page" link SETVNC_WINDOW_1}
                @{"The second Window Page" link SETVNC_WINDOW_2}
                @{"The third Window Page" link SETVNC_WINDOW_3}

        @{"The first Timing page" link SETVNC_TIMING_1}

        @{"The first System Page" link SETVNC_SYSTEM_1}
                @{"The second System Page" link SETVNC_SYSTEM_2}
                @{"The third System Page" link SETVNC_SYSTEM_3}
                @{"The fourth System Page" link SETVNC_SYSTEM_4}

@{CODE}

@ENDNODE
@NODE SetVNCArgs "Shell and Workbench Operation of SetVNC"
@TOC SetVNCToc
The @{"SetVNC" link SetVNCToc} program can be invoked from both the
workbench and the shell. In the @{"Shell operation" link SetVNCShellArgs},
arguments are given on the command line, whereas in
@{"Workbench operation" link SetVNCToolTypes} the ToolTypes of the SetVNC
icon are parsed. Invoking SetVNC from the workbench is usually restricted to
setup the global preferences of ViNCEd, whereas you may use SetVNC from the
shell to adjust the ViNCEd settings of the window you invoked SetVNC from
"on the fly".


Besides preferences and settings control, the SetVNC program does even more:


It loads the ViNCEd main library and replaces the standard CON: handler on
request, it offers commands for @{"job control" link SetVNCJobs} and for
@{"loading and saving" link SetVNCIO} the various @{"buffers" link Buffers}
of ViNCEd, as the @{"command history" link History} and the
@{"review buffer" link Buffers}. It loads this guide, too, if help is
requested by pressing the
@{FG Background}@{BG Text}Help@{FG Text}@{BG Background} key in the shell.

It can also be used to check whether the window SetVNC was
invoked from is a ViNCEd window or not and is therefore useful in various
@{"scripts" link Scripts} to enable special ViNCEd improvements.


Further details are found by following these links:

        @{"Workbench ToolTypes                                              " link SetVNCToolTypes }

        @{"Shell Arguments                                                  " link SetVNCShellArgs }

        @{"Job Control                                                      " link SetVNCJobs }

        @{"Buffer input/output                                              " link SetVNCIO }


@ENDNODE
@NODE SetVNCToolTypes "Workbench ToolTypes of the SetVNC program"
@TOC SetVNCToc
The @{"SetVNC" link SetVNCToc} program can also invoked from the workbench, mostly used as a
preference editor. It recognizes the following tooltypes, which can be set
in the usual way, by the "Information" item in the workbench menu:


@{B}WINDOW=path@{UB}

Specify the window SetVNC should appear in. This tooltype @{B}MUST BE
PRESENT@{UB}, and it @{B}MUST@{UB} be a path to a ViNCEd window. Details
about the path are found in the @{"window path section" link OpenPath}.


@{B}ACTION=args@{UB}

Specifies the commands that SetVNC should perform. The "args" string is a
list of @{"shell arguments" link SetVNCShellArgs}. They are passed to SetVNC
as if it was called from the shell. The complete list of shell arguments is
in the @{"shell arguments section" link SetVNCShellArgs}.

Most useful is the action list "LOAD GLOBAL MODIFY PREFS", which invokes
SetVNC as a preferences editor.


@{B}HELPPATH=path@{UB}

Specifies the complete path to this guide. In fact, this is the place where
SetVNC looks first to find the guide, aside from a file "VNCGuide.path" in
the ENVARC: drawer. This tooltype, as well as the environment variable gets
adjusted if you change the guide path in the
@{"first system page" link SETVNC_SYSTEM_1}. However, you shouldn't need to
modify the environment variable as well as the tooltype by hand; it's setup
correctly by the installation script and should be modified exclusively by
SetVNC.

@ENDNODE
@NODE SetVNCShellArgs "Shell Arguments of the SetVNC program"
@TOC SetVNCToc
The power of the SetVNC command is the shell interface. It is possible to
change most of the parameters of ViNCEd by this little program "on line" by
using the build-in @{"graphical user interface" link SetVNCGui}, or by
invoking it from the shell for changing parameters in a script file. Except
for preference adjustment, SetVNC manages, too, certain ViNCEd specific
features as reading or writing the @{"display buffers" link Buffers}, or
@{"job control" link SetVNCJobs} related functions.


Just an important note at this place:

@{B}Do NOT redirect the output of SetVNC to NIL:.@{UB} This won't work. The
output stream is needed by SetVNC to identify the ViNCEd window it is
working in. If required, use the @{"QUIET" link Ca_QUIET} argument below.



The complete list of recognized arguments can be asked for with the command
line
@{B}

1.SYS:> SetVNC ?@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}

@{UB}
as usual. The type of the argument is indicated by a forwards slash "/"
following the argument:


@{B}/S@{UB} is a switch argument. If present, it enables a certain feature. No
parameters are required.


@{B}/K@{UB} is a key word argument. It takes one or several sub arguments and
their parameters to control a specific feature. Most noticeable are keyword
arguments that take either the switches "ON/S" or "OFF/S" as sub arguments.
These enable or disable certain features of ViNCEd, identical to those
controlled by the @{"GUI" link SetVNCGui}.


@{B}/N@{UB} identifies arguments requiring numeric parameters.


@{B}(no slash)@{UB} identifies arguments taking strings as parameters.


Here's now the list of all shell arguments. Just click on an item to see
what this specific argument does:
@{CODE}

@{"QUIET/S" link Ca_QUIET}
@{"MOUNT/K (OVERRIDE/S AS)" link Ca_MOUNT}
@{"HELP/S" link Ca_HELP}
@{"BACKGROUND/S" link Ca_BACKGROUND}
@{"FOREGROUND/K (OTHER/S CLI/N)" link Ca_FOREGROUND}
@{"FREEPOINTER/K (ALL/S)" link Ca_FREEPOINTER}
@{"SETCONSOLE/S" link Ca_SETCONSOLE}
@{"LOAD/K (PREFS/S GLOBAL/S WINDOW/S DEFAULT/S LAST/S FROM)" link Ca_Load}
@{"PREFS/S" link Ca_PREFS}
@{"PUT/K (SCREEN HISTORY)" link Ca_PUT}
@{"GET/K (SCREEN HISTORY)" link Ca_GET}
@{"RESET/S" link Ca_RESET}
@{"DOSCURSOR/K (ON/S OFF/S)" link Fl_DOSCURSOR}
@{"CRINSERT/K (ON/S OFF/S)" link Fl_CRINSERT}
@{"OVERWRITE/K (ON/S OFF/S)" link Fl_OVERWRITE}
@{"WRAP/K (ON/S OFF/S)" link Fl_WRAP}
@{"SMARTCLOSE/K (ON/S OFF/S)" link Fl_SMARTCLOSE}
@{"SAFERCLOSE/K (ON/S OFF/S)" link Fl_SAFERCLOSE}
@{"DISABLEPROPX/K (ON/S OFF/S)" link Fl_DISABLEPROPX}
@{"DISABLEPROPY/K (ON/S OFF/S)" link Fl_DISABLEPROPY}
@{"CLOSEREQ/K (ON/S OFF/S)" link Fl_CLOSEREQ}
@{"CLOSEQUEUE/K (ON/S OFF/S)" link Fl_CLOSEQUEUE}
@{"CUTUSER/K (ON/S OFF/S)" link Fl_CUTUSER}
@{"REBUILDDELAY/K (ON/S OFF/S)" link Fl_REBUILDDELAY}
@{"AUTOCOPY/K (ON/S OFF/S)" link Fl_AUTOCOPY}
@{"NUMPADMODE/K (ON/S OFF/S)" link Fl_NUMPADMODE}
@{"SCROLLBORDERS/K (ON/S OFF/S)" link Fl_SCROLLBORDERS}
@{"TYPEAHEAD/K (ON/S OFF/S)" link Fl_TYPEAHEAD}
@{"BOLDEXTCOLORS/K (ON/S OFF/S)" link Fl_BOLDEXTCOLORS}
@{"FORBIDICONIFY/K (ON/S OFF/S)" link Fl_FORBIDICONIFY}
@{"NCURSESFIX/K (ON/S OFF/S)" link Fl_NCURSESFIX}
@{"SHELLMODE/K (ON/S OFF/S)" link Fl_SHELLMODE}
@{"NODEFAULTCLOSE/K (ON/S OFF/S)" link Fl_NODEFAULTCLOSE}
@{"NOPRINTSCROLL/K (ON/S OFF/S)" link Fl_NOPRINTSCROLL}
@{"SMALLDISPLAY/K (ON/S OFF/S)" link Fl_SMALLDISPLAY}
@{"DOSERASE/K (ON/S OFF/S)" link Fl_DOSERASE}
@{"DOSINSERT/K (ON/S OFF/S)" link Fl_DOSINSERT}
@{"SHORTSCREENINSERT/K (ON/S OFF/S)" link Fl_SHORTSCREENINSERT}
@{"AUTOPASTE/K (ON/S OFF/S)" link Fl_AUTOPASTE}
@{"DISABLESCROLL/K (ON/S OFF/S)" link Fl_DISABLESCROLL}
@{"DISABLEWRAP/K (ON/S OFF/S)" link Fl_DISABLEWRAP}
@{"XTERMCURSOR/K (ON/S OFF/S)" link Fl_XTERMCURSOR}
@{"RIGIDCURSOR/K (ON/S OFF/S)" link Fl_RIGIDCURSOR}
@{"KEEPDOUBLES/K (ON/S OFF/S)" link Fl_KEEPDOUBLES}
@{"SCROLLTOBOTTOM/K (ON/S OFF/S)" link Fl_SCROLLTOBOTTOM}
@{"RAWSCROLLERS/K (ON/S OFF/S)" link Fl_RAWSCROLLERS}
@{"VTMODE/K (ON/S OFF/S)" link Fl_VTMODE}
@{"ANSIMODE/K (ON/S OFF/S)" link Fl_ANSIMODE}
@{"ANSIREVERSE/K (ON/S OFF/S)" link Fl_ANSIREVERSE}
@{"ROWLOCK/K (ON/S OFF/S)" link Fl_ROWLOCK}
@{"UNDERLINE/K (ON/S OFF/S)" link Fl_UNDERLINE}
@{"BLINKING/K (ON/S OFF/S)" link Fl_BLINKING}
@{"DISABLEMMB/K (ON/S OFF/S)" link Fl_DISABLEMMB}
@{"NOBSSTART/K (ON/S OFF/S)" link Fl_NOBSSTART}
@{"DONTPLACEREQUESTER/K (ON/S OFF/S)" link Fl_DONTPLACEREQUESTER}
@{"BUFFERSIZE/K/N" link Fl_BUFFERSIZE}
@{"LOWERSIZE/K/N" link Fl_LOWERSIZE}
@{"UPPERSIZE/K/N" link Fl_UPPERSIZE}
@{"CACHESIZE/K/N" link Fl_CACHESIZE}
@{"MONITORID/K/N" link Fl_MONITORID}
@{"MONITOR/A" link Ca_MONITOR}
@{"REBUILDTIME/K/N" link Fl_REBUILDTIME}
@{"SCROLLTIME/K/N" link Fl_SCROLLTIME}
@{"BLINKSPEED/K/N" link Fl_BLINKSPEED}
@{"PATHONLYQU/K/N" link Fl_PATHONLYQU}
@{"NAMEONLYQU/K/N" link Fl_NAMEONLYQU}
@{"REQ_LEFTEDGE/K/N" link Fl_REQ_LEFTEDGE}
@{"REQ_TOPEDGE/K/N" link Fl_REQ_TOPEDGE}
@{"REQ_WIDTH/K/N" link Fl_REQ_WIDTH}
@{"REQ_HEIGHT/K/N" link Fl_REQ_HEIGHT}
@{"MODIFY/S" link Ca_MODIFY}
@{"SAVE/K (NOICONS/S PREFS/S GLOBAL/S WINDOW/S TO)" link Ca_SAVE}
@{"IFVNC/S" link Ca_IFVNC}
@{BODY}

@ENDNODE
@NODE SetVNCJobs "Job Control related arguments of SetVNC"
@TOC SetVNCShellArgs
The @{"SetVNC program" link SetVNCToc} is not only the preferences editor of
ViNCEd, it's, too, responsible for the @{"job control" link JobCtrl}. The
following @{"shell arguments" link SetVNCShellArgs} are dedicated for this
function:


@{B}SetVNC Background@{UB}

Sends the current foreground job to background.



@{B}SetVNC Foreground <cli>@{UB}

Takes one additional argument, the "Cli number", and sends the job related
to this Cli number to foreground. The "Cli number" can be obtained by the
"status" command.

The "Foreground" option is restricted to jobs running in the same ViNCEd
window as the window you invoked SetVNC from. In all other cases, SetVNC
will print a warning.



@{B}SetVNC Foreground other <cli>@{UB}

Takes one additional argument, a "Cli number". As the argument before, this
sends the job related to the given Cli number to foreground. However, this
command is not restricted to jobs running in the same output window than the
SetVNC program, it may be used to push jobs running in other windows to
foreground, by using a "brute force" method. However, the use of the "other"
keyword is discouraged and it should be used only in emergency situations
since this operation is not 100% "water proof". It may crash the computer in
(admittedly rare) conditions.



To avoid unnecessary typing, the foreground and background commands have
been abbreviated in @{"three scripts" link Scripts}, named "fg", "bg" and
"fork" which are more convenient for all-day purpose. For details about
them, check the @{"script section" link Scripts}.


More details about the @{"job control" link JobCtrl} functions and its
implementation, the @{"console owner system" link Owners}, are found by
following these links.



All other shell arguments of SetVNC are
@{"in a different section" link SetVNCShellArgs}.

@ENDNODE
@NODE SetVNCIO "SetVNC Buffer I/O functions"
@TOC SetVNCShellArgs
@{"SetVNC" link SetVNCToc} is not only the preferences editor of ViNCEd, it
can be used, too, to save the ViNCEd internal @{"buffers" link Buffers}, as
the @{"command history" link History} and the
@{"review buffer" link Buffers}. The following two shell arguments are
reserved for saving and loading the buffer contents as an ASCII text file:


@{B}SetVNC Put History <file>@{UB}

Takes one additional argument, a file name. This saves the contents of the
@{"history" link History} to a plain text file. Remember that you may, too,
print the contents as text to the current window by using "*" as a file
name.

(Side remark: As for ViNCEd, * is different to CONSOLE: Details are in a
@{"different section" link Owners})



@{B}SetVNC Get History <file>@{UB}

Takes again a file name as additional argument and loads a plain text file
as @{"history" link History} contents. The old contents of the history is
lost.



@{B}SetVNC Put Screen <file>@{UB}

This command saves the contents of the @{"display buffer" link Buffers} to
the given file name. The output file will be a text file with embedded CSI
sequences that describe the text rendering options. More details about the
CSI sequences used are in the
@{"CSI and ESC sequences" link CsiEsc} overview.


@{B}SetVNC Get Screen <file>@{UB}

Loads the @{"review buffer" link Buffers} from the given file. Embedded CSI
sequences will be interpreted accordingly, but not the full set of ViNCEd
sequences is available in the load file, mainly for speed reasons. The main
purpose of this command is not to display a file on the screen - use the
standard "Type" command for that purpose - but to re-load a previously saved
buffer contents, as created by "SetVNC Put Screen <file>". It will, unlike
"Type", also restore all ViNCEd internal @{"text attributes" link Buffers};
for example, whether the text was typed as user input or printed as output.

This command erases the old buffer contents completely and replaces it with
the data from the given file.


All other shell arguments of SetVNC are
@{"in a different section" link SetVNCShellArgs}.

@ENDNODE
@NODE PrefsFormat "The Format of the Preferences File"
@TOC SetVNCToc
The ViNCEd settings are kept in the file ViNCEd.prefs in the ENVARC: and
ENV: drawer and are read from that location by the vnc.library. Whereas it
is recommended that this file is only changed by the
@{"SetVNC" link SetVNCToc} program, you may edit it with an editor of your
choice as well - the file is a plain ASCII file.


The parser of the preferences file ignores all empty lines or lines starting
with a semicolon, which are supposed to be comment lines. ViNCEd inserts
some comments itself, just for your convenience - however, they are simply
ignored when the file is read later on. A semicolon @{B}may not@{UB} be put
anywhere else except at the start of the line, and it will be recognized as
a comment only in this position. Leading and trailing spaces of all lines
will be removed as well - this might be of importance for settings that
require a string as an argument, as the macro settings. In cases where
this is required, the @{"macros" link Macros} should be included in double
quotes.


A setting itself consists of the NAME of the option to be set, an equal sign
and the value of this option. The order of the options does not matter, but
choosing a different order may slow down the preferences parsing process;
the parser is optimized to read the settings in the same order as it writes
it. Invalid or unknown options will be silently ignored, for forwards
compatibility to future versions.


Each option requires an argument of a certain kind - the following argument
types are used:


@{B}Boolean@{UB}

A boolean on/off switch. Recommended are "on" and "off" to set this option,
even though ViNCEd recognizes some more phrases.



@{B}Integer@{UB}

An integral number, usually within a restricted interval. Values outside of
this interval are ignored. The number should be given in decimal notation,
even though ViNCEd recognizes hex (0x or $) numbers, binary numbers (%) or
octal numbers (§) as well on input.



@{B}Hex value@{UB}

Again an integer, usually without any restriction. The number should be
given as hexadecimal number with leading 0x on input, even though ViNCEd
recognizes other number formats as well.



@{B}Keyboard qualifier@{UB}

A keyboard qualifier value. Legal qualifiers are
@{CODE}

Ctrl            :       The @{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} key
Shift           :       Either @{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} key
Alt             :       Either @{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} key
Amiga           :       The @{FG Background}@{BG Text}Right Amiga@{FG Text}@{BG Background} key
@{BODY}

No other qualifiers are allowed here. Especially, left and right
@{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} and left and right
@{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} keys are considered as equal.



@{B}Color specifier@{UB}

Used to define ViNCEd internal colors. A color specifier consists of five
words, separated by commas.

The first word is either "LOAD" or "NOLOAD" and defines whether the color
value defined below is supposed to be loaded into one of the hardware
registers if ViNCEd opens a private screen.

The next word is either "ANSI" or "NOANSI". If "ANSI" is given, this entry
defines a standard @{"ANSI color" link ANSIColors} instead of a hardware
register. If both, "ANSI" and "LOAD" are given, the color allocates an ANSI
color with a higher priority.

The next three slots represent the red, green and blue components of the
color, given as sixteen bit (word sized) fractional values in hexadecimal
notation. The numbers must be given with a leading "0x" to identify them as
hex values, even though ViNCEd may accept other number bases here as well
on input. The number 0x0000 is minimal intensity, 0xffff is maximal
intensity, 0x7fff is half intensity. The numbers are rounded for the
available graphics hardware if required.



@{B}String@{UB}

An ASCII string. Leading and trailing spaces are truncated by the
preferences parser, but except that no interpretation is done on the string
itself. Especially, a semicolon in these strings is treaded as a literal
semicolon @{B}and not@{UB} as a comment introducer. Other parts of ViNCEd
allow certain strings to be enclosed in double quotes to include spaces, as
for example the @{"macro interpreter" link Macros}. However, this
interpretation is not done by the parser itself.


@{B}Key@{UB}

Defines a keyboard key sequence for definition of the
@{"keyboard functions" link KeyFunction}. It consists of one or more
qualifiers and the key itself, to be separated by blank spaces.

The following qualifiers are available:
@{CODE}

Ctrl            :       the @{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} key
Shift           :       either @{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} key
Alt             :       either @{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} key
LShift          :       only the @{FG Background}@{BG Text}Left Shift@{FG Text}@{BG Background} key
RShift          :       only the @{FG Background}@{BG Text}Right Shift@{FG Text}@{BG Background} key
LAlt            :       only the @{FG Background}@{BG Text}Left Alt@{FG Text}@{BG Background} key
RAlt            :       only the @{FG Background}@{BG Text}Right Alt@{FG Text}@{BG Background} key
LAmiga          :       the @{FG Background}@{BG Text}Left Amiga@{FG Text}@{BG Background} key.
                        This is the "Commodore" key on some keyboards.
RAmiga          :       the @{FG Background}@{BG Text}Right Amiga@{FG Text}@{BG Background} key

@{BODY}
As a special rule, "LShift RShift" means "Left OR Right", i.e. is equivalent
to "Shift" alone, same goes for the "Alt" keys. For "Amiga", things are
simpler. Presenting both means really you've to press both to get the
function.

Another special qualifier is
@{CODE}

Num             :       the function is only available with NumLock active.

@{BODY}
This does, to stress that again, @{B}NOT MEAN@{UB} that the keyboard key is
a key on the numeric keypad. It means @{B}ONLY@{UB} that the
@{"keyboard function" link KeyFunction} is only available if "NumLock" is
active.

"NumLock" is a keyboard qualifier similar to the "Caps Lock" qualifier, with
the difference that there is no light on the keyboard to show its state. It
is, however, treated exactly in the same way.
The @{"keyboard function" link KeyFunction} that toggles this qualifier is,
obviously, called @{"Toggle NumLock" link Kf_Toggle_NumLock} and is usually
@{"bound" link KeyBind} to
@{FG Background}@{BG Text}Alt Num[@{FG Text}@{BG Background}.


The final part of a keyboard key definition is the key itself. This key
might be given in three different ways:


- as a hexadecimal number with leading "0x" defining the raw key code of the
key to be used. The keyboard raw key codes can be found in the
@{"literature" link References}.


- as a string defining one of the special keyboard keys. The following
strings are recognized:
@{CODE}

Esc             :       the @{FG Background}@{BG Text}Escape@{FG Text}@{BG Background} key
F1 to F10       :       the function keys
Backspace       :       the @{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background} key
Del             :       the @{FG Background}@{BG Text}Delete@{FG Text}@{BG Background} key
Help            :       the @{FG Background}@{BG Text}Help@{FG Text}@{BG Background} key
Tab             :       the @{FG Background}@{BG Text}TAB@{FG Text}@{BG Background} key
Return          :       the @{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key on the main keypad
Space           :       the space bar
Enter           :       the @{FG Background}@{BG Text}Enter@{FG Text}@{BG Background} key on the numeric keypad
Up              :       the @{FG Background}@{BG Text}Cursor Up@{FG Text}@{BG Background} key
Down            :       the @{FG Background}@{BG Text}Cursor Down@{FG Text}@{BG Background} key
Left            :       the @{FG Background}@{BG Text}Cursor Left@{FG Text}@{BG Background} key
Right           :       the @{FG Background}@{BG Text}Cursor Right@{FG Text}@{BG Background} key

@{BODY}
The next "keywords" identify keys on the numeric pad. Do not confuse this
with the "Num" qualifier which has a different meaning. Please note, too,
that there is @{B}no space@{UB} between the "Num" and the key name.

@{CODE}

Num[
Num]
Num/
Num*
Num7
Num8
Num9
Num-
Num4
Num5
Num6
Num+
Num1
Num2
Num3
Num0
Num.

@{BODY}


- and, as the third method, the single character which is printed on all
"ordinary" keyboard keys. Such as "a" will identify the "a"-key. If a key
is defined this way, the "Shift" qualifiers are ignored. Instead of using an
explicit qualifier definition for "Shift", the "Shift" qualifier is
implicitly defined by the ASCII character in the definition. For example,
"a" will match the un-qualified "a"-key, whereas "A" is the "a" key together
with @{FG Background}@{BG Text}Shift@{FG Text}@{BG Background}. For the same
reason is "1" the un-qualified "1" key, whereas "!" is the "1" key together
with @{FG Background}@{BG Text}Shift@{FG Text}@{BG Background}. This special
rule holds @{B}only@{UB} for the
@{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} qualifier, not for
@{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} or any other
modifiers. Thus, to identify the key "a" with
@{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} and
@{FG Background}@{BG Text}Alt@{FG Text}@{BG Background}, you need to type
@{CODE}

Alt A

@{BODY}
and @{B}not@{UB}

@{CODE}

æ               or              Shift Alt a

@{BODY}



There is a tricky difference between the first two and the last method of
defining a keyboard function. Whereas the first two methods identify a key
by its raw key code, i.e. relate directly to the position of the key on the
keyboard matrix, the last definition identifies a key by its ASCII value.
This ASCII value might, however, depend on the national keyboard. To give an
example: The key with the raw key code 0x15 is the "y" key on american
keyboard, but the "z" key on the german keyboard. Thus, when you define a
key by its hex raw key value, this will identify @{B}the same physical
key@{UB} on all national keyboards, but this key may have
@{B}different@{UB} functions. Whereas if you define a key in the third way,
by its ASCII value, this definition might refer to a different physical key
on different keyboards, but it is guaranteed that this key is always labeled
with the same letter, even though its located at a different position. It is
therefore recommend to use the third "ASCII match" method for defining keys
except for functions using the special keys which do not depend on national
keyboard definitions.



Now for the list of all available options in the preferences file; by
following the links and pressing the "Contents" gadget of the browser above,
you're brought to the @{"SetVNC" link SetVNCToc} page that controls this
specific feature:

@{CODE}

Name of the option              Type

        Various flags:

@{"REBUILDDELAY" link Fl_REBUILDDELAY }                    boolean
@{"DOSCURSOR" link Fl_DOSCURSOR }                       boolean
@{"CRINSERT" link Fl_CRINSERT }                        boolean
@{"OVERWRITE" link Fl_OVERWRITE }                       boolean
@{"WRAP" link Fl_WRAP }                            boolean
@{"SMARTCLOSE" link Fl_SMARTCLOSE }                      boolean
@{"CLOSEQUEUE" link Fl_CLOSEQUEUE }                      boolean
@{"CUTUSER" link Fl_CUTUSER }                         boolean
@{"NCURSESFIX" link Fl_NCURSESFIX }                      boolean
@{"SHELLMODE" link Fl_SHELLMODE }                       boolean
@{"AUTOINDENT" link Fl_AUTOINDENT }                      boolean
@{"NODEFAULTCLOSE" link Fl_NODEFAULTCLOSE }                  boolean
@{"AUTOCOPY" link Fl_AUTOCOPY }                        boolean
@{"SAFERCLOSE" link Fl_SAFERCLOSE }                      boolean
@{"FORBIDICONIFY" link Fl_FORBIDICONIFY }                   boolean
@{"DISABLEMMB" link Fl_DISABLEMMB }                      boolean
@{"CLOSEREQ" link Fl_CLOSEREQ }                        boolean
@{"SCROLLTOBOTTOM" link Fl_SCROLLTOBOTTOM }                  boolean
@{"NOPRINTSCROLL" link Fl_NOPRINTSCROLL }                   boolean
@{"SMALLDISPLAY" link Fl_SMALLDISPLAY }                    boolean
@{"DOSERASE" link Fl_DOSERASE }                        boolean
@{"AUTOPASTE" link Fl_AUTOPASTE }                       boolean
@{"DISABLESCROLL" link Fl_DISABLESCROLL }                   boolean
@{"DISABLEWRAP" link Fl_DISABLEWRAP }                     boolean
@{"DOSINSERT" link Fl_DOSINSERT }                       boolean
@{"VTMODE" link Fl_VTMODE }                          boolean
@{"ROWLOCK" link Fl_ROWLOCK }                         boolean
@{"UNDERLINE" link Fl_UNDERLINE }                       boolean
@{"BLINKING" link Fl_BLINKING }                        boolean
@{"XTERMCURSOR" link Fl_XTERMCURSOR }                     boolean
@{"NOBSSTART" link Fl_NOBSSTART }                       boolean
@{"ANSIMODE" link Fl_ANSIMODE }                        boolean
@{"ANSIREVERSE" link Fl_ANSIREVERSE }                     boolean
@{"NUMPADMODE" link Fl_NUMPADMODE }                      boolean
@{"BOLDEXTCOLORS" link Fl_BOLDEXTCOLORS }                   boolean
@{"SHORTSCREENINSERT" link Fl_SHORTSCREENINSERT }               boolean
@{"SCROLLBORDERS" link Fl_SCROLLBORDERS }                   boolean
@{"TYPEAHEAD" link Fl_TYPEAHEAD }                       boolean
@{"DISABLEPROPX" link Fl_DISABLEPROPX }                    boolean
@{"DISABLEPROPY" link Fl_DISABLEPROPY }                    boolean
@{"RAWSCROLLERS" link Fl_RAWSCROLLERS }                    boolean
@{"RIGIDCURSOR" link Fl_RIGIDCURSOR }                     boolean
@{"KEEPDOUBLES" link Fl_KEEPDOUBLES }                     boolean
@{"DONTPLACEREQUESTER" link Fl_DONTPLACEREQUESTER }              boolean

        Buffer sizes:

@{"BUFFERSIZE" link Fl_BUFFERSIZE }                      integer between 5 and 4096
@{"UPPERSIZE" link Fl_UPPERSIZE }                       integer between 64 and 4096
@{"LOWERSIZE" link Fl_LOWERSIZE }                       integer between 128 and 4096
@{"CACHESIZE" link Fl_CACHESIZE }                       integer between 1 and 256

        Timing values:

@{"DOUBLETABTIME" link Fl_DOUBLETABTIME }                   integer between 0 and 2000
@{"REBUILDTIME" link Fl_REBUILDTIME }                     integer between 25 and 1000
@{"SCROLLTIME" link Fl_SCROLLTIME }                      integer between 5 and 500
@{"BLINKSPEED" link Fl_BLINKSPEED }                      integer between 100 and 1000

        Miscellaneous:

@{"MONITORID" link Fl_MONITORID }                       hex value

@{"PATHONLYQU" link Fl_PATHONLYQU }                      keyboard qualifier
@{"NAMEONLYQU" link Fl_NAMEONLYQU }                      keyboard qualifier

        Colors:

@{"CURSORCOLOR" link Fl_CURSORCOLOR }                     color specifier

        up to sixteen times:
@{"COLOR" link Fl_COLOR }                           color specifier

        TAB expansion settings:

@{"TAB_FILE_PRI" link Fl_TAB_FILE_PRI }                    integer between -128 and 127
@{"TAB_EXEC_PRI" link Fl_TAB_EXEC_PRI }                    integer between -128 and 127
@{"TAB_SCRIPT_PRI" link Fl_TAB_SCRIPT_PRI }                  integer between -128 and 127
@{"TAB_PATH_PRI" link Fl_TAB_PATH_PRI }                    integer between -128 and 127
@{"TAB_COMMAND_PRI" link Fl_TAB_COMMAND_PRI }                 integer between -128 and 127
@{"TAB_RESIDENT_PRI" link Fl_TAB_RESIDENT_PRI }                integer between -128 and 127
@{"TAB_INFO_PRI" link Fl_TAB_INFO_PRI }                    integer between -128 and 127
@{"TAB_DEVICE_PRI" link Fl_TAB_DEVICE_PRI }                  integer between -128 and 127
@{"TAB_ASSIGN_PRI" link Fl_TAB_ASSIGN_PRI }                  integer between -128 and 127
@{"TAB_VOLUME_PRI" link Fl_TAB_VOLUME_PRI }                  integer between -128 and 127
@{"TAB_DIRECTORY_PRI" link Fl_TAB_DIRECTORY_PRI }               integer between -128 and 127
@{"TAB_DOUBLEREQ" link Fl_TAB_DOUBLEREQ }                   boolean
@{"TAB_FULLEXPAND" link Fl_TAB_FULLEXPAND }                  boolean
@{"TAB_VNCREQUESTER" link Fl_TAB_VNCREQUESTER }                boolean
@{"TAB_AMBIGREQ" link Fl_TAB_AMBIGREQ }                    boolean
@{"TAB_PARTIALPAT" link Fl_TAB_PARTIALPAT }                  boolean
@{"TAB_INTOCONSOLE" link Fl_TAB_INTOCONSOLE }                 boolean

        TAB expansion settings for the short path:

@{"SRT_FILE_PRI" link Fl_SRT_FILE_PRI }                    integer between -128 and 127
@{"SRT_EXEC_PRI" link Fl_SRT_EXEC_PRI }                    integer between -128 and 127
@{"SRT_SCRIPT_PRI" link Fl_SRT_SCRIPT_PRI }                  integer between -128 and 127
@{"SRT_PATH_PRI" link Fl_SRT_PATH_PRI }                    integer between -128 and 127
@{"SRT_COMMAND_PRI" link Fl_SRT_COMMAND_PRI }                 integer between -128 and 127
@{"SRT_RESIDENT_PRI" link Fl_SRT_RESIDENT_PRI }                integer between -128 and 127
@{"SRT_INFO_PRI" link Fl_SRT_INFO_PRI }                    integer between -128 and 127
@{"SRT_DEVICE_PRI" link Fl_SRT_DEVICE_PRI }                  integer between -128 and 127
@{"SRT_ASSIGN_PRI" link Fl_SRT_ASSIGN_PRI }                  integer between -128 and 127
@{"SRT_VOLUME_PRI" link Fl_SRT_VOLUME_PRI }                  integer between -128 and 127
@{"SRT_DIRECTORY_PRI" link Fl_SRT_DIRECTORY_PRI }               integer between -128 and 127
@{"SRT_DOUBLEREQ" link Fl_SRT_DOUBLEREQ }                   boolean
@{"SRT_FULLEXPAND" link Fl_SRT_FULLEXPAND }                  boolean
@{"SRT_VNCREQUESTER" link Fl_SRT_VNCREQUESTER }                boolean
@{"SRT_AMBIGREQ" link Fl_SRT_AMBIGREQ }                    boolean
@{"SRT_PARTIALPAT" link Fl_SRT_PARTIALPAT }                  boolean
@{"SRT_INTOCONSOLE" link Fl_SRT_INTOCONSOLE }                 boolean

        TAB devices expansion settings:

@{"DEV_FILE_PRI" link Fl_DEV_FILE_PRI }                    integer between -128 and 127
@{"DEV_EXEC_PRI" link Fl_DEV_EXEC_PRI }                    integer between -128 and 127
@{"DEV_SCRIPT_PRI" link Fl_DEV_SCRIPT_PRI }                  integer between -128 and 127
@{"DEV_PATH_PRI" link Fl_DEV_PATH_PRI }                    integer between -128 and 127
@{"DEV_COMMAND_PRI" link Fl_DEV_COMMAND_PRI }                 integer between -128 and 127
@{"DEV_RESIDENT_PRI" link Fl_DEV_RESIDENT_PRI }                integer between -128 and 127
@{"DEV_INFO_PRI" link Fl_DEV_INFO_PRI }                    integer between -128 and 127
@{"DEV_DEVICE_PRI" link Fl_DEV_DEVICE_PRI }                  integer between -128 and 127
@{"DEV_ASSIGN_PRI" link Fl_DEV_ASSIGN_PRI }                  integer between -128 and 127
@{"DEV_VOLUME_PRI" link Fl_DEV_VOLUME_PRI }                  integer between -128 and 127
@{"DEV_DIRECTORY_PRI" link Fl_DEV_DIRECTORY_PRI }               integer between -128 and 127
@{"DEV_DOUBLEREQ" link Fl_DEV_DOUBLEREQ }                   boolean
@{"DEV_FULLEXPAND" link Fl_DEV_FULLEXPAND }                  boolean
@{"DEV_VNCREQUESTER" link Fl_DEV_VNCREQUESTER }                boolean
@{"DEV_AMBIGREQ" link Fl_DEV_AMBIGREQ }                    boolean
@{"DEV_PARTIALPAT" link Fl_DEV_PARTIALPAT }                  boolean
@{"DEV_INTOCONSOLE" link Fl_DEV_INTOCONSOLE }                 boolean


        TAB directory expansion settings:

@{"DIR_FILE_PRI" link Fl_DIR_FILE_PRI }                    integer between -128 and 127
@{"DIR_EXEC_PRI" link Fl_DIR_EXEC_PRI }                    integer between -128 and 127
@{"DIR_SCRIPT_PRI" link Fl_DIR_SCRIPT_PRI }                  integer between -128 and 127
@{"DIR_PATH_PRI" link Fl_DIR_PATH_PRI }                    integer between -128 and 127
@{"DIR_COMMAND_PRI" link Fl_DIR_COMMAND_PRI }                 integer between -128 and 127
@{"DIR_RESIDENT_PRI" link Fl_DIR_RESIDENT_PRI }                integer between -128 and 127
@{"DIR_INFO_PRI" link Fl_DIR_INFO_PRI }                    integer between -128 and 127
@{"DIR_DEVICE_PRI" link Fl_DIR_DEVICE_PRI }                  integer between -128 and 127
@{"DIR_ASSIGN_PRI" link Fl_DIR_ASSIGN_PRI }                  integer between -128 and 127
@{"DIR_VOLUME_PRI" link Fl_DIR_VOLUME_PRI }                  integer between -128 and 127
@{"DIR_DIRECTORY_PRI" link Fl_DIR_DIRECTORY_PRI }               integer between -128 and 127
@{"DIR_DOUBLEREQ" link Fl_DIR_DOUBLEREQ }                   boolean
@{"DIR_FULLEXPAND" link Fl_DIR_FULLEXPAND }                  boolean
@{"DIR_VNCREQUESTER" link Fl_DIR_VNCREQUESTER }                boolean
@{"DIR_AMBIGREQ" link Fl_DIR_AMBIGREQ }                    boolean
@{"DIR_PARTIALPAT" link Fl_TAB_PARTIALPAT }                  boolean
@{"DIR_INTOCONSOLE" link Fl_TAB_INTOCONSOLE }                 boolean


        TAB icon (.info) expansion settings:

@{"INF_FILE_PRI" link Fl_INF_FILE_PRI }                    integer between -128 and 127
@{"INF_EXEC_PRI" link Fl_INF_EXEC_PRI }                    integer between -128 and 127
@{"INF_SCRIPT_PRI" link Fl_INF_SCRIPT_PRI }                  integer between -128 and 127
@{"INF_PATH_PRI" link Fl_INF_PATH_PRI }                    integer between -128 and 127
@{"INF_COMMAND_PRI" link Fl_INF_COMMAND_PRI }                 integer between -128 and 127
@{"INF_RESIDENT_PRI" link Fl_INF_RESIDENT_PRI }                integer between -128 and 127
@{"INF_INFO_PRI" link Fl_INF_INFO_PRI }                    integer between -128 and 127
@{"INF_DEVICE_PRI" link Fl_INF_DEVICE_PRI }                  integer between -128 and 127
@{"INF_ASSIGN_PRI" link Fl_INF_ASSIGN_PRI }                  integer between -128 and 127
@{"INF_VOLUME_PRI" link Fl_INF_VOLUME_PRI }                  integer between -128 and 127
@{"INF_DIRECTORY_PRI" link Fl_INF_DIRECTORY_PRI }               integer between -128 and 127
@{"INF_DOUBLEREQ" link Fl_INF_DOUBLEREQ }                   boolean
@{"INF_FULLEXPAND" link Fl_INF_FULLEXPAND }                  boolean
@{"INF_VNCREQUESTER" link Fl_INF_VNCREQUESTER }                boolean
@{"INF_AMBIGREQ" link Fl_INF_AMBIGREQ }                    boolean
@{"INF_PARTIALPAT" link Fl_TAB_PARTIALPAT }                  boolean
@{"INF_INTOCONSOLE" link Fl_TAB_INTOCONSOLE }                 boolean


        TAB alternate expansion settings:

@{"ALT_FILE_PRI" link Fl_ALT_FILE_PRI }                    integer between -128 and 127
@{"ALT_EXEC_PRI" link Fl_ALT_EXEC_PRI }                    integer between -128 and 127
@{"ALT_SCRIPT_PRI" link Fl_ALT_SCRIPT_PRI }                  integer between -128 and 127
@{"ALT_PATH_PRI" link Fl_ALT_PATH_PRI }                    integer between -128 and 127
@{"ALT_COMMAND_PRI" link Fl_ALT_COMMAND_PRI }                 integer between -128 and 127
@{"ALT_RESIDENT_PRI" link Fl_ALT_RESIDENT_PRI }                integer between -128 and 127
@{"ALT_INFO_PRI" link Fl_ALT_INFO_PRI }                    integer between -128 and 127
@{"ALT_DEVICE_PRI" link Fl_ALT_DEVICE_PRI }                  integer between -128 and 127
@{"ALT_ASSIGN_PRI" link Fl_ALT_ASSIGN_PRI }                  integer between -128 and 127
@{"ALT_VOLUME_PRI" link Fl_ALT_VOLUME_PRI }                  integer between -128 and 127
@{"ALT_DIRECTORY_PRI" link Fl_ALT_DIRECTORY_PRI }               integer between -128 and 127
@{"ALT_DOUBLEREQ" link Fl_ALT_DOUBLEREQ }                   boolean
@{"ALT_FULLEXPAND" link Fl_ALT_FULLEXPAND }                  boolean
@{"ALT_VNCREQUESTER" link Fl_ALT_VNCREQUESTER }                boolean
@{"ALT_AMBIGREQ" link Fl_ALT_AMBIGREQ }                    boolean
@{"ALT_PARTIALPAT" link Fl_TAB_PARTIALPAT }                  boolean
@{"ALT_INTOCONSOLE" link Fl_TAB_INTOCONSOLE }                 boolean

        Requester dimensions:

@{"REQ_LEFTEDGE" link Fl_REQ_LEFTEDGE }                    integer between -2048 and 2048
@{"REQ_TOPEDGE" link Fl_REQ_TOPEDGE }                     integer between -2048 and 2048
@{"REQ_WIDTH" link Fl_REQ_WIDTH }                       integer between 0 and 2048
@{"REQ_HEIGHT" link Fl_REQ_HEIGHT }                      integer between 0 and 2048

        Macros:
        up to ten times:

@{"MACRO" link Fl_MACRO }                           string

        System macros:
        up to five times:

@{"SYSTEMMACRO" link Fl_SYSTEMMACRO }                     string

        Other system strings:

@{"RUN_NEW_SHELL" link Fl_RUN_NEW_SHELL}                   string
@{"ICON_PATH" link Fl_ICON_PATH }                       string
@{"ICON_TITLE" link Fl_ICON_TITLE }                      string
@{"QUIT_PROGRAM" link Fl_QUIT_PROGRAM }                    string
@{"DEFAULT_FONT" link Fl_DEFAULT_FONT }                    string
@{"DEFAULT_PATH" link Fl_DEFAULT_PATH }                    string

        Buttons:
        up to ten times:

@{"BUTTONMACRO" link Fl_BUTTONMACRO }                     string
@{"BUTTONTITLE" link Fl_BUTTONTITLE }                     string

        Keyboard:

@{"CURSOR_LEFT" link Kf_CURSOR_LEFT }                     key
@{"CURSOR_RIGHT" link Kf_CURSOR_RIGHT }                    key
@{"CURSOR_UP" link Kf_CURSOR_UP }                       key
@{"CURSOR_DOWN" link Kf_CURSOR_DOWN }                     key
@{"HISTORY_UP" link Kf_HISTORY_UP }                      key
@{"HISTORY_DOWN" link Kf_HISTORY_DOWN }                    key
@{"SEARCH_PARTIAL_UPWARDS" link Kf_SEARCH_PARTIAL_UPWARDS }          key
@{"SEARCH_PARTIAL_DOWNWARDS" link Kf_SEARCH_PARTIAL_DOWNWARDS }        key
@{"SEARCH_HISTORY_UPWARDS" link Kf_SEARCH_HISTORY_UPWARDS }          key
@{"SEARCH_HISTORY_DOWNWARDS" link Kf_SEARCH_HISTORY_DOWNWARDS }        key
@{"HALF_SCREEN_LEFT" link Kf_HALF_SCREEN_LEFT }                key
@{"HALF_SCREEN_RIGHT" link Kf_HALF_SCREEN_RIGHT }               key
@{"HALF_SCREEN_UP" link Kf_HALF_SCREEN_UP }                  key
@{"HALF_SCREEN_DOWN" link Kf_HALF_SCREEN_DOWN }                key
@{"SCROLL_UP" link Kf_SCROLL_UP }                       key
@{"SCROLL_DOWN" link Kf_SCROLL_DOWN }                     key
@{"SCROLL_HALF_SCREEN_UP" link Kf_SCROLL_HALF_SCREEN_UP }           key
@{"SCROLL_HALF_SCREEN_DOWN" link Kf_SCROLL_HALF_SCREEN_DOWN }         key
@{"TO_LEFT_BORDER" link Kf_TO_LEFT_BORDER }                  key
@{"TO_RIGHT_BORDER" link Kf_TO_RIGHT_BORDER }                 key
@{"TO_TOP_OF_SCREEN" link Kf_TO_TOP_OF_SCREEN }                key
@{"TO_BOTTOM_OF_SCREEN" link Kf_TO_BOTTOM_OF_SCREEN }             key
@{"PREV_WORD" link Kf_PREV_WORD }                       key
@{"NEXT_WORD" link Kf_NEXT_WORD }                       key
@{"PREV_COMPONENT" link Kf_PREV_COMPONENT }                  key
@{"NEXT_COMPONENT" link Kf_NEXT_COMPONENT }                  key
@{"HOME" link Kf_HOME }                            key
@{"END" link Kf_END }                             key

@{"SEND_INPUTS" link Kf_SEND_INPUTS }                     key
@{"SPLIT_LINE" link Kf_SPLIT_LINE }                      key
@{"INSERT_^J" link Kf_INSERT_Ctrl_J }                       key
@{"SEND_COMPLETE_LINE" link Kf_SEND_COMPLETE_LINE }              key
@{"LINE_FEED" link Kf_LINE_FEED }                       key

@{"TAB_FORWARDS" link Kf_TAB_FORWARDS }                    key
@{"TAB_BACKWARDS" link Kf_TAB_BACKWARDS }                   key

@{"EXPAND_PATH" link Kf_EXPAND_PATH }                     key
@{"EXPAND_BACKWARDS" link Kf_EXPAND_BACKWARDS }                key
@{"EXPAND_SHORT" link Kf_EXPAND_SHORT }                    key
@{"EXPAND_SHORT_BKWDS" link Kf_EXPAND_SHORT_BKWDS }              key
@{"EXPAND_DEVICES" link Kf_EXPAND_DEVICES }                  key
@{"EXPAND_DEVS_BKWDS" link Kf_EXPAND_DEVS_BKWDS }               key
@{"EXPAND_DIRS" link Kf_EXPAND_DIRS }                     key
@{"EXPAND_DIRS_BKWDS" link Kf_EXPAND_DIRS_BKWDS }               key
@{"EXPAND_ICONS" link Kf_EXPAND_ICONS }                    key
@{"EXPAND_ICONS_BKWDS" link Kf_EXPAND_ICONS_BKWDS }              key
@{"EXPAND_ALT" link Kf_EXPAND_ALT }                      key
@{"EXPAND_ALT_BKWDS" link Kf_EXPAND_ALT_BKWDS }                key

@{"SEND_^C" link Kf_SEND_Ctrl_C }                         key
@{"SEND_^D" link Kf_SEND_Ctrl_D }                         key
@{"SEND_^E" link Kf_SEND_Ctrl_E }                         key
@{"SEND_^F" link Kf_SEND_Ctrl_F }                         key
@{"SEND_^C_TO_ALL" link Kf_SEND_Ctrl_C_TO_ALL }                  key
@{"SEND_^D_TO_ALL" link Kf_SEND_Ctrl_D_TO_ALL }                  key
@{"SEND_^E_TO_ALL" link Kf_SEND_Ctrl_E_TO_ALL }                  key
@{"SEND_^F_TO_ALL" link Kf_SEND_Ctrl_F_TO_ALL }                  key

@{"DELETE_FORWARDS" link Kf_Delete_Forwards }                 key
@{"DELETE_BACKWARDS" link Kf_Delete_Backwards }                key
@{"DELETE_FULL_LINE" link Kf_DELETE_FULL_LINE }                key
@{"CUT_FULL_LINE" link Kf_CUT_FULL_LINE }                   key
@{"DELETE_INPUTS" link Kf_DELETE_INPUTS }                   key
@{"CUT_INPUTS" link Kf_CUT_INPUTS }                      key
@{"DELETE_WORD_FWDS" link Kf_DELETE_WORD_FWDS }                key
@{"CUT_WORD_FWDS" link Kf_CUT_WORD_FWDS }                   key
@{"DELETE_WORD_BKWDS" link Kf_DELETE_WORD_BKWDS }               key
@{"CUT_WORD_BKWDS" link Kf_CUT_WORD_BKWDS }                  key
@{"DELETE_COMPONENT_FWDS" link Kf_DELETE_COMPONENT_FWDS }           key
@{"CUT_COMPONENT_FWDS" link Kf_CUT_COMPONENT_FWDS }              key
@{"DELETE_COMPONENT_BKWDS" link Kf_DELETE_COMPONENT_BKWDS }          key
@{"CUT_COMPONENT_BKWDS" link Kf_CUT_COMPONENT_BKWDS }             key
@{"DELETE_END_OF_LINE" link Kf_DELETE_END_OF_LINE }              key
@{"CUT_END_OF_LINE" link Kf_CUT_END_OF_LINE }                 key
@{"DELETE_START_OF_LINE" link Kf_DELETE_START_OF_LINE }            key
@{"CUT_START_OF_LINE" link Kf_CUT_START_OF_LINE }               key
@{"DELETE_END_OF_DISPLAY" link Kf_DELETE_END_OF_DISPLAY }           key
@{"FORM_FEED" link Kf_FORM_FEED }                       key
@{"CLEAR_SCREEN" link Kf_CLEAR_SCREEN }                    key

@{"CUT" link Kf_CUT }                             key
@{"COPY" link Kf_COPY }                            key
@{"PASTE" link Kf_PASTE }                           key
@{"HIDE" link Kf_HIDE }                            key
@{"SELECT_ALL" link Kf_SELECT_ALL }                      key
@{"COPY_QUIET" link Kf_COPY_QUIET }                      key
@{"RESET" link Kf_RESET }                           key
@{"FULL_RESET" link Kf_FULL_RESET }                      key
@{"ICONIFY" link Kf_ICONIFY }                         key

@{"TOGGLE_ESC" link Kf_TOGGLE_ESC }                      key
@{"TOGGLE_NUMLOCK" link Kf_TOGGLE_NUMLOCK }                  key
@{"TOGGLE_OVERWRITE" link Kf_TOGGLE_OVERWRITE }                key
@{"SUSPEND" link Kf_SUSPEND }                         key
@{"RESUME" link Kf_RESUME }                          key
@{"ABORT_EXPANSION" link Kf_ABORT_EXPANSION }                 key
@{"SCROLL_TO_CURSOR" link Kf_SCROLL_TO_CURSOR }                key
@{"REWIND_HISTORY" link Kf_REWIND_HISTORY }                  key
@{"YANK" link Kf_YANK }                            key
@{"GENERATE_EOF" link Kf_GENERATE_EOF }                    key
@{"DISPLAY_BEEP" link Kf_DISPLAY_BEEP }                    key
@{"TOGGLE_PAUSE" link Kf_TOGGLE_PAUSE }                    key
@{"HELP" link Kf_HELP }                            key
@{"FORK_NEW_SHELL" link Kf_FORK_NEW_SHELL }                  key
@{"INSERT_CSI" link Kf_INSERT_CSI }                      key
@{"INSERT_ESC" link Kf_INSERT_ESC }                      key

@{BODY}

@ENDNODE

@REMARK SetVNC preferences pages
@NODE SETVNC_ABOUT "The About Pages"
@TOC PagesToc
The about pages....

        ...presents @{"my" link Me} logo in the middle. (No, that's not
me, I don't have the right ears...)



In the bottom, you find


        the "About" gadget, that invokes this guide if setup correctly. If
not, locate it in the @{"System front page" link SETVNC_SYSTEM_1}.


        To the right of this gadget, two "arrow gadgets « and »". Both will
move you to the second "About" page. It looks almost like the first, except
for the middle line of gadgets.


The next line of gadgets are used to re-load previously used preferences into
the editor. These are usually four gadgets unless
@{"SetVNC" link SetVNCToc} was called with the
@{"PREFS" link Ca_PREFS} argument which tells SetVNC not to modify the local
preferences of the window it was invoked from, but the global preferences
used for all windows to be opened.

More functions to load and save the preferences are on the second "About"
page.


The meaning of the gadgets on the first page, from left to right is:


@{B}Last Saved@{UB}

Load the last saved preferences, found on your HD in ENVARC:ViNCEd.prefs.


@{B}Last Used@{UB}

Restore the previously used global settings, undo all changes made so far.
These settings are automatically loaded by SetVNC if the
@{"PREFS" link Ca_PREFS} argument was found on the
@{"command line" link SetVNCShellArgs}.


@{B}Window@{UB}

Re-load the settings from the window which SetVNC invoked from and undo all
changes. This gadget is only available if no
@{"PREFS" link Ca_PREFS} argument was given on the
@{"shell command line" link SetVNCShellArgs}, and loading the preferences
from the window is the default in this case.


@{B}Default@{UB}

Load the "factory defaults" of ViNCEd.




If you moved to the second "About" page, this line contains only two
gadgets, namely:


@{B}Save to File...@{UB}

Presents a file requester to select a file to save the currently made
preferences to.


@{B}Load from File...@{UB}

This loads the preferences from a given file, again asking with a requester.




The gadgets in the last line are present in each page and described
@{"in a different section" link SetVNCGui}. They are used to save or
install the changed settings.

@ENDNODE
@NODE SETVNC_MACROS "The Macros Page 1 and 2"
@TOC PagesToc
The purpose of the "Macros Pages" is to define the menu and title bar
@{"macros" link Macros} and buttons ViNCEd offers.


The first two macros pages define the @{"macros" link Macros} that appear in
the @{"Macros Menu" link MacrosMenu} using the keyboard shortcuts
@{FG Background}@{BG Text}Amiga 0@{FG Text}@{BG Background} to
@{FG Background}@{BG Text}Amiga 9@{FG Text}@{BG Background}.


The first page defines the macros 0 to 4, the second number 5 to 9, the
arrow gadgets "«" and "»" in the right bottom corner of the window toggle
between the pages.


If you want to change the contents of a macros, just type it in one of the
gadgets; the text in front of them tells you the number of the macro, and
thus the key used to invoke it.


To find out more about macros, study the
@{"macros section" link Macros}.

@ENDNODE
@NODE SETVNC_MACROS_3 "The Macros Page 3"
@TOC PagesToc
Similar to the @{"first two Macros Pages" link SETVNC_MACROS}, this page is
used to define the @{"buttons" link Macros} that appear in the window title
of a ViNCEd window. Except for their different appearance, they work like
macros, but require a "button title". It's this title which appears later on
in the window title, not the macro body itself.


The top two string gadgets are used to adjust the title and the body of it.
Just type them here.


Since the number of buttons is not fixed, only one button at a time is
shown. Use the "Prev" and "Next" gadgets to edit the previous or the next
button. The last available button will be always cleared for you, left empty
to allow the input of an additional button - provided that the limit of
maximal eight buttons is not yet reached.


If you want to remove a button, click the "Remove" gadget on the left side,
the "Insert" button beneath let's you insert a new clear button BEFORE the
button currently seen. Again, provided that the limit of eight buttons is
not exceeded.


However, it is @{B}NOT@{UB} legal to leave a button with an empty title. If
this happens, SetVNC beeps the screen and you have to enter a title, or
remove the button completely.


If you want to find out more closely how buttons and the related macros
work, check the @{"macros section" link Macros}.


@ENDNODE
@NODE SETVNC_KEYBOARD_1 "The Keyboard Page 1"
@TOC PagesToc
The two keyboard pages are used to setup the keyboard configuration of a
ViNCEd window. Hence, they are used to setup the
@{"binding" link KeyBind} of keys to @{"functions" link KeyFunction}.


Using the first page, you select the key to define, the
@{"second page" link SETVNC_KEYBOARD_2} selects then the function.



@{B}by ASCII value@{UB}

If this gadget is checked, the key is identified by the ASCII character it
generates, not by the raw keymap code. It is rather essential to understand
the difference since besides the ViNCEd keyboard definition, there's still
the keyboard definition of the Os that maps keys to characters.


To give an example: The keys "y" and "z" are interchanged on the german
keyboard. If the english keymap is active and you bind a function to the "z"
key, it depends on this gadget what happens if the keyboard is later on
changed to german. If this flag is set, the function "moves along" with the
keyboard keys and is now available thru a different key - namely the former
"y" key - which, however, still produces the same character, "z". If this
gadget is @{B}not@{UB} set, the function is bound to the real, physical key,
and the same physical key will generate the same function, regardless of the
keyboard definition of the user - even when the meaning of the keys
should change. Thus, the former is some kind of "bind by meaning", whereas
the later is "bind by hardware".


It is usually a wise idea to bind "keys by meaning", i.e. to leave this
gadget checked. This does, however, work only if the key to be bound
generates a single, alphanumerical character - these are usually all "white"
keys on the keyboard. Function keys and control keys like
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} or
@{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background} can't be bound
this way. However, this doesn't matter since their meaning is fixed and does
not depend on a national keyboard.



@{B}Key@{UB}

Type here the key you want to define. @{B}Remember@{UB}: Only alphanumerical
keys will be accepted in case the "by ASCII value" gadget on the left hand
side is checked. This gadget changes, too, slightly the function of the key
definition:


If it is not checked, SetVNC will ignore all qualifiers at the time you type
the key. They have to be selected with the gadgets below.


Almost the same rule holds if the "by ASCII value" gadget
@{B}is@{UB} checked, @{B}except for@{UB} the "Shift" qualifier which matters
and @{B}MUST@{UB} be pressed at the time the key is selected by typing it.



@{B}Left Shift@{UB}

If checked, the
@{FG Background}@{BG Text}Left Shift@{FG Text}@{BG Background} key must be
pressed together with the key selected above to invoke the function.


@{B}Right Shift@{UB}

If checked, the
@{FG Background}@{BG Text}Right Shift@{FG Text}@{BG Background} key must be
pressed together with the key selected above to invoke the function.

If both, left @{B}and@{UB} right Shift are checked, it won't matter whether
the left or the right shift key is pressed along with the key, i.e. the both
gadgets are combined by a logical "or" and there won't be a difference
between "left" and "right shift" at all. If only one of these two gadgets
are checked, then IT DOES matter. In this case, the keyboard function is
available if and only if the corresponding shift key is pressed.


These two gadgets are disabled if the "by ASCII value" gadget above is
checked. The "shift" qualifier is then determined by a different mechanism.
It must be pressed along with the key to be defined at the time you type in
this key in the "Key" gadget above.



@{B}Left Alt@{UB}

Selects the
@{FG Background}@{BG Text}Left Alt@{FG Text}@{BG Background} key as
qualifier.


@{B}Right Alt@{UB}

Ditto, but the
@{FG Background}@{BG Text}Right Alternate@{FG Text}@{BG Background} key.


If both, left and right Alt are selected, this means that the keyboard
function to be defined doesn't care about whether the left or the right
alt key was used to invoke it; thus, these two gadgets are coupled by an
"or". If only one of them is checked, the keyboard function will react only
if the corresponding alt key is used - left and right WILL matter.


@{B}Left Amiga@{UB}

This selects the
@{FG Background}@{BG Text}Left Amiga Key@{FG Text}@{BG Background} as
keyboard qualifier. This is the "Commodore" key on some keyboards.


@{B}Right Amiga@{UB}

This selects the
@{FG Background}@{BG Text}Right Amiga Key@{FG Text}@{BG Background} as
qualifier. This qualifier is usually used for menu operations, check if the
function you're going to define doesn't conflict with one of the menu keys.
The menu will usually take precedence unless no menu is attached to the
ViNCEd window.


If both, left and right Amiga keys are checked, you've really to press both
keys to invoke the function (which is kind of a hard trick, or at least
unconvenient). The gadgets are combined by "and", not "or".


@{B}Ctrl@{UB}

This selects the
@{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} key as qualifier.



@{B}NumL only@{UB}

The function is only available if the "NumLock" qualifier is active.


This does, to stress that again, @{B}NOT MEAN@{UB} that the keyboard key is
a key on the numeric keypad. It means @{B}ONLY@{UB} that the
@{"keyboard function" link KeyFunction} is only available if "NumLock" is
active, even though this makes mostly sense for, but is not limited to keys
on the numeric pad.

"NumLock" is a keyboard qualifier similar to the "Caps Lock" qualifier, with
the difference that there is no light on the keyboard to show its state. It
is, however, treated exactly in the same way.
The @{"keyboard function" link KeyFunction} that toggles this qualifier is,
obviously, called @{"Toggle NumLock" link Kf_Toggle_NumLock} and is usually
@{"bound" link KeyBind} to
@{FG Background}@{BG Text}Alt Num[@{FG Text}@{BG Background}.



As soon as you've completely defined the key to @{"bind" link KeyBind} the
@{"keyboard function" link KeyFunction} to, go to the
@{"second keyboard page" link SETVNC_KEYBOARD_2} to select this function.

@ENDNODE
@NODE SETVNC_KEYBOARD_2 "The Keyboard Page 2"
@TOC PagesToc
After selecting a proper key to be defined on the
@{"first keyboard page" link SETVNC_KEYBOARD_1}, this page is used to select
a function for the key, or to check the current keyboard definition.


The left hand side of the page is just a big "list view" gadget, to select
the functions from. The topmost selection is "(undefined)", meaning that
the key should not be bound to any function and should operate in its
"usual" way. Not all function keys need to be defined explicitly, some do
already have meanings by the Os - for example, you need not to bind the
@{FG Background}@{BG Text}Cursor Keys@{FG Text}@{BG Background} or the
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key, provided you
like the default operations of the keys. Same goes for the
@{FG Background}@{BG Text}Backspace@{FG Text}@{BG Background} and the
@{FG Background}@{BG Text}Delete@{FG Text}@{BG Background} keys, as well as
some other "basic" functions which are always available, even at unbound
keys; for example, the "Break" keys
@{FG Background}@{BG Text}Ctrl C@{FG Text}@{BG Background} to
@{FG Background}@{BG Text}Ctrl F@{FG Text}@{BG Background} are of this kind.


Thus, you'll be able to work with ViNCEd even with a broken or corrupt
preferences file.


There's a complete list of
@{"all keyboard functions" link KeyFuncList} available, together with the
explanations what these functions do and what they could be used for.



The right hand side of the page contains a box showing the current
key binding. Whenever you select a function from the left hand list, the
keys that invoke these functions are shown in the right hand box. In case
more than one key is bound to the selected function, the gadgets
@{B}"« Prev Key"@{UB} and @{B}"Next Key »"@{UB} select one binding after
another. If the function isn't bound to any key, this field is just
left blank. Please note that you've to use the
@{"Keyboard Page 1" link SETVNC_KEYBOARD_1} to change the binding, you won't
be able to enter keyboard sequences into this box; moreover, just browsing
with these gadgets doesn't perform any change on the definitions made so
far.


@{B}Accept@{UB}

Don't forget to press this button to perform the definition, or everything
is lost. It will accept your definition and bring you back to the
@{"first keyboard page" link SETVNC_KEYBOARD_1}.

@ENDNODE
@NODE SETVNC_EDIT_1 "The Edit Page 1"
@TOC PagesToc
This is the first edit page, used to define various cursor control related
settings. Please follow the links to find out more about these settings.

@{CODE}

@{"Unrestricted cursor movement" link Fl_DOSCURSOR}
@{"Don't scroll into the border" link Fl_SCROLLBORDERS}
@{"XTerm/CON: cursor mode" link Fl_XTERMCURSOR}
@{"Rigid XTerm cursor" link Fl_RIGIDCURSOR}
@{"Numeric keypad cursor control" link Fl_NUMPADMODE}
@{BODY}

@ENDNODE
@NODE SETVNC_EDIT_2 "The Edit Page 2"
@TOC PagesToc
This is the second edit page. It is used to setup the cursor shape and
properties, and some clipboard and @{"block" link BlockOps} related
settings. Please follow the links to find out more about these settings.

@{CODE}

@{"Underline cursor" link Fl_UNDERLINE}
@{"Blinking cursor" link Fl_BLINKING}
@{"Don't write printed text into clipboard" link Fl_CUTUSER}
@{"Implicit copy after text marking" link Fl_AUTOCOPY}
@{"Disable middle mouse button" link Fl_DISABLEMMB}
@{BODY}

@ENDNODE
@NODE SETVNC_EDIT_3 "The Edit Page 3"
@TOC PagesToc
The third page controls the @{"ANSI coloring" link AnsiColors} features, and
the delete, backspace and overwrite controls. Please follow the links below
to find out more about the various settings

@{CODE}

@{"ANSI colors as default" link Fl_ANSIMODE}
@{"Inverse ANSI coloring" link Fl_ANSIREVERSE}
@{"Standard CR insertion at start of line" link Fl_CRINSERT}
@{"Disable BS at start of line" link Fl_NOBSSTART}
@{"Overwrite mode" link Fl_OVERWRITE}
@{BODY}

@ENDNODE
@NODE SETVNC_EDIT_4 "The Edit Page 4"
@TOC PagesToc
The fourth edit page controls miscellaneous settings, the type ahead buffer
and the window alignment on resize. Please follow the links to find out more
about the flags here.

@{CODE}

@{"Invisible type ahead" link Fl_TYPEAHEAD}
@{"Keep bottom of window adjusted" link Fl_SCROLLTOBOTTOM}
@{BODY}

@ENDNODE
@NODE SETVNC_SHELL_1 "The Shell Page 1"
@TOC PagesToc
The first shell page controls how and when ViNCEd closes its windows,
and selects the shell mode. Please follow the links to find out more about
the settings on this page.

@{CODE}

@{"Call macro to close window" link Fl_SMARTCLOSE}
@{"Prevent accidental window closing" link Fl_SAFERCLOSE}
@{"Enable close requester" link Fl_CLOSEREQ}
@{"Use shell mode by default" link Fl_SHELLMODE}
@{"Don't send EOF until everybody waits" link Fl_CLOSEQUEUE}
@{BODY}

@ENDNODE
@NODE SETVNC_SHELL_2 "The Shell Page 2"
@TOC PagesToc
The second shell mode controls the history buffer, the
@{"TAB expansion" link TabExpand} cache and the RAW mode
@{"scrollers" link Gadgets}.



@{"History buffer wraps around" link Fl_WRAP}

@{"Keep duplicates in the history" link Fl_KEEPDOUBLES}

@{"Enable scrollers in RAW mode" link Fl_RAWSCROLLERS}



@{"Cached directories" link Fl_CACHESIZE}

@ENDNODE
@NODE SETVNC_SHELL_3 "The Shell Page 3"
@TOC PagesToc
The third shell page controls various flags of each of the six
pairs of @{"TAB expansion" link TabExpand} keyboard functions. Which pair is
currently edited is printed directly below the headline of this page and can be
selected by the "« Prev" and "Next »" gadgets right to it.


Here's the list of options on this page; please follow the links to find out
more about what these do:

@{CODE}

@{"Double TAB Requester" link EXPAND_DOUBLEREQ}
@{"First TAB Expands fully" link EXPAND_FULLEXPAND}
@{"Requester if expansion is ambiguous" link EXPAND_AMBIGREQ}
@{"Add ViNCEd matches to the requester" link EXPAND_VNCREQUESTER}
@{BODY}

More about the TAB expansion in general is available in the form of a
@{"tutorial" link TabExpand}, there's also a list of
@{"all TAB related settings" link Tab_Settings} available. Extensions
to the settings on this side can be found on the
@{"next shell page" link SETVNC_SHELL_4}.



@ENDNODE
@NODE SETVNC_SHELL_4 "The Shell Page 4"
@TOC PagesToc
The fourth shell page presents even more TAB expansion flags for each of the
six TAB expansion functions.


Again, the list of flags to be found on this page:

@{CODE}
@{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
@{"List expansions on the console" link EXPAND_INTOCONSOLE}
@{BODY}

More about the TAB expansion in general is available in the form of a
@{"tutorial" link TabExpand}, there's also a list of
@{"all TAB related settings" link Tab_Settings} available. Basic TAB
expansion settings can be found on the
@{"previous shell page" link SETVNC_SHELL_4}.

@ENDNODE
@NODE SETVNC_SHELL_5 "The Shell Page 5"
@TOC PagesToc
The fifth shell page is used to setup the priority ViNCEd assigns to
various objects found on a TAB expansion search. The entries of higher
priority are shown earlier, on top of the TAB expansion list; hence, you
need less keyboard presses to reach them. Objects with a priority of -128 or
below aren't added to the list at all and will be dropped. That means
specifically that you may disable certain object classes completely by
assigning them a priority of -128.


There are six sets of priorities, one for each pair of a
@{"TAB expansion" link TabExpand} @{"keyboard function" link KeyFunction}.
Which pair is currently edited is shown right below the headline of this
page, and it can be selected with the "« Prev" and "Next »" gadgets right to
this headline.


Here's now the list of all available priorities; please follow the links to
find out more about which objects they control:

@{CODE}

@{"Files" link EXPAND_FILE_PRI}                   @{"Dirs" link EXPAND_DIRECTORY_PRI}                    @{"Icons" link EXPAND_INFO_PRI}
@{"Devices" link EXPAND_DEVICE_PRI}                 @{"Assigns" link EXPAND_ASSIGN_PRI}                 @{"Volumes" link EXPAND_VOLUME_PRI}
@{"Path" link EXPAND_PATH_PRI}                    @{"C: Dir" link EXPAND_COMMAND_PRI}                  @{"Resident" link EXPAND_RESIDENT_PRI}
@{"Scripts" link EXPAND_SCRIPT_PRI}                 @{"Executables" link EXPAND_EXEC_PRI}

@{BODY}
Your priorities get "adjusted" a bit if you search for a directory or a
device explicitly, i.e. the @{"template" link Template} ends either with a
forwards slash "/" or with a colon ":". In this case, all other file types
except directories or devices/assigns/volumes are ignored and the priority
of the file type looked for is eventually raised from -128 to -127. This
means especially that even if you disabled directories explicitly, searching
for an object ending with "/" will actually match something.


@{B}Please note@{UB} that most files on an Amiga device will match the
"Executables" category, @{B}NOT@{UB} the "Files" category. This is because
the "e" bit of most files, indicating an executable, is usually set.


To find out more about the TAB expansion, consider reading the
@{"tutorial" link TabExpand} or check the list of
@{"all available" link Tab_Settings} TAB expansion settings.

@ENDNODE
@NODE SETVNC_SHELL_6 "The Shell Page 6"
@TOC PagesToc
The sixth shell page controls the qualifiers of the
@{"icon drop" link IconDrop} feature of ViNCEd.


If you hold one of the keys listed on this page while you're dropping an
icon of the workbench in the ViNCEd window, only the path or the name of the
icon will be inserted.


The left hand gadgets control which keys must be pressed to insert only the
name of the icon, the right hand side is used to specify the keys for
inserting the path only.

Please note that ViNCEd does not distinguish between the
left and right Shift or Alt key here, each of them will work.


More than one gadget can be checked if you want to enable these functions
with pressing more than one key at once. Please avoid selecting the same
qualifier on both sides, or selecting no qualifier at all. This is valid for
ViNCEd, but may result in disabling the regular icon drop feature.

@ENDNODE
@NODE SETVNC_SHELL_7 "The Shell Page 7"
@TOC PagesToc
This page is used to setup the position and the size of the
@{"TAB expansion" link TabExpand} requester.

Please follow the links for details:

@{CODE}

@{"Left Edge" link Fl_REQ_LEFTEDGE}                       @{"Top Edge" link Fl_REQ_TOPEDGE}

@{"Width" link Fl_REQ_WIDTH}                           @{"Height" link Fl_REQ_HEIGHT}

@{BODY}

@{"Do not place file requester" link Fl_DONTPLACEREQUESTER}

This flag must be disabled, or the requester dimensions above will be
ignored. This is a workaround against a feature of the "ReqChange/ReqTools"
program that interprets the requester positions in a different way.

@ENDNODE
@NODE SETVNC_WINDOW_1 "The Window Page 1"
@TOC PagesToc
The first window page page is used to setup the size of the review and
history @{"buffers" link Buffers}, and controls the default monitor and the
default font used by ViNCEd.



@{B}History lines@{UB}

Enter here the number of lines kept in the
@{"command history" link History} which holds all previous commands
entered. Using the @{"History Up" link Kf_History_Up} and
@{"History Down" link Kf_History_Down}
 @{"keyboard functions" link KeyFunction}, these inputs can be again made
visible. This must be a number between 5 and 4096.


@{B}Upper display size@{UB}

Choose the number of lines hold in the upper display
@{"buffer" link Buffers}. This buffers keeps lines that are scrolled off the
top edge window. You can redisplay them by using
the @{"scroller" link Gadgets} on the right side of the window, or by
scrolling into this buffer using the cursor movement
@{"keyboard functions" link KeyFunction}.

As a rule of thumb, the upper display buffer should be half the size of the
Lower display buffer, or bigger. The minimal possible size is 64, the
maximal size is 4096 lines. If the upper display buffer overflows, which is
usual when scrolling big directory lists, the topmost line gets lost. So if
your listing does not fit, enlarge this buffer.


@{B}Lower display size@{UB}

As you already might have thought, this is the number in the lower display
@{"buffer" link Buffers}, which keeps the lines scrolled off the lower
edge of the window and the text in the window itself. This buffer should be
AT LEAST as big as the number of lines visible in the biggest possible
window, values can range here from 128 to 4096. But I advice you to choose
the size of the lower buffer at least twice the size of the upper buffer,
since many lines go in this buffer if you scroll backwards to see the top of
the window. If the buffer is too small, your latest outputs will be lost
when scrolling back to the bottom of the text.



@{B}Monitor@{UB}

This gadget is used to setup the default monitor ID when ViNCEd opens its
own screen, using some special @{"window path" link OpenPath} qualifiers.

The left hand button gives a screen mode requester if available - please
select here your preferred monitor for ViNCEd screens.


The string gadget at the right side must be used if no screen requester is
available (like for people still using the 1.3 or 2.0 workbench). Hex
notation using "0x" or "$" is valid here, but the upper sixteen bits (the
monitor ID itself) are ignored if you run ViNCEd on a 1.3 workbench.



@{B}Font@{UB}

Select here the default font to be used in ViNCEd windows; this is
@{B}NOT@{UB} the font used for the menus which is taken from the
screen the ViNCEd window appears on. It's the font used used for
text in the window itself. Pressing the button yields a standard font
requester, please choose a @{B}non-proportional@{UB} font for ViNCEd here.


The string gadget next to the button is useful for setting up the font
manually if no font requester is available. Enter here the name of the font
without ".font", followed by a "." and the size as a decimal number. Hence,
the string "topaz.8" will select the topaz font, size eight as the default.


This setting can be overridden by the @{"FONT" link Op_Font} argument in the
@{"window path" link OpenPath} specified for a ViNCEd stream.


If you leave this gadget empty, the system default font will be used here.


Please note that the screen default font (and hence the font used for the
menus) can not be selected with this gadget! This is up to the screen on
which ViNCEd opened its window. The screen font of custom screens is
currently not under control of ViNCEd and can be changed thru the system
font preferences only.


If you want to find out how to setup the colors of the ViNCEd custom
screens, read the @{"next page" link SETVNC_WINDOW_2}, too.

@ENDNODE
@NODE SETVNC_WINDOW_2 "The Window Page 2"
@TOC PagesToc
This page is completely dedicated for setting up the colors of ViNCEd custom
screens or for the ANSI pens. ViNCEd will open on a custom screen if some of
the arguments in the @{"window path" link OpenPath} say so; the colors
defined on this page will then be loaded into the hardware. The
@{"ANSI colors" link ANSIColors} define, however, which text rendering color
is assigned to which screen pen, if this feature is enabled - which is
either done by the @{"third edit page" link SETVNC_EDIT_3} or the
@{"ANSI" link Op_ANSI} @{"window path" link OpenPath} argument; unlike the
standard console, ViNCEd text rendering pens are not restricted to the first
eight pens in a palette. ANSI colors can then be used even on non-custom
screens: ViNCEd will try to allocate a public pen which matches the desired
color most closely. More about ANSI colors is in
@{"a separate section" link ANSIColors}.


ViNCEd holds sixteen color definitions, plus one selectable cursor color.
To select the color you'd like to edit, use the "« Prev" and "Next »"
buttons under the color sample. The cursor color is "left to" the color
index #0, and is indicated by a "Cc" under the color sample box.


To edit one color, you have to select first the usage of this color with the
two checkmark gadgets near the bottom of the window:


@{B}Load register@{UB}

Try to load this color into the shown hardware register.


@{B}Define ANSI mapping@{UB}

Don't define a hardware register, but the default color for the ANSI mode.
The color index is in this case not the hardware register number, but
the ANSI pen number. This flag works also for public and workbench screens,
but doesn't load a color register unless no other matching pen was found.


Since the color setup can be a tricky business, there's a
@{"separate section" link Fl_Color} available just explaining these two
flags you should check.



@{B}The sliders@{UB}

Checking either or both check marks makes the sliders at the left
hand side of the page available. They are used to setup the red, green and
blue component of the color. A color box at the right side of the page
displays a sample of this color.


@{B}REMARK@{UB}: It might happen that you can't see a sample of the color
beneath the sliders cause all screen colors are allocated by other programs.
In this case SetVNC tries to allocate a hardware sprite to display an
additional color. This will yield to a rather strange behavour of this
color box. For example, it might "jump" out of the window when moving the
window around, or might disappear if you activate a different window. This
is due to hardware limitations! It might even fail to appear at all, either
if no hardware sprite or no DMA time is available! This might happen with
hacked monitor drivers or overscanned screens. Please note that it is hard
enough to display an additional color on a four or eight color workbench! No
problems should arise on Gfx boards cause they offer usually enough free
pens that are used in this case instead.

@ENDNODE
@NODE SETVNC_WINDOW_3 "The Window Page 3"
@TOC PagesToc
The purpose of this page is to setup the defaults for which
@{"gadgets" link Gadgets} should be added to a VinCEd window. Please follow
the links below to find out more about the flags here:

@{CODE}

@{"Don't add close gadget by default" link Fl_NODEFAULTCLOSE}
@{"Don't add iconify gadget by default" link Fl_FORBIDICONIFY}
@{"Disable horizontal scroller" link Fl_DISABLEPROPX}
@{"Disable vertical scroller" link Fl_DISABLEPROPY}

@{BODY}

@ENDNODE
@NODE SETVNC_TIMING_1 "The Timing Page 1"
@TOC PagesToc
The timing of ViNCEd is setup by this page. This is not only the blink speed
of the cursor - if you turned that @{"on" link SETVNC_EDIT_2} - but also two
delay rates for refresh and scrolling.


All timings in this page are measured in milliseconds, that is a thousands
of a second. The screen of a usual TV is refreshed every 20 or 17
milliseconds, depending on the system, PAL or NTSC. Values can be entered as
the number (in "ms"), or chosen with the slider right to the gadget.


Please follow the links below to find out more about what these values mean:

@{CODE}

@{"Cursor blink speed" link Fl_BLINKSPEED}
@{"Vertical scroll threshold" link Fl_SCROLLTIME}
@{"Rebuild delay" link Fl_REBUILDTIME}
@{"Double TAB time interval" link Fl_DOUBLETABTIME}
@{BODY}

and finally, there's one checkmark-gadget that enables ViNCEd "turbo
scrolling"; If this gadget is not checked, ViNCEd scrolls like the usual
CON: handler and the timing values above are irrelevant.

@{CODE}

@{"Allow delayed window refresh" link Fl_REBUILDDELAY}
@{BODY}
This check item can be found in the @{"settings menu" link SettingsMenu},
too. It is called "Rebuild Delay" there.

@{CODE}

@ENDNODE
@NODE SETVNC_SYSTEM_1 "The System Page 1"
@TOC PagesToc
The first system page controls certain internal settings of ViNCEd you
usually shouldn't mess around, i.e. @{B}hands off!@{UB}. Editing this,
and the other system pages is usually not required, except at installation
time probably.


@{B}ViNCEd Guide Path@{UB}

Enter here the @{B}complete@{UB} path to the ViNCEd.guide that came with the
ViNCEd archive (and you are currently reading). The gadget left to the path
name will bring up a file requester, to help you locating the guide.


If you want to make the online guide system working, please make sure that:

o) The path of the guide is correctly setup in this gadget

o) The default tool of the guide itself is setup properly. To change it,
locate the guides icon on the workbench, click it ONCE with the mouse and
select "Info" from the workbench's icon menu. Enter as "Default Tool" in the
upcoming window the COMPLETE PATH of your favorite guide browser; this
should be "SYS:Utilities/Multiview" for Workbench 3.0 and up,
"SYS:Utilities/AmigaGuide" for all other systems. "Multiview" comes with
version 3.0 and 3.1 of the workbench, the "AmigaGuide" can be found in the
AmiNet, for both versions of the OS, 2.0 and 1.3. However, the last one is a
bit buggy (I had some crashes while testing it), and I recommend you to
upgrade your system in that case.


@{B}Note@{UB}: If you can't leave this page, make sure that the path to the
guide is setup correctly. ViNCEd will not allow you to specify an invalid
setting here.


The next four gadgets control various functions of ViNCEd; please follow the
links to find out what they do:

@{CODE}

@{"Word wrap workaround" link Fl_NCURSESFIX}
@{"Line break at right border" link Fl_SMALLDISPLAY}
@{"Inhibit horiz. scrolling by DOS output" link Fl_NOPRINTSCROLL}
@{"VT-220 compatibility mode" link Fl_VTMODE}
@{BODY}

@ENDNODE
@NODE SETVNC_SYSTEM_2 "The System Page 2"
@TOC PagesToc
The second system page controls various internal ViNCEd settings you usually
do not want to change. Especially, selecting a flag here might easely cause
compatibility problems, so just leave them alone.


To find out what these flags do, just follow the links below:

@{CODE}

@{"Destructive DEL and BS" link Fl_DOSERASE}
@{"Insertion mode for DOS output" link Fl_DOSINSERT}
@{"Notify DOS about paste" link Fl_AUTOPASTE}
@{"Extended colors instead of bold" link Fl_BOLDEXTCOLORS}
@{"No insertion into border" link Fl_SHORTSCREENINSERT}
@{BODY}

@ENDNODE
@NODE SETVNC_SYSTEM_3 "The System Page 3"
@TOC PagesToc
This page is used to setup various @{"system macros" link Macros} needed by
ViNCEd for internal control. They are somewhat similar to the user macros
except that they are not available thru the
@{"macros menu" link MacrosMenu} in a ViNCEd window.


To find out more about how macros and the closely relied buttons are
expanded, and about the special patterns and control sequences that can be
used in them, read @{"the macros section" link Macros}.



@{B}Quit shell@{UB}

This macro is expanded by ViNCEd on a request to close the window if a shell
is waiting for input in this window. This is only done if the
@{"Call macro to close window" link Fl_SMARTCLOSE} flag in the
@{"first shell page" link SETVNC_SHELL_1} is selected, otherwise a "End Of
File" condition is generated. Something like an "EndCLI" command should be
placed here. The code $02 which is present in the default setting of this
macro is the @{"rewind history" link Kf_Rewind_History}
 @{"keyboard control sequence" link KeyboardList} and erases
the complete line before inserting the macro itself. A more sophisticated
use of this macro would call a shell script which, for example, could erase
temporary files created by a compiler session, and much more.

If you leave this macro empty, an EOF condition will be sent to the shell.



@{B}Quit program@{UB}

This system macro will be expanded if the user presses the close gadget of a
ViNCEd window while a program is being executed in it. It can be used
to abort the command by sending a @{"Ctrl-C" link Kf_Send_Ctrl_C} or to send
an EOF condition by leaving it empty.



@{B}New window@{UB}

This macro gets expanded on selection of the "New Window" item in the
@{"project menu" link ProjectMenu}. It should bring up a new shell window, so
something like a "NewCLI" command is the best choice. If you use a custom
shell, enter here a similar command.

A second use of this macro would be to invoke a new editor window in a
compiler session.



@{B}Fork new shell@{UB}

This one is unique because it is not expanded into the keyboard buffer like
all the other macros. Instead, it is sent directly to the shell segment for
execution.

The macro, which is part of the @{"job control" link CtrlZ} of ViNCEd is
used when a new shell is requested by a press of
@{FG Background}@{BG Text}Ctrl-Z@{FG Text}@{BG Background}. It should
bring up a new shell in the current window. If you use a custom shell,
insert here a command similar to "NewShell WINDOW=*".


@{B}REMARKS@{UB}: Since this macro is executed rather than inserted as
key-presses, it @{B}must@{UB} be terminated by a line feed sequence "\\n"
(ASCII 0A = 10) instead of a RETURN key press "\\r" (ASCII 0D = 13).

The execution of this macro causes usually a re-execution of the
S:Shell-Startup sequence. A usual problem with this is that you have to
make this script re-entrant, i.e. stable for re-execution. One of the
problems that may arise is the setting of pipe characters, namely the
commands
@{CODE}

Set _pchar |
Set _mchar ||

@{BODY}
Since on the second call, the definition of the pipe characters is
interpreted as a pipe itself, this won't work. Change the lines to avoid the
interpretation of the characters "|" and "||" by the shell:
@{CODE}

Set _pchar "|"
Set _mchar "||"

@{BODY}
Note the double quotes!



@{B}Get help@{UB}

Invoked if the user presses the "Help key" (or, to be precise, the key that
generates the @{"Help" link Kf_Help}
 @{"keyboard function" link KeyFunction}) or selects the "Help" item of the
@{"project menu" link ProjectMenu}. This macro should bring up some help
related to the current work. By default, the
@{"SetVNC" link SetVNCToc} program is invoked to display the ViNCEd help
pages, i.e. this guide. See also
@{"the command line arguments" link SetVNCShellArgs} of SetVNC for details
which arguments to use.

A fine use of this macro would be to bring up the help pages of a compiler.


@ENDNODE
@NODE SETVNC_SYSTEM_4 "The System Page 4"
@TOC PagesToc
The purpose of this page is to setup various system macros - look-alikes of
the usual @{"user macros" link Macros} which are required for internal
operation of ViNCEd which do not appear in the
@{"macros menu" link MacrosMenu}. It's also used to define other string
resources of ViNCEd. It's usually not required to change these settings
except at installation time.



@{B}Edit settings@{UB}

A system macro that gets expanded if the user selects the
@{"Settings" link ProjectMenu} item in the project menu. By default, this
brings up the @{"SetVNC preferences" link SetVNCGui} editor to change
the settings of the window, but it might be quite useful to bring up a
settings editor of a compiler, for example.



@{B}Icon Path@{UB}

Enter a complete path to an icon (".info" - file) which should pop up if a
ViNCEd window gets iconified. The position of the icon is also relevant, so
it is probably a good idea to "UnSnapshot" it before using it for ViNCEd.


A ".info" @{B}MUST NOT@{UB} be appended, that's done by ViNCEd
automatically.


If this string is left black, ViNCEd will use its default icon, a simplified
four color shell like window.



@{B}Icon title@{UB}

This string specifies the default title used for the icon, i.e. the name
that appears together with the icon on the workbench screen. If this string
is left blank, the window title appears by default. However, a program might
choose to setup its own title by the
@{"ESC sequence" link EscList} "ESC ] 1; title BEL" that overrides this
setting. The same control sequences as in the
@{"window title" link Title} are available in this string as well, but since
the icon title can't be changed too easely once ViNCEd has been iconified,
it will be only expanded once, namely when the window gets iconified.



@{B}Default path@{UB}

If ViNCEd was invoked just by the name of the handler and no
@{"window path" link OpenPath} at all, i.e. by using just "VNC:" as
device specifier without additional arguments, this path will be used
instead. It must consist of a @{"window path" link OpenPath} like string
except that the device specification in front of it @{B}must not@{UB} be
given, i.e. no leading "VNC:" or "CON:".


@{B}Note@{UB}: Due to a "feature" of the 1.3 Mount command, this is disabled
for older Os releases. Opening a window just with the handler name will (and
has to!) fail for these releases.


@ENDNODE

@REMARK SetVNC command line only arguments
@NODE Ca_QUIET "QUIET (SetVNC argument)"
@TOC SetVNCShellArgs
Suppress verbose output, print only error messages. DO NOT REDIRECT SETVNC
OUTPUT TO NIL: SINCE THE OUTPUT STREAM IS NEEDED TO FIND THE CONTROLLING
VINCED WINDOW!
@ENDNODE
@NODE Ca_MOUNT "MOUNT/K (OVERRIDE/S AS) (SetVNC argument)"
@TOC SetVNCShellArgs
An argument that comes with additional subarguments. Its general use is to
mount the ViNCEd handler explicitly, mostly to replace a different handler
like CON: or RAW: by VNC. Everything else should be done with a standard
mount icon in "Devs:Dosdrivers".

A line like
@{CODE}

SetVNC mount override as CON

@{BODY}
in your startup-sequence will replace for example the standard CON: handler
by ViNCEd. Similarly,
@{CODE}

SetVNC mount override as RAW

@{BODY}
will replace the RAW: handler by the @{"RAW" link ConsoleModes} version of
ViNCEd, if you want to do so, too.



At least one sub argument is required for "MOUNT", namely the name of the
handler that should be replaced by ViNCEd, as an argument to the "AS"
keyword - which itself may be dropped. However, using only these arguments
SetVNC will not try to replace an already loaded handler.


Since both the CON: and the RAW: handler ARE already loaded when the Os is
booting, SetVNC must be called with the @{B}OVERRIDE@{UB} parameter to
unload the already loaded handlers and to replace them by ViNCEd. Therefore,
an @{B}OVERRIDE@{UB} almost always mandatory.

@ENDNODE
@NODE Ca_HELP "HELP/S (SetVNC argument)"
@TOC SetVNCShellArgs
Using this argument, SetVNC invokes the online help, meaning this guide.


To do so, it first reads the path of the ViNCEd guide from the
ENV:VNCGuide.path variable, then checks the "Default Tool" of the guide file
and runs this tool to display the guide.


All these details are usually setup as part of the installation procedure
and you should not modify them by hand.


However, in case you move this guide to a different location, you should
inform SetVNC about it and correct the internal information using the
@{"first system page" link SETVNC_SYSTEM_1}.


In case you prefer a different browser for the guide, just use the workbench
menu item "Info" on the guide icon and change the "Default Tool" of this
guide. SetVNC will respect this setting for setting the guide.

@ENDNODE
@NODE Ca_BACKGROUND "BACKGROUND/S (SetVNC argument)"
@TOC SetVNCShellArgs
This is part of the @{"job control arguments" link SetVNCJobs} of SetVNC. It
puts the current @{"foreground job" link JobCtrl} into background and makes
the next available job the foreground job.


Details about the job control arguments are in a
@{"separate section" link SetVNCJobs}.

@ENDNODE
@NODE Ca_FOREGROUND "FOREGROUND/K (OTHER/S CLI/N)"
@TOC SetVNCShellArgs
This is part of the @{"job control arguments" link SetVNCJobs} of SetVNC. It
puts the job associated to the CLI number given for this argument to
@{"foreground" link JobCtrl}, and releases the current job into background.


This works only for jobs running in the ViNCEd window the SetVNC command was
invoked from, unless you specified the "OTHER" parameter of this argument as
well. However, "OTHER" should be used in emergency situations only since it
is not completely safe.


Details about the job control arguments are in a
@{"separate section" link SetVNCJobs}.

@ENDNODE
@NODE Ca_FREEPOINTER "FREEPOINTER/S (SetVNC argument)"
@TOC SetVNCShellArgs
This argument is a workaround against a design problem of the AmigaDos.

Calling
@{CODE}

SetVNC FreePointer

@{BODY}
will re-allow iconification and closing of @{"AUTO" link Op_AUTO} style
windows which might have been disabled by various programs, most notably
the "More" browser. A @{"workaround script" link Scripts} has been put into
the S: directory by the installation procedure using this command after
running "More".


However, one "SetVNC FreePointer" will un-do the effect of exactly one
"More" command (or to be precise, the effect of one ACTION_DISK_INFO). If
you run "More" more than once, you might want to use the even stricter form
@{CODE}

SetVNC FreePointer All

@{BODY}
which will revert the side effects of ALL "More" commands at once.



There exists a documented method of obtaining information about the
"intuition window" associated to a shell window. However, not each ViNCEd
stream has to be attached to a window at all - for example, an
@{"AUTO" link Op_AUTO} style window which has not been opened yet, or an
iconified ViNCEd window does not have this structure. This means that, as
soon as this information is requested, a window must be opened.


That wouldn't be a problem by itself, but there is NO documented way of
returning this information which means that it is NOT clear whether this
structure is needed any more or not. Since it is quite dangerous to release
a resource a program might still need, but there is no standard way of
releasing this resource at all, a ViNCEd stream from which this information
was requested may neither get iconified nor closed in any other way except
for shutting down the stream completely.


ViNCEd, however, introduces a way of giving this resource back - check the
@{"DosPackets" link PacketList} section in case you're a program author and
going to implement something like this.


This argument uses this documented way of giving the resource back, but does
not ensure that it is, indeed, no longer required. That is, unfortunately,
your job. Use it wisely! Calling "SetVNC FreePointer", or even worse,
"SetVNC FreePointer All" at a time WHERE this intuition window structure IS
still required, and then iconifying the window will definitely crash the
system. There is, unfortunately, no standard way of finding out whether
"FreePointer" is safe or not.

@ENDNODE
@NODE Ca_SETCONSOLE "SETCONSOLE/S"
@TOC SetVNCShellArgs
This argument is rarely used, and should be avoided. It is definitely for
"experts only". What it does is that it sets the "Console Task" pointer of
the calling shell to the console controlling the output stream of the SetVNC
program on invocation.


This effectively changes the @{"owner" link Owners} of the task using this
console pointer. However, this is rarely required.

@ENDNODE
@NODE Ca_Load "LOAD/K (PREFS/S GLOBAL/S WINDOW/S DEFAULT/S LAST/S FROM) (SetVNC Argument)"
@TOC SetVNCShellArgs
This loads the ViNCEd preferences from a specified position, usually to edit
them with the SetVNC @{"user interface" link SetVNCGui} or to install them
in the window SetVNC was called from. The following parameters are available:


@{B}PREFS/S@{UB}:

Loads the globally active preferences.


@{B}GLOBAL/S@{UB}:

Identically to the keyword "PREFS".


@{B}WINDOW/S@{UB}:

Loads the preferences used in the window SetVNC was invoked from. This is
the default location where SetVNC reads the preferences from if they are
required, for example for the GUI, and no other LOAD option was specified.


@{B}DEFAULT/S@{UB}:

Loads the SetVNC "factory default" settings.


@{B}LAST/S@{UB}:

Loads the "Last Saved" preferences, i.e. those that have been saved back to
disk. This is not necessarily identical to "GLOBAL", which represent the
settings that have been made active by the "Use" button of the
@{"SetVNC GUI" link SetVNCGui} alone.


@{B}FROM@{UB}:

An parameter requiring an additional argument, namely the file name of a
preferences file previously saved with SetVNC. The preferences data is then
loaded from the given file. The "FROM" argument itself can be dropped if a
file name is provided.

@ENDNODE
@NODE Ca_PREFS "PREFS/S (SetVNC argument)"
@TOC SetVNCShellArgs
This switch disables the "To Window" button in the
@{"SetVNC user interface" link SetVNCGui} and changes the default operation
of the LOAD and SAVE keywords to load or save the global rather than the
local window preferences. Thus, it turns SetVNC into a preferences editor
for the global ViNCEd settings rather than for the local settings. Usually
not required unless you really want to modify the global preferences.


This flag is, for example, used by the "SetVNC" icon in the Prefs drawer of
your system.

@ENDNODE
@NODE Ca_PUT "PUT/K (SCREEN HISTORY) (SetVNC argument)"
@TOC SetVNCShellArgs
This keyword saves the @{"review buffer" link Buffers} or the
@{"command history" link History} to a text file.



@{B}PUT SCREEN@{UB}

this takes an additional parameter, namely a file name to save the screen
contents as. The output file will be a text file with some
embedded @{"CSI sequences" link CsiList} that describe the style and type of
the text in the @{"display buffers" link Buffers}, as for example whether it
was typed in as input or printed output. This file can be later on reloaded
with the @{"GET" link Ca_GET} argument and will be placed into the display
buffer. You could, in principle, simply copy it to the console using either
the "type" or "copy" command, but the direct SetVNC approach is not
only faster, but also restores user input as user input, which a simple copy
operation is not able to do.


@{B}PUT HISTORY@{UB}

takes an additional parameter, the file name to save the
@{"history contents" link History} under. The output file will be a plain
ASCII file. It can be restored later on with the
@{"GET" link Ca_GET} argument.

This argument is, for example, used by the @{"history" link Scripts} shell
script to prompt the history contents on the screen.


@ENDNODE
@NODE Ca_GET "GET/K (SCREEN HISTORY) (SetVNC argument)"
@TOC SetVNCShellArgs
This keyword loads the @{"review buffer" link Buffers} or the
@{"command history" link History} from a text file.



@{B}GET SCREEN@{UB}

this takes a file name as an additional parameter, the file to load the
@{"review buffer" link Buffers} from. The file might include
a subset of known @{"control sequences" link CsiList} that describe the
style and the type of the text, i.e. whether it was printed or typed input.
Note that this attribute cannot be restored simply by "type"ing or "copy"ing
the text file to the screen, but note further that only a small subset of
the @{"CSI sequences" link CsiList} usually known are valid here, mostly for
speed reasons.


@{B}GET HISTORY@{UB}

loads the @{"command history" link History} from a given text file and
replaces the currently active history completely.

@ENDNODE
@NODE Ca_RESET "RESET/S (SetVNC argument)"
@TOC SetVNCShellArgs
If this argument switch is present, SetVNC will reset the terminal emulation
on exit, using the "Esc c" @{"escape sequence" link EscList}.

@ENDNODE
@NODE Ca_MONITOR "MONITOR/A (SetVNC argument)"
@TOC SetVNCShellArgs
This argument is similar to the @{"MONITORID" link Fl_MONITORID} argument in
the sense that it sets the default monitor which ViNCEd should use to open
on its own screen. The difference is that the argument to "MONITOR" must be
the name of the monitor as it shows up in the monitor data base, and not the
ID of the monitor.

The monitor database can be browsed, for example, by the "ScreenMode"
preference editor.


@{B}Be warned@{UB}: Monitor names depend on the localization, hence do
not use this argument in script files that should run on Amigas localized
for a different language.


Examples:
@{CODE}

SetVNC Monitor "NTSC:High Res"

@{BODY}
sets the default view mode for screens to be used by ViNCEd to NTSC high
res. Please note the double quotes required to enclose the white space of
the argument.

@ENDNODE
@NODE Ca_MODIFY "MODIFY/S (SetVNC argument)"
@TOC SetVNCShellArgs
This argument must be given to run the
@{"graphical preferences editor" link SetVNCGui} of SetVNC. This "MODIFY" is
implicit if no argument is given at all, but required to launch the editor
in all other cases.


For example, the following line would load the preferences from a file named
"foo", and display them in the SetVNC editor:
@{CODE}

SetVNC LOAD foo MODIFY

@{BODY}

@ENDNODE
@NODE Ca_SAVE "SAVE/K (NOICONS/S PREFS/S GLOBAL/S WINDOW/S TO) (SetVNC argument)"
@TOC SetVNCShellArgs
This argument together with its parameters will save or install the
preferences in various destinations. The preferences that will be saved
are either the preferences of the window SetVNC was invoked from, or any
other source specified with the @{"LOAD" link Ca_LOAD} argument, possibly
modified with the @{"preferences editor" link SetVNCGui} if the
@{"MODIFY" link Ca_MODIFY} switch was used.


@{B}NOICONS@{UB}

This is simply a parameter to "SAVE" to tell SetVNC not to save an icon
along with the preferences file.



@{B}PREFS@{UB}

Saves the preferences at their default location in ENV:ViNCEd.prefs and
ENVARC:ViNCEd.prefs and activates them such they will be used by all windows
that will open afterwards. @{B}This does not@{UB} change the configuration
of any window already open. This is identical to what the "Save" button in
the @{"preferences editor" link SetVNCGui} does except that it does not
change the configuration of the window SetVNC was invoked from.


@{B}GLOBAL@{UB}

Makes the preferences system wide available and saves them to
ENV:ViNCEd.prefs, but does not save them permanently to disk. This command
@{B}does not@{UB} change the configuration of windows already open, it is
identical to the "Use" button of the
@{"preferences editor" link SetVNCGui} except that it does not change the
configuration of the active window.


@{B}WINDOW@{UB}

Installs the preferences in the window SetVNC was invoked from. Does not
change the configuration of other windows, neither the currently active
configuration nor that on disk.


@{B}TO@{UB}

This parameter takes an additional sub argument, the name of a file to save
the preferences in. The settings saved in this file can be restored later on
with the @{"LOAD" link Ca_LOAD} argument. This parameter does not install
the preferences in any window nor are the preferences made available for
other windows. If a file name is present, the keyword "TO" can be omitted
completely.


@ENDNODE
@NODE Ca_IFVNC "IFVNC/S (SetVNC argument)"
@TOC SetVNCShellArgs
This argument checks whether SetVNC was run from a ViNCEd shell or not. The
return code 5 is set if not, otherwise a 0 is returned. This return code can
be used in script files, using a following "if" instruction to check whether
the script was run from a ViNCEd shell.


To give an example how this could be used:
@{CODE}

SetVNC IfVNC
if WARN
        echo "Ugly old console running"
else
        echo "Yeah, ViNCEd active"
endif

@{BODY}

@ENDNODE

@REMARK Flags
@NODE Fl_REBUILDDELAY "Rebuild Delay/REBUILDDELAY (Prefs Flag)"
@TOC SETVNC_TIMING_1
If this flag is enabled, ViNCEd is allowed to delay the window refresh to
allow faster printing. The output might jump-scroll if ViNCEd considers that
standard scrolling is too slow.


The timing constants for the scrolling are found on the
@{"timing page" link SETVNC_TIMING_1} of the
@{"SetVNC program" link SetVNCToc}.


@{"Vertical scroll threshold" link Fl_SCROLLTIME } sets the minimal
tolerated scroll delay. If scrolling is slower than this value, ViNCEd will
enable jump scrolling.


@{"Rebuild Delay" link Fl_REBUILDTIME } sets the jump scroll interval.
After detecting a slow output, ViNCEd will delay further output by this time
interval, collecting all incoming data and printing them at once when this
delay is over.

@ENDNODE
@NODE Fl_DOSCURSOR "Unrestricted Cursor Movement/DOSCURSOR (Prefs Flag)"
@TOC SETVNC_EDIT_1
If this flag is enabled, all user cursor movement
@{"functions" link KeyFunction} will ignore the difference between user
input and printed output and will act as if it sees only user input. The
only @{"keyboard function" link KeyFunction} that does still sees a
difference is the @{"Send Inputs" link Kf_Send_Inputs} keyboard function.

@ENDNODE
@NODE Fl_CRINSERT "Standard CR Insertion at Start of Line/CRINSERT (Prefs Flag)"
@TOC SETVNC_EDIT_3
If the @{"Send Inputs" link Kf_Send_Inputs} keyboard function or a related
function is invoked with the cursor placed at the beginning of a line, a
blank line will be inserted above the current line; the standard operation
which is used in all other cases inserts a line below the current line.


If this flag is set, only the standard method will be used, regardless where
the cursor is placed.

@ENDNODE
@NODE Fl_OVERWRITE "Overwrite Mode/OVERWRITE (Prefs Flag)"
@TOC SETVNC_EDIT_3
If this flag is set, the overwrite mode will be used by default. Your inputs
will write on top of already printed outputs instead of getting inserted.


This mode can be toggled with the
@{"Toggle Overwrite" link Kf_Toggle_Overwrite} as well; it does not change
the behavour of printed output, only user inputs are affected.

@ENDNODE
@NODE Fl_WRAP "History Buffer Wraps Around/WRAP (Prefs Flag)"
@TOC SETVNC_SHELL_2
If this flag is set, the @{"command history" link History} will "wrap
around" if its end is reached using the keyboard
@{"History Up" link Kf_History_Up} and
@{"History Down" link Kf_History_Down} functions.


Additionally, the @{"TAB Expansion" link TABExpand} list will wrap around,
too.

@ENDNODE
@NODE Fl_SMARTCLOSE "Call Macro to Close Window/SMARTCLOSE (Prefs Flag)"
@TOC SETVNC_SHELL_1
If this flag is enabled, and the window is in
@{"Shell Mode" link ShellMode}, ViNCEd will invoke a macro to close the current window - which
might for example run the "EndCLI" command. In all other cases, an "End Of
File" condition is generated.


Which macro is run depends on which program ViNCEd detects in its window. If
it is a standard shell, the @{"Quit Shell" link SETVNC_SYSTEM_3} macro will
be used, in all other cases the @{"Quit Program" link SETVNC_SYSTEM_3}. If
the according macro is left empty, ViNCEd will also generate an EOF
condition.

@ENDNODE
@NODE Fl_CLOSEQUEUE "Don't send EOF until everybody waits/CLOSEQUEUE (Prefs Flag)"
@TOC SETVNC_SHELL_1
This is a very technical flag and it is usually not worth playing with it.
It changes the behavour of ViNCEd if more than one process is running in a
window with the @{"AUTO" link Op_AUTO}
 @{"window path" link OpenPath} argument set.


If this flag is unset, and one of the processes waits for inputs, ViNCEd
will generate an EOF condition or invoke a macro to shut down the process.


If this flag is set, ViNCEd will just close the window to wait for the other
processes and will only generate the EOF as soon as all processes wait.


There's usually not much sense in setting this flag, just leave it alone.

@ENDNODE
@NODE Fl_CUTUSER "Don't Write Printed Text into Clipboard/CUTUSER (Prefs Flag)"
@TOC SETVNC_EDIT_2
If a @{"block" link BlockOps} is marked with the mouse and later on copied
to the clipboard, probably using the @{"edit menu" link EditMenu}, all
characters usually go into the clipboard, regardless whether they are
printed or inputs.


If this flag is set, only user input will be kept; printed characters are
ignored. This has the advantage that, when the clipboard is later on
reinserted, the printed output can't be mis-interpreted as commands.

@ENDNODE
@NODE Fl_NCURSESFIX "Word wrap workaround/NCURSESFIX (Prefs Flags)"
@TOC SETVNC_SYSTEM_1
This flag changes the implementation of the "word wrap" feature of ViNCEd
and might be required to make some software behaive correctly. It changes
slightly the way how ViNCEd handles overlong strings that do not fit into
one line in the window.


If turned off, which is the default, ViNCEd will emulate the VT-xxx word
wrap style. This is, if the string is exactly as long as the visual line,
the cursor does not yet wrap around to the next line, but gets placed behind
the current line in a column that is no longer visible on the screen. The
next character will, however, wrap around immediately and will place the
cursor on the second column of the next screen. Even though this mode seems
to be wierd indeed, because the cursor X position may actually be larger
than the width of a line, this is the correct VT-xxx implementation and is
used in the "XTerm" Unix terminal as well.


If turned on, the cursor will wrap around immedately and will get placed in
the first column of the next line. This is incorrect, but might be expected
by some programs. The IRIX "winterm" uses this method of word-wrapping. Note
that this feature makes it impossible to print to bottom rightmost character
position in the window without scrolling it.

@ENDNODE
@NODE Fl_SHELLMODE "Use Shell Mode by Default/SHELLMODE (Prefs Flag)"
@TOC SETVNC_SHELL_1
Selects whether ViNCEd should default to @{"Shell Mode" link ShellMode} even
though no @{"SHELL" link Op_Shell} argument is given in the
@{"window path" link OpenPath}. If this flag is set, the shell mode must be
turned off explicitly with @{"NOSHELL" link Op_NoShell}.

@ENDNODE
@NODE Fl_AUTOINDENT "Auto Indent Mode/AUTOINDENT (Prefs Flag)"
@TOC PrefsFormat
If this flag is set, the @{"Send Inputs" link Kf_Send_Inputs}
 @{"keyboard function" link KeyFunction} and related functions won't place
the cursor in the first row of a new line, but will however insert as many
spaces as needed to align the input to the characters in the line above.


@{B}This mode is incompatible to shell usage, don't set it unless you know
what you're doing.@{UB}

@ENDNODE
@NODE Fl_NODEFAULTCLOSE "Don't Add Close Gadget by Default/NODEFAULTCLOSE (Prefs Flag)"
@TOC SETVNC_WINDOW_3
If this flag is set, ViNCEd will not add a @{"close gadget" link Gadgets} by
default, but requires the @{"CLOSE" link Op_Close}
 @{"window path" link OpenPath} argument to do so.


If this flag is not set, a close gadget will be added to all ViNCEd windows
unless it is turned off with @{"NOCLOSE" link Op_NoClose}.

@ENDNODE
@NODE Fl_AUTOCOPY "Implicit Copy after Text Marking/AUTOCOPY (Prefs Flag)"
@TOC SETVNC_EDIT_2
If this flag is selected, ViNCEd will copy the
@{"marked block" link BlockOps} immediately after you release the mouse
button and won't wait for the @{"Copy" link Kf_Copy} function. This makes
ViNCEd sort of compatible to the "XTerm" unix program.

@ENDNODE
@NODE Fl_SAFERCLOSE "Prevent Accidental Window Closing/SAFERCLOSE (Prefs Flag)"
@TOC SETVNC_SHELL_1
If this flag is set, ViNCEd runs in the @{"Shell Mode" link ShellMode} and
more than one process uses the window to be closed, ViNCEd will disable the
@{"close gadget" link Gadgets} which will only shut down one process in this
window at a time.


Additionally, a @{"close requester" link Fl_CLOSEREQ} may be enabled.

@ENDNODE
@NODE Fl_FORBIDICONIFY "Don't Add Iconify Gadget by Default/FORBIDICONIFY (Prefs Flag)"
@TOC SETVNC_WINDOW_3
If set, ViNCEd will not add an @{"iconification gadget" link Gadgets} to the
window unless you ask for it explicitly using the
@{"ICONIFY" link Op_ICONIFY} argument of the @{"window path" link OpenPath}.


If this flag is not set, ViNCEd will usually provide an iconification
gadget; you've to use the @{"NOICONIFY" link Op_NOICONIFY} option to disable
it explicitly in this case.

@ENDNODE
@NODE Fl_DISABLEMMB "Disable Middle Mouse Button/DISABLEMMB (Prefs Flag)"
@TOC SETVNC_EDIT_2
If selected, ViNCEd will disable the function of the middle mouse button to
insert the text in the clipboard at the location pointed to by the mouse. It
will be available for other applications again.

However, even with the disabled middle mouse button, the replacement
sequence
@{FG Background}@{BG Text}Ctrl LeftMouse@{FG Text}@{BG Background} will
still function.

@ENDNODE
@NODE Fl_CLOSEREQ "Enable Close Requester/CLOSEREQ (Prefs Flag)"
@TOC SETVNC_SHELL_1
If this flag is enabled, and the
@{"Prevent Accidental Window Closing" link Fl_SAFERCLOSE} is enabled, too,
ViNCEd will open a safety requester as soon as you try to close a window
with more than one process running in it.

This might prevent certain surprises when shutting down the shell in a
window which is needed by other processes as well.

@ENDNODE
@NODE Fl_SCROLLTOBOTTOM "Keep Bottom of Window Adjusted/SCROLLTOBOTTOM (Prefs Flag)"
@TOC SETVNC_EDIT_4
If a ViNCEd window gets enlarged, ViNCEd will usually insert blank spaces at
the bottom of the window to avoid moving the cursor. If this flag is set,
however, the text will be scrolled downwards to align it to the bottom
border.

@ENDNODE
@NODE Fl_NOPRINTSCROLL "Inhibit Horiz. Scrolling by DOS Output/NOPRINTSCROLL (Prefs Flag)"
@TOC SETVNC_SYSTEM_1
If this flag is set, ViNCEd will not scroll the display horizontally if the
cursor gets out of range by printing characters. The window will be scrolled
"in place" as soon as you start typing.


This mode might be very confusing since the cursor might become invisible
from time to time. However, it avoids unnecessary flicker when printing
over sized lines.


This flag is also controlable by the @{"CSI sequences" link CsiEsc} CSI
>?18l and CSI >?18h.

@ENDNODE
@NODE Fl_SMALLDISPLAY "Line Break at Right Border/SMALLDISPLAY (Prefs Flag)"
@TOC SETVNC_SYSTEM_1
If this flag is enabled, the output will be split at the right border of the
window, not at the right end of the logical ViNCEd line (which is
approximately 240 characters long).


This splitting is permanent, ViNCEd does not reformat paragraphs if the
window gets resized, nor does it reformat the output in any way. This
behavour is also compatible to what XTerm does.


This flag is also available in the form of a @{"CSI sequence" link CsiList},
namely CSI >?19l and CSI >?19h.


@ENDNODE
@NODE Fl_DOSERASE "Destructive DEL and BS/DOSERASE (Prefs Flag)"
@TOC SETVNC_SYSTEM_2
If this flag is set, the control characters @{B}DEL@{UB} 0x7f (delete) and
@{B}BS@{UB} 0x08 (backspace) are enabled and destructive, i.e. will remove
characters from the screen.

If the flag is disabled, the @{B}BS@{UB} sequence will move the cursor
backwards, but won't erase characters. The @{B}DEL@{UB} sequence will print
a "smear" character and won't be regarded as control sequence. Most programs
won't expect this when printing a backspace control sequence, so I advice
you not to turn on this option.


The @{"CSI sequences" link CsiList} CSI >?24h and CSI >?24l can be used to
set this flag "on line".


If this flag is set, you should set the
@{"Insertion mode for DOS output" link Fl_DOSINSERT} as well.


@{B}Warning: This flag is incompatible for shell usage. Don't set it unless
you know what you're doing.@{UB}

@ENDNODE
@NODE Fl_AUTOPASTE "Notify DOS About Paste/AUTOPASTE (Prefs Flag)"
@TOC SETVNC_SYSTEM_2
If this flag is set, the @{"Paste" link EditMenu} menu item will not insert
the clipboard contents, but will instead sent the
@{"CSI sequence" link CsiEsc} CSI 0 v. It is then up to the listening
program to handle the clipboard insertion by itself. However, regardless of
this flag, Cut, Copy and all the remaining block operations will work as
normal, but the @{"middle mouse button" link KEYBOARD} is also affected,
since it inserts the clipboard, too.


@{B}This flag is incompatible to shell usage, don't set it unless you know
what you're doing.@{UB}


However, a program might choose to disable temporary the automatic paste by
ViNCEd. This is done by the @{"CSI sequence" link CsiList} "CSI >?25l".
Use "CSI >?25h" to turn this on.


@{B}REMARKS@{UB}: The paste behavour of ViNCEd does NOT change if a window
is in @{"raw mode" link ConsoleModes} instead of
@{"cooked mode" link ConsoleModes}, like for the standard console handler.


There is a second flag related to the one presented above, which can't be
set by default because it is even more restrictive. If you send the
@{"CSI sequence" link CSIList} "CSI >?27h" to ViNCEd, all the block
operations, including Cut and Copy and the selection of blocks must be done
by you. Special @{"CSI sequences" link ReceiveCSI} will be send to
indicate a Cut or Copy request, and the block marking is totally your own
business, i.e. you have to listen to the mouse movement and -keys. Send a
"CSI >?27l" to restore the normal operation.


The @{"command line option" link SetVNCShellArgs} "AUTOPASTE" is the same
flag, but reversed. "Off" means that ViNCEd @{B}DOES NOT@{UB} insert the
clipboard automatically.


Just as a side remark: ViNCEd does not require the "ConClip" program. If you
run ViNCEd to replace CON: completely, you may remove "ConClip" from your
startup-sequence.

@ENDNODE
@NODE Fl_DISABLESCROLL "DISABLESCROLL (Prefs Flag)"
@TOC SetVNCShellArgs
If this flag is set to "on", ViNCEd will disable the window scrolling if the
bottom border is reached. This preferences flag functions identically to the
CSI >1l and CSI >1h @{"control sequences" link CsiList}.


@{B}This flag is incompatible to shell usage. Don't set it unless you know
what you're doing.@{UB}

@ENDNODE
@NODE Fl_DISABLEWRAP "DISABLEWRAP (Prefs Flag)"
@TOC SetVNCShellArgs
If this flag is set to "on", ViNCEd will disable automatic line break at the
right edge of a line. This is either the right window border if the
@{"SMALLDISPLAY" link Fl_SMALLDISPLAY} flag is set, or the end of the
logical line - which is approximately 240 characters long. This flag
functions identically to the @{"CSI sequences" link CsiList} CSI ?7l and CSI
?7h.


@{B}This flag is incompatible to shell usage. Don't set it unless you know
what you're doing.@{UB}

@ENDNODE
@NODE Fl_DOSINSERT "Insertion Mode for DOS Output/DOSINSERT (Prefs Flag)"
@TOC SETVNC_SYSTEM_2
If this flag is enabled, printed characters will get inserted into the
already existent output instead of overwriting them. This flag DOES NOT
change the keyboard insertion or overwrite mode, which is controlled by a
@{"different flag" link Fl_OVERWRITE}.

Most software does not expect insertion mode, so leave this flag off if you
don't have a good reason not to do.


The @{"CSI sequences" link CsiList} CSI 4l and CSI 4h will clear and set
this flag "on line".


If this flag is set, you should also set the
@{"Destructive DEL and BS" link Fl_DOSERASE} flag.


@{B}This flag is incompatible to shell usage. Don't set it unless you know
what you're doing.@{UB}

@ENDNODE
@NODE Fl_VTMODE "VT-220 Compatibility Mode/VTMODE (Prefs Flag)"
@TOC SETVNC_SYSTEM_1
If this flag is set, ViNCEd will run a VT-220 terminal emulation instead of
the usual CON: emulation; the meaning of some
@{"control sequences" link CsiEsc} will therefore change.


@{B}This flag is incompatible to shell usage; don't set it unless you know
what you're doing.@{UB}


The @{"CSI sequence" link CsiList} CSI >?2h will also enable this emulation,
CSI >?2l will disable it.

@ENDNODE
@NODE Fl_ROWLOCK "ROWLOCK (Prefs Flag)"
@TOC SetVNCShellArgs
If this flag is enabled, ViNCEd won't allow the user to leave the current
input line by any means. Even @{B}Return@{UB} won't leave the current input
line, the vertical cursor movement @{"functions" link KeyFunction} are
disabled completely, and some other functions get restricted, too. The main
use of this flag is to provide a mechanism to use ViNCEd as a terminal for a
"mask input" such that the user can't overwrite the mask.


This flag is also available in the form of the CSI >?3h
@{"CSI sequence" link CsiList}, CSI >?3l will disable it again.


@{B}This flag is definitely NOT for shell usage. Don't touch it unless you
know what you're doing.@{UB}

@ENDNODE
@NODE Fl_UNDERLINE "Underline Cursor/UNDERLINE (Prefs Flag)"
@TOC SETVNC_EDIT_2
If this flag is set, ViNCEd will use an underline cursor instead of the
standard block cursor.

This flag is also available by the @{"CSI sequence" link CsiList} CSI >?4h.
CSI >?4l will restore the standard cursor shape.

@ENDNODE
@NODE Fl_BLINKING "Blinking Cursor/BLINKING (Prefs Flag)"
@TOC SETVNC_EDIT_2
If this flag is set, ViNCEd will blink the cursor. The cursor blink speed
can be setup on the @{"timing page" link SETVNC_TIMING_1} of
@{"SetVNC" link SetVNCToc}.


This flag can be set by the @{"CSI sequence" link CsiList} CSI >?6h as well.

@ENDNODE
@NODE Fl_XTERMCURSOR "XTerm/CON: Cursor Mode/XTERMCURSOR (Prefs Flag)"
@TOC SETVNC_EDIT_1
If this flag is enabled, ViNCEd won't move the cursor if the window contents
are scrolled with the @{"slider gadgets" link Gadgets}. Instead, the cursor
will be scrolled out of the window. The window will "snap back" as soon as
you press another key.


This flag can be set with the @{"CSI sequence" link CsiList} CSI >?30h as
well.


@ENDNODE
@NODE Fl_NOBSSTART "Disable BS at Start of Line/NOBSSTART (Prefs Flag)"
@TOC SETVNC_EDIT_3
By setting this flag, you may disable the
@{"backspace" link KeyFunction} keyboard function (or, to be fully correct,
the "Delete Backwards" function) at the beginning of a line - where it would
usually erase the current line and join it to the previous line.


@ENDNODE
@NODE Fl_ANSIMODE "ANSI Colors as Default/ANSIMODE (Prefs Flag)"
@TOC SETVNC_EDIT_3
If this flag is enabled, ViNCEd will use the
@{"ANSI coloring scheme" link AnsiColors} by default, as if
@{"ANSI" link Op_ANSI} was given in the window path; the
@{"window path" link OpenPath} argument @{"NOANSI" link Op_NOANSI} must be
given explicitly to use the standard CON: coloring again.

@ENDNODE
@NODE Fl_ANSIREVERSE "Inverse ANSI Coloring/ANSIREVERSE (Prefs Flag)"
@TOC SETVNC_EDIT_3
This flag will swap the @{"ANSI colors" link ANSIColors} 0 and 7, i.e. black
and white. Hence, the default ANSI coloring will be black text on white
background instead of white text on black background.


If the @{"ANSI mode" link Fl_ANSIMODE} is not enabled, this flag will do
nothing.

@ENDNODE
@NODE Fl_NUMPADMODE "Numeric keypad cursor control/NUMPADMODE (Prefs Flag)"
@TOC SETVNC_EDIT_1
This flags sets the "NumLock" keyboard qualifier by default and makes
therefore certain @{"keyboard functions" link KeyFunction} available; these
are usually cursor movement functions on the numeric keypad.


The "NumLock" qualifier is a keyboard qualifier much like "CapsLock", except
there is no LED available to display its state. It can be toggled "by hand",
too, by @{"binding" link KeyBind} the "Toggle NumLock"
@{"keyboard function" link KeyFunction} to an appropriate key - this is
@{FG Background}@{BG Text}Alt Num[@{FG Text}@{BG Background} in the default
configuration.

@ENDNODE
@NODE Fl_BOLDEXTCOLORS "Extended Colors Instead of Bold/BOLDEXTCOLORS (Pref Flag)"
@TOC SETVNC_SYSTEM_2
If this flag is set, ViNCEd will interpret the "Bold" text style in a
different way. Instead of printing bold characters in boldface, ViNCEd will
shift to the extended color map and use the colors 8 to 15 instead of the
colors 0 to 7 for the text. The "blinking" attribute will, in a similar way,
shift the colors of the text container by eight to use the extended color
set - instead of getting ignored; the current ViNCEd version does not yet
support "blinking" characters, but already keeps the "blinking" attribute.


@ENDNODE
@NODE Fl_SHORTSCREENINSERT "No Insertion Into Border/SHORTSCREENINSERT (Prefs Flag)"
@TOC SETVNC_SYSTEM_2
If enabled, this flag changes the operation of the CSI L and CSI M
@{"control sequences" link CsiList} slightly; instead of inserting and
removing lines from the complete @{"lower display buffer" link Buffers},
these sequences will ignore lines beyond the bottom window edge complete and
will leave them alone.

This flag is mainly a @{"compatibility kludge" link Compatibility} for
programs that can't handle with the complete ViNCEd review buffer, as for
example "vim".

@ENDNODE
@NODE Fl_SCROLLBORDERS "Don't scroll into the border (Prefs Flag)"
@TOC SETVNC_EDIT_1
If this flag is enabled, you won't be able to extend the
@{"review buffer" link Buffers} by scrolling into blank unoccupied areas.
The cursor will just stop at the upper or lower end of the
@{"review buffer" link Buffers}.


This flag affects horizontal cursor movement as well: If the flag is set,
the cursor is no longer allowed to enter printed text output by left or
right movement, it will stop in front of printed text. Consequently, if the
cursor ends up in the middle of printed text, you won't be able to move it
at all any more. To override this flag, you should temporarely select the
@{"DOS Cursor Mode" link Fl_DOSCURSOR} mode from the
@{"Settings Menu" link SettingsMenu} by pressing
@{FG Background}@{BG Text}Amiga D@{FG Text}@{BG Background}.


This flag won't affect output, only user cursor movements are restricted.

@ENDNODE
@NODE Fl_TYPEAHEAD "Invisible Type Ahead/TYPEAHEAD (Prefs Flag)"
@TOC SETVNC_EDIT_4
If this flag is enabled and there is currently no program waiting for your
input, the inputs will be kept invisible in an internal buffer and will be
printed as soon as they are requested.


@{B}Note@{UB}: Not all characters are kept in this type ahead buffer, some
are "immediate", as for example the @{"keyboard functions" link KeyFunction}
 @{"Suspend" link Kf_Suspend} and @{"Send ^C" link Kf_Send_Ctrl_C} which
have to work all the time for obvious reasons.

@ENDNODE
@NODE Fl_DISABLEPROPX "Disable Horizontal Scroller/DISABLEPROPX (Prefs Flag)"
@TOC SETVNC_WINDOW_3
This flag disables adding the @{"horizontal scroller" link Gadgets} to
ViNCEd windows unless the @{"window path" link OpenPath} argument
@{"PROPX" link Op_PROPX} re-enables it explicitly again.

@ENDNODE
@NODE Fl_DISABLEPROPY "Disable Horizontal Scroller/DISABLEPROPY (Prefs Flag)"
@TOC SETVNC_WINDOW_3
This flag disables adding the @{"vertical scroller" link Gadgets} to
ViNCEd windows; to get a vertical scroller then, it must be requested
explicitly with the @{"window path" link OpenPath} argument
@{"PROPX" link Op_PROPX}.

@ENDNODE
@NODE Fl_RAWSCROLLERS "Enable Scrollers in RAW Mode/RAWSCROLLERS (Prefs Flag)"
@TOC SETVNC_SHELL_2
If the window is switched to the
@{"RAW console mode" link ConsoleModes} (also called the "unprocessed" or
"non-canonical" mode which disables the ViNCEd editor functions), all
scrolling is usually forbidden; this includes that the horizontal and
vertical @{"scrollers" link Gadgets} will be ghosted and are no longer
available. Another side effect is that you won't be able to scroll the
window contents implicitly my marking a @{"block" link BlockOps} and moving
the mouse pointer to the edge of the window.


If this flag is enabled, the scrollers will stay available in all console
modes; block marking will also work as usual, including scrolling the window
contents if necessary.

@ENDNODE
@NODE Fl_RIGIDCURSOR "Rigid XTerm Cursor/RIGIDCURSOR (Prefs Flag)"
@TOC SETVNC_EDIT_1
If this flag is set, you won't be able to set the text cursor by "clicking"
at a new position with the mouse pointer. This flag restricts therefore the
@{"XTerm mode" link Fl_XTERMCURSOR} even more and makes all cursor movement
impossible, except using the keyboard.


If you even don't want to move the cursor by the keyboard, then change the
@{"keyboard definition" link SETVNC_KEYBOARD_1} to change the
@{"keyboard functions" link KeyFunction} @{"bound" link KeyBind} to the
cursor keys.

@ENDNODE
@NODE Fl_KEEPDOUBLES "Keep Duplicates in the History/KEEPDOUBLES (Prefs Flag)"
@TOC SETVNC_SHELL_2
If you enter a command, ViNCEd will rewind the
@{"command history" link History} and add your command line to the end of
it, except this command line is already present at the end; Hence, ViNCEd
will not keep duplicate entries, i.e. repeated commands, in its history.


However, by setting this flag, ViNCEd can be told to keep even these lines,
regardless whether it is an repeated command or not.

@ENDNODE
@NODE Fl_DONTPLACEREQUESTER "Do not Place File Requester/DONTPLACEREQUESTER (Prefs Flag)"
@TOC SETVNC_SHELL_7
If this flag is set, ViNCEd does not attempt to place the
@{"TAB expansion" link TabExpand} file requester using the position
information on the @{"seventh shell page" link SETVNC_SHELL_7} of the
@{"SetVNC" link SetVNCToc} program. Instead, placement is left to the
requester package.


This is mainly a compatibility kludge for the "reqchange" packet which
interprets the requester coordinates of the ASL tags as a position relative
to the parent window instead using absolute coordinates.

@ENDNODE
@NODE Fl_BUFFERSIZE "History lines/BUFFERSIZE (Prefs Setting)"
@TOC SETVNC_WINDOW_1
This is the size of the @{"command history" link History} in lines, and
integer value between 5 and 4096.

@ENDNODE
@NODE Fl_UPPERSIZE "Upper display size/UPPERSIZE (Prefs Setting)"
@TOC SETVNC_WINDOW_1
The number of lines kept in the upper @{"review buffer" link Buffers} that
are scrolled out of the top edge of the window. If more lines are scrolled
into that window than the buffer can hold, the upmost line is deleted.


The contents of this buffer is not visible, but it holds lines that can be
scrolled back into the window, for example using the
@{"scroller gadgets" link Gadgets}.


This buffer must be between 64 and 4096 lines large.

@ENDNODE
@NODE Fl_LOWERSIZE "Lower display size/LOWERSIZE (Prefs Setting)"
@TOC SETVNC_WINDOW_1
The number of lines kept in the lower @{"display buffer" link Buffers}. This
includes the lines kept in the window itself, and the lines scrolled out of
the lower edge of the window; this happens for example if the window
contents is scrolled downwards to make the upper
@{"review buffer" link Buffers} visible.


If more lines are scrolled into this window, the bottommost line of this
buffer is deleted.


This buffer size must lie between 128 and 4096 lines; it should be at least
as large as the maximal possible window size in lines, plus the size of the
@{"upper display buffer" link Fl_UPPERSIZE}.

@ENDNODE
@NODE Fl_CACHESIZE "Cached directories/CACHESIZE (Prefs Setting)"
@TOC SETVNC_SHELL_2
This is the size of the TAB expansion cache, in directories. If the buffer
overflows during an expansion, the latest directory visited while expanding
will be flushed.


The TAB expansion cache must be one to 256 directories large.

@ENDNODE
@NODE Fl_SCROLLTIME "Vertical scroll threshold/SCROLLTIME (Prefs Setting)"
@TOC SETVNC_TIMING_1
This setting controls the
@{"delayed window refresh" link Fl_REBUILDDELAY} feature of ViNCEd, if
enabled. If the graphics output, for example scrolling, is too slow, ViNCEd
does not attempt to output text immediately but keeps it in an incoming
buffer.

This setting specifies what "too slow graphics output" means in detail. If
text can't get printed by a faster rate than this, given in milliseconds
(thousands of a second),is delayed and will be printed when there is enough
time or at least after the @{"rebuild delay" link Fl_REBUILDTIME}.

Admissible values range from 5 (things are really in a hurry, MOVE ON!) to
500 (let's take things easy). If you have a slow processor (like the
MC68000) or slow graphics (many colors), be a bit more tolerant and increase
this value!


@{B}REMEMBER@{UB}: "Slow" for a MC68060 is something different than for a
MC68000!


@ENDNODE
@NODE Fl_BLINKSPEED "Cursor Blink Speed/BLINKSPEED (Prefs Setting)"
@TOC SETVNC_TIMING_1
This selects the blink speed of the cursor, if
@{"this feature" link Fl_BLINKING} is enabled.

Values are given in milliseconds (thousands of a second) and range from 100
(very annoying flickering) to 1000 (boredom).

@ENDNODE
@NODE Fl_REBUILDTIME "Rebuild Delay/REBUILDTIME (Prefs Setting)"
@TOC SETVNC_TIMING_1
After text output has been delayed by an enabled
@{"REBUILDDELAY" link Fl_REBUILDDELAY} flag, either because it is slower
than the speed specified by the
@{"vertical scroll threshold" link Fl_SCROLLTIME}, or a horizontal scroll is
necessary, this is the time in milliseconds (thousands of a second) ViNCEd
buffers all incoming text and suppresses output. The complete text is
printed when the time entered in this field is over. The timing of the
@{"scrollers" link Gadgets} on the edges of the window is controlled by this
value, too, because scroller refresh is relatively slow.

Use values from 25 (no remarkable delay) to 1000 (quite a lot of time
passes until refresh), but remember:

If you choose a large value here, a lot of text might get printed, and it
might get scrolled out of the window before you see it!

Also, I advise you to select AT LEAST twice the value of the
@{"Vertical scroll threshold" link Fl_SCROLLTIME}, or timing might get a
mess: Delaying the output using these settings won't speed up anything
considerably.

@ENDNODE
@NODE Fl_DOUBLETABTIME "Double TAB time interval/DOUBLETABTIME (Prefs Setting)"
@TOC SETVNC_TIMING_1
The purpose of this setting is to fine-tune the interval between two
consequeutive TAB (or rather @{"Expand keyboard function" link KeyFunction}
presses to pop open the double TAB requester. If more than the indicated
amount of microseconds passed from the last TAB to the current TAB press,
ViNCEd will cycle thru the TAB expansion list manually instead; if, however,
the delay between the two expansions is smaller, the file requester will pop
up @{"if this feature is enabled" link Fl_TAB_DOUBLEREQ}.


The value zero has here a special meaning: If the delay interval is set to
zero, ViNCEd will always pop up the requester and will never allow cycling
thru the TAB expansion list.

@ENDNODE
@NODE Fl_MONITORID "Monitor/MONITORID (Prefs Setting)"
@TOC SETVNC_WINDOW_1
Selects the default monitor ID when ViNCEd opens its own screen, controlled
by other fields of the @{"window path" link OpenPath}, i.e. the hardware
details of the screen where the window should appear on.


The @{"SetVNC" link SetVNCToc} program offers, too, a screen mode requester
for convenience to setup this value, on the
@{"first window page" link SETVNC_WINDOW_1}. However, Os 2.1 or better is
required for this requester.


Hex notation using "0x" or "$" is valid here, or should be even preferred,
but the upper sixteen bits (the "monitor ID" itself) are ignored if you run
ViNCEd on a 1.3 workbench.

@ENDNODE
@NODE Fl_PATHONLYQU "Path Only Qualifier/PATHONLYQU (Prefs Setting)"
@TOC SETVNC_SHELL_6
This is the setup for the "path only" keyboard qualifier of the
@{"icon drop" link IconDrop} function of ViNCEd. If you hold the qualifiers
given here, ViNCEd will only insert the path of the object dropped on its
window.


@{B}Note@{UB}: The icon drop function will not distinguish between the left
and right qualifier keys, e.g. left and right shift will work alike. It will
require the @{"shell mode" link ShellMode}, too.

@ENDNODE
@NODE Fl_NAMEONLYQU "Name Only Qualifier/NAMEONLYQU (Prefs Setting)"
@TOC SETVNC_SHELL_6
This is the setup for the "name only" keyboard qualifier of the
@{"icon drop" link IconDrop} function of ViNCEd. If you hold the qualifiers
given here, ViNCEd will only insert the name of the object dropped on its
window and won't insert the complete path of the icon.


@{B}Note@{UB}: The icon drop function will not distinguish between the left
and right qualifier keys, e.g. left and right shift will work alike. It will
require the @{"shell mode" link ShellMode}, too.

@ENDNODE
@NODE Fl_CURSORCOLOR "Cursor Color Setup/CURSOR COLOR (Prefs Setting)"
@TOC SETVNC_WINDOW_2
ViNCEd can be told to use a cursor of a specific color instead just
inverting the color on the screen. For that, load the
@{"SetVNC" link SetVNCToc} program and go to the
@{"second window page" link SETVNC_WINDOW_2}. The "« Prev" and "Next »"
buttons at the bottom of the window select the color register to adjust,
with the cursor color being the "previous" color of color register 0, i.e.
click again on the "« Prev" gadget when the text above says that color 0 is
currently shown.


To activate the colored cursor, enable the "Load register" checkmark and
select your preferred color with the sliders above.


The "Define ANSI mapping" gadget below has a strange meaning for the cursor
color - since there is actually no ANSI rule what the cursor color should
be. If you activate this gadget as well, ViNCEd will allocate the color for
the cursor with a higher priority which is especially useful on screens
offering few free pens.


In the @{"preferences file" link PrefsFormat} the cursor color is specified
with the keyword "CURSORCOLOR"; this keyword takes five arguments,
separated by commas, reflecting the state of the "Load register" and "Define
ANSI mapping" gadgets, as well as the states of the scrollers defining the
color.


The first argument is either LOAD or NOLOAD, the second ANSI or NOANSI.
These are the checkmark gadget states. The remaining three arguments specify
the cursor color red, green and blue components, respectively, as sixteen
bit fractions in hex notations; i.e. 0x0000 is minimal intensity, 0xffff is
maximal intensity and 0x7fff is, for example, half intensity.

@ENDNODE
@NODE Fl_COLOR "Color Setup/COLOR (Prefs Setting)"
@TOC SETVNC_WINDOW_2
This defines one of the sixteen ViNCEd colors; the color to be defined can
be selected with the "« Prev" and "Next »" gadgets on the
@{"second window page" link SETVNC_WINDOW_2} of @{"SetVNC" link SetVNCToc},
they decrease or increase the color index shown above on the page; the color
"previous" to color 0 is, by the way, the
@{"cursor color" link Fl_CURSORCOLOR}.



A color register can either specify a hardware register that should be
loaded by ViNCEd with a specific color if ViNCEd opens on its own screen,
or defines the color of one of the @{"ANSI registers" link ANSIColors} if
that feature is used.



To load a hardware register, check the "Load Register" gadget on the left
side of the page; this will make sense only if ViNCEd opens on its own
screen because ViNCEd won't load any hardware register just for a window.


Remember, however, that the first four pens are usually reserved for the
system to draw the gadget and window artworks, hence loading these registers
might result in weird looking imaginary and probably the loss of the "3D
style"; to compensate, select a dark color for the register #1, and a light
color for register #2.


@{B}Note@{UB}: Even non-reserved colors will be used by ViNCEd, it just
doesn't load the hardware register on startup. However, WHICH colors will
appear in the @{"non-ANSI coloring mode" link ANSIColors} is then up to the
system and on the system wide "Palette" defaults. You may even load the
hardware registers explicitly with the "CSI V"
@{"control sequence" link CsiList} "on line", but the registers defined by
the ViNCEd preferences will be reloaded on a
@{"reset sequence" link EscList} Esc c.



To define an ANSI color that overrides the
@{"ANSI color defaults" link ANSIColors}, check the second "Define ANSI
mapping" gadget. ViNCEd will then try to allocate a shared pen for rendering
characters of the ANSI pen value defined; this will work even for windows
opened on a public screen, but makes obviously only sense if the "ANSI"
coloring is enabled - either by
@{"defining this as a default" link SETVNC_EDIT_3}, or by specifying the
"ANSI" argument as part of the @{"window path" link OpenPath}.

However, if only few free pens are available on that screen, ViNCEd may fail
to allocate all required pens and the colors may or may not look like what
you expect.



It makes sense to set both flags. ViNCEd tries in this case first to
arbitrate the selected hardware register to load the desired color for the
ANSI pen of the same index. If this register is not available, ViNCEd tries
to allocate a shared pen for the color, but with a higher precision than
with only the ANSI flag selected.


The @{"CSI V" link CsiList} sequence does, for example, reserve ANSI
colors by setting both flags.



The @{"preferences file" link PrefsFormat} defines the sixteen color
registers using the "COLOR" keyword; the register loaded is implicit in the
order in which these keywords appear - the first "COLOR" keyword loads
register #0, the next register #1, etc. Each keyword takes five arguments,
to be separated by commas. The first two arguments reflect the state of the
two checkmark gadgets discussed above, and are either LOAD/NOLOAD or
ANSI/NOANSI respectively. The next three arguments represent the red, green
and blue components of the color to be loaded, as sixteen bit fractional
values in hexadecimal notation, i.e. 0x0000 is the lowest possible intensity,
0xffff is full intensity.

@ENDNODE
@NODE Fl_TAB_FILE_PRI "TAB_FILE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_FILE_PRI} for ordinary files of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_EXEC_PRI "TAB_EXEC_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_EXEC_PRI} for executables of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_SCRIPT_PRI "TAB_SCRIPT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for script files of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_PATH_PRI "TAB_PATH_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_PATH_PRI} for files in the
command path of the @{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_COMMAND_PRI "TAB_COMMAND_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_COMMAND_PRI} for files in
the C: directory of the @{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_RESIDENT_PRI "TAB_RESIDENT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_RESIDENT_PRI} for files in the shell
resident list of the @{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_INFO_PRI "TAB_INFO_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for icon (.info) files of
the @{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_DEVICE_PRI "TAB_DEVICE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DEVICE_PRI} for devices of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_ASSIGN_PRI "TAB_ASSIGN_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_ASSIGN_PRI} for assigns of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_VOLUME_PRI "TAB_VOLUME_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_VOLUME_PRI} for volume of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_DIRECTORY_PRI "TAB_DIRECTORY_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DIRECTORY_PRI} for directories of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_DOUBLEREQ "TAB_DOUBLEREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Double TAB Requester" link EXPAND_DOUBLEREQ} flag of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_FULLEXPAND "TAB_FULLEXPAND (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Expand Fully" link EXPAND_DOUBLEREQ} flag of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_VNCREQUESTER "TAB_VNCREQUESTER (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Add ViNCEd matches" link EXPAND_DOUBLEREQ} flag of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_AMBIGREQ "TAB_AMBIGREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Requester if ambiguous" link EXPAND_DOUBLEREQ} flag of the
@{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_TAB_PARTIALPAT "TAB_PARTIALPAT (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
flag of the @{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_TAB_INTOCONSOLE "TAB_INTOCONSOLE (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"List expansions on the console" link EXPAND_INTOCONSOLE}
flag of the @{"first TAB expansion" link Kf_Expand_Path}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_SRT_FILE_PRI "SRT_FILE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_FILE_PRI} for ordinary files of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_EXEC_PRI "SRT_EXEC_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_EXEC_PRI} for executables of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_SCRIPT_PRI "SRT_SCRIPT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for script files of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_PATH_PRI "SRT_PATH_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_PATH_PRI} for files in the
command path of the @{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_COMMAND_PRI "SRT_COMMAND_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_COMMAND_PRI} for files in
the C: directory of the @{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_RESIDENT_PRI "SRT_RESIDENT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_RESIDENT_PRI} for files in the shell
resident list of the @{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_INFO_PRI "SRT_INFO_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for icon (.info) files of
the @{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_DEVICE_PRI "SRT_DEVICE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DEVICE_PRI} for devices of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_ASSIGN_PRI "SRT_ASSIGN_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_ASSIGN_PRI} for assigns of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_VOLUME_PRI "SRT_VOLUME_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_VOLUME_PRI} for volume of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_DIRECTORY_PRI "SRT_DIRECTORY_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DIRECTORY_PRI} for directories of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_DOUBLEREQ "SRT_DOUBLEREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Double TAB Requester" link EXPAND_DOUBLEREQ} flag of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_FULLEXPAND "SRT_FULLEXPAND (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Expand Fully" link EXPAND_DOUBLEREQ} flag of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_VNCREQUESTER "SRT_VNCREQUESTER (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Add ViNCEd matches" link EXPAND_DOUBLEREQ} flag of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_AMBIGREQ "SRT_AMBIGREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Requester if ambiguous" link EXPAND_DOUBLEREQ} flag of the
@{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_SRT_PARTIALPAT "SRT_PARTIALPAT (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
flag of the @{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_SRT_INTOCONSOLE "SRT_INTOCONSOLE (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"List expansions on the console" link EXPAND_INTOCONSOLE}
flag of the @{"second TAB expansion" link Kf_Expand_Short}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_DEV_FILE_PRI "DEV_FILE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_FILE_PRI} for ordinary files of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_EXEC_PRI "DEV_EXEC_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_EXEC_PRI} for executables of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_SCRIPT_PRI "DEV_SCRIPT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for script files of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_PATH_PRI "DEV_PATH_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_PATH_PRI} for files in the
command path of the @{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_COMMAND_PRI "DEV_COMMAND_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_COMMAND_PRI} for files in
the C: directory of the @{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_RESIDENT_PRI "DEV_RESIDENT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_RESIDENT_PRI} for files in the shell
resident list of the @{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_INFO_PRI "DEV_INFO_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for icon (.info) files of
the @{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_DEVICE_PRI "DEV_DEVICE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DEVICE_PRI} for devices of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_ASSIGN_PRI "DEV_ASSIGN_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_ASSIGN_PRI} for assigns of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_VOLUME_PRI "DEV_VOLUME_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_VOLUME_PRI} for volume of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_DIRECTORY_PRI "DEV_DIRECTORY_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DIRECTORY_PRI} for directories of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_DOUBLEREQ "DEV_DOUBLEREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Double TAB Requester" link EXPAND_DOUBLEREQ} flag of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_FULLEXPAND "DEV_FULLEXPAND (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Expand Fully" link EXPAND_DOUBLEREQ} flag of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_VNCREQUESTER "DEV_VNCREQUESTER (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Add ViNCEd matches" link EXPAND_DOUBLEREQ} flag of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_AMBIGREQ "DEV_AMBIGREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Requester if ambiguous" link EXPAND_DOUBLEREQ} flag of the
@{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DEV_PARTIALPAT "DEV_PARTIALPAT (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
flag of the @{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_DEV_INTOCONSOLE "DEV_INTOCONSOLE (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"List expansions on the console" link EXPAND_INTOCONSOLE}
flag of the @{"third TAB expansion" link Kf_Expand_Devices}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_DIR_FILE_PRI "DIR_FILE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_FILE_PRI} for ordinary files of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_EXEC_PRI "DIR_EXEC_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_EXEC_PRI} for executables of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_SCRIPT_PRI "DIR_SCRIPT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for script files of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_PATH_PRI "DIR_PATH_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_PATH_PRI} for files in the
command path of the @{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_COMMAND_PRI "DIR_COMMAND_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_COMMAND_PRI} for files in
the C: directory of the @{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_RESIDENT_PRI "DIR_RESIDENT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_RESIDENT_PRI} for files in the shell
resident list of the @{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_INFO_PRI "DIR_INFO_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for icon (.info) files of
the @{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_DEVICE_PRI "DIR_DEVICE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DEVICE_PRI} for devices of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_ASSIGN_PRI "DIR_ASSIGN_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_ASSIGN_PRI} for assigns of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_VOLUME_PRI "DIR_VOLUME_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_VOLUME_PRI} for volume of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_DIRECTORY_PRI "DIR_DIRECTORY_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DIRECTORY_PRI} for directories of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_DOUBLEREQ "DIR_DOUBLEREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Double TAB Requester" link EXPAND_DOUBLEREQ} flag of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_FULLEXPAND "DIR_FULLEXPAND (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Expand Fully" link EXPAND_DOUBLEREQ} flag of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_VNCREQUESTER "DIR_VNCREQUESTER (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Add ViNCEd matches" link EXPAND_DOUBLEREQ} flag of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_AMBIGREQ "DIR_AMBIGREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Requester if ambiguous" link EXPAND_DOUBLEREQ} flag of the
@{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_DIR_PARTIALPAT "DIR_PARTIALPAT (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
flag of the @{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_DIR_INTOCONSOLE "DIR_INTOCONSOLE (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"List expansions on the console" link EXPAND_INTOCONSOLE}
flag of the @{"fourth TAB expansion" link Kf_Expand_Dirs}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_INF_FILE_PRI "INF_FILE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_FILE_PRI} for ordinary files of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_EXEC_PRI "INF_EXEC_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_EXEC_PRI} for executables of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_SCRIPT_PRI "INF_SCRIPT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for script files of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_PATH_PRI "INF_PATH_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_PATH_PRI} for files in the
command path of the @{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_COMMAND_PRI "INF_COMMAND_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_COMMAND_PRI} for files in
the C: directory of the @{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_RESIDENT_PRI "INF_RESIDENT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_RESIDENT_PRI} for files in the shell
resident list of the @{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_INFO_PRI "INF_INFO_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for icon (.info) files of
the @{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_DEVICE_PRI "INF_DEVICE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DEVICE_PRI} for devices of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_ASSIGN_PRI "INF_ASSIGN_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_ASSIGN_PRI} for assigns of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_VOLUME_PRI "INF_VOLUME_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_VOLUME_PRI} for volume of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_DIRECTORY_PRI "INF_DIRECTORY_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DIRECTORY_PRI} for directories of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_DOUBLEREQ "INF_DOUBLEREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Double TAB Requester" link EXPAND_DOUBLEREQ} flag of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_FULLEXPAND "INF_FULLEXPAND (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Expand Fully" link EXPAND_DOUBLEREQ} flag of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_VNCREQUESTER "INF_VNCREQUESTER (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Add ViNCEd matches" link EXPAND_DOUBLEREQ} flag of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_AMBIGREQ "INF_AMBIGREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Requester if ambiguous" link EXPAND_DOUBLEREQ} flag of the
@{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_INF_PARTIALPAT "INF_PARTIALPAT (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
flag of the @{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_INF_INTOCONSOLE "INF_INTOCONSOLE (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"List expansions on the console" link EXPAND_INTOCONSOLE}
flag of the @{"fifth TAB expansion" link Kf_Expand_Icons}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_ALT_FILE_PRI "ALT_FILE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_FILE_PRI} for ordinary files of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_EXEC_PRI "ALT_EXEC_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_EXEC_PRI} for executables of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_SCRIPT_PRI "ALT_SCRIPT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for script files of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_PATH_PRI "ALT_PATH_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_PATH_PRI} for files in the
command path of the @{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_COMMAND_PRI "ALT_COMMAND_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The relative @{"expansion priority" link EXPAND_COMMAND_PRI} for files in
the C: directory of the @{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_RESIDENT_PRI "ALT_RESIDENT_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_RESIDENT_PRI} for files in the shell
resident list of the @{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_INFO_PRI "ALT_INFO_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_SCRIPT_PRI} for icon (.info) files of
the @{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_DEVICE_PRI "ALT_DEVICE_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DEVICE_PRI} for devices of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_ASSIGN_PRI "ALT_ASSIGN_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_ASSIGN_PRI} for assigns of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_VOLUME_PRI "ALT_VOLUME_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_VOLUME_PRI} for volume of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_DIRECTORY_PRI "ALT_DIRECTORY_PRI (Prefs Setting)"
@TOC SETVNC_SHELL_5
The @{"expansion priority" link EXPAND_DIRECTORY_PRI} for directories of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_DOUBLEREQ "ALT_DOUBLEREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Double TAB Requester" link EXPAND_DOUBLEREQ} flag of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_FULLEXPAND "ALT_FULLEXPAND (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Expand Fully" link EXPAND_DOUBLEREQ} flag of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_VNCREQUESTER "ALT_VNCREQUESTER (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Add ViNCEd matches" link EXPAND_DOUBLEREQ} flag of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_AMBIGREQ "ALT_AMBIGREQ (Prefs Setting)"
@TOC SETVNC_SHELL_3
The @{"Requester if ambiguous" link EXPAND_DOUBLEREQ} flag of the
@{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}.

@ENDNODE
@NODE Fl_ALT_PARTIALPAT "ALT_PARTIALPAT (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"Do not match characters behind cursor" link EXPAND_PARTIALPAT}
flag of the @{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_ALT_INTOCONSOLE "ALT_INTOCONSOLE (Prefs Setting)"
@TOC SETVNC_SHELL_4
The @{"List expansions on the console" link EXPAND_INTOCONSOLE}
flag of the @{"sixth TAB expansion" link Kf_Expand_Alt}
 @{"keyboard function" link KeyFunction}

@ENDNODE
@NODE Fl_REQ_LEFTEDGE "Left Edge/REQ_LEFTEDGE (Prefs Setting)"
@TOC SETVNC_SHELL_7
This defines the position of the "left edge" of the
@{"TAB expansion requester" link TabExpand} relative to the left edge of the
window; it must be an integer between -2048 and 2048 (let's hope video
hardware technology doesn't evolve too quickly...).


This setting is only used if the
@{"Do not place file requester" link Fl_DONTPLACEREQUESTER} is
@{B}NOT@{UB} set; the only reason why this can be turned off is to work
around a rather strange interpretation of requester coordinates of the
reqtools library.

@ENDNODE
@NODE Fl_REQ_TOPEDGE "Top Edge/REQ_TOPEDGE (Prefs Setting)"
@TOC SETVNC_SHELL_7
This defines the position of the "top edge" of the
@{"TAB expansion requester" link TabExpand} relative to the top edge of the
ViNCEd window.


This setting is only used if the
@{"Do not place file requester" link Fl_DONTPLACEREQUESTER} is
@{B}NOT@{UB} set; the only reason why this can be turned off is to work
around a rather strange interpretation of requester coordinates of the
reqtools library.

@ENDNODE
@NODE Fl_REQ_WIDTH "Width/REQ_WIDTH (Prefs Setting)"
@TOC SETVNC_SHELL_7
This defines the width of the @{"TAB expansion requester" link TabExpand} in
pixels; it must be an integer between 0 and 2048.


If the width is zero, or "too small", ViNCEd will pick default values here.

@ENDNODE
@NODE Fl_REQ_HEIGHT "Height/REQ_HEIGHT (Prefs Setting)"
@TOC SETVNC_SHELL_7
This defines the height of the
@{"TAB expansion requester" link TabExpand} in pixels; it must be an integer
between 0 and 2048.


If the height is zero, or "too small", ViNCEd will pick default values here.

@ENDNODE
@NODE Fl_MACRO "MACRO (Prefs Setting)"
@TOC SETVNC_MACROS
This keyword defines the body text of a macro. The
@{"macros" link Macros} are just assigned by order, the first MACRO keyword
defines the first macro, and so on, up to ten macro definitions are allowed.


The macro body, hence the argument of this keyword, is just a plain string,
including possibly @{"special control sequences" link Macros} to be inserted
by the macro.


Note especially that the semicolon ";" may not be used as a comment
introducer on these lines, it will be part of the macro body if specified.
Note, too, that leading and trailing spaces of the macro body will be
removed, too. To avoid stripping of spaces, include the macro body in double
quotes.


For details, check the @{"macros section" link Macros}.

@ENDNODE
@NODE Fl_SYSTEMMACRO "SYSTEMMACRO (Prefs Setting)"
@TOC SETVNC_SYSTEM_3
These macros define the five internal system macros ViNCEd uses.

The macro body, hence the argument of this keyword, is just a plain string,
including possibly @{"special control sequences" link Macros} to be inserted
by the macro.


Note especially that the semicolon ";" may not be used as a comment
introducer on these lines, it will be part of the macro body if specified.
Note, too, that leading and trailing spaces of the macro body will be
removed, too. To avoid stripping of spaces, include the macro body in double
quotes.


For details, check the @{"macros section" link Macros}.


The meaning of the system macros and the times of invocation are:


@{B}First system macro@{UB}:            Quit shell

This defines the command that is used to close a shell window, if any. It
must be enabled with the
@{"Call macro to close window" link SETVNC_SHELL_1} flag. If this flag is
disabled, an "End Of File" condition will be generated. It should call
"EndCLI", or another script that shuts down the shell.

This macro is @{B}not used@{UB} if a program is running in the window.
ViNCEd uses the @{"Quit program" link Fl_QUIT_PROGRAM} macro in that case.


@{B}Second system macro@{UB}:           New window

This is the macro invoked if the "New Window" item of the
@{"project menu" link ProjectMenu} gets selected. This macro should open
another ViNCEd window.


@{B}Third system macro@{UB}:            Get help

This macro gets invoked if you select "Help..." from the
@{"project menu" link ProjectMenu}. It runs by default the SetVNC program to
load and display this guide.


@{B}Fourth system macro@{UB}:           Edit settings

Invoked if you select the "Settings..." item of the
@{"project menu" link ProjectMenu}. This runs again
@{"SetVNC" link SetVNCToc}, but without arguments.


@{B}Fifth system macro@{UB}:            Run editor

This macro is not yet used. It is reserved to turn the ViNCEd window into an
editor and should be invoked if an "Edit..." item in the project menu gets
selected. This is, however, not yet implemented.


@ENDNODE
@NODE Fl_RUN_NEW_SHELL "Fork new shell/RUN_NEW_SHELL (Prefs Setting)"
@TOC SETVNC_SYSTEM_3
This is strictly speaking not a macro, at least it is used quite
differently. The contents of this macro do not get inserted into the
keyboard buffer, the macro body is, instead, executed directly as a command.

This command is run whenever the @{"Ctrl-Z" link CtrlZ}
 @{"keyboard function" link KeyFunction} is requested to fork a new shell in
the current window, and no free shell is available. It should run a new
shell by using the "NewShell" command, in the same window.


Because this macro is used in a different way, the interpretation of the
control sequences is slightly different, even though they are passed thru
the same parser as for @{"macros" link Macros}.

For the ordinary macros, "\r" is the press of the @{B}Return@{UB} key, but
since this string is passed directly to the operating system for execution,
a "\n" must be used to mark the end of this command and to start
the execution.


It should be set to "NewCLI WINDOW=*\n" for almost all reasons, except when
a custom shell should be run instead.


If leading or trailing spaces are desired - for whatever reasons - the
double quotes are required since they avoid "trimming" of the command; they
are superfluous in all other cases.

@ENDNODE
@NODE Fl_ICON_PATH "Icon Path/ICON_PATH (Prefs Setting)"
@TOC SETVNC_SYSTEM_4
This is a string that contains the complete path of an icon - a ".info file"
- that should be used as "iconification" for a ViNCEd window. If this path
is left empty, ViNCEd will present its default icon.


A ".info" @{B}MUST NOT@{UB} be appended, that's done by ViNCEd
automatically.



@{B}Note@{UB} (for nick-pickers): Due to the way how ViNCEd parses the prefs
file, leading or trailing spaces are not allowed in this file name. Who
wants to do that anyways? (-;

@ENDNODE
@NODE Fl_ICON_TITLE "Icon Title/ICON_TITLE (Prefs Setting)"
@TOC SETVNC_SYSTEM_4
This string is used as underline title of the icon presented for an
iconified ViNCEd window. If this string is empty, no the window title will
be used instead.


Exactly like the window title, this string might contain
@{"control characters" link Title} using the percent sign "%" which are
expanded by ViNCEd at the time the window gets iconified.

Unlike the window title, however, the current Os does not allow to adapt the
icon title in case the contents of the control characters change.


This setting might be overridden by a program sending the
"ESC ] 1;title BEL" @{"escape sequence" link EscList}.


@ENDNODE
@NODE Fl_QUIT_PROGRAM "Quit Program/QUIT_PROGRAM (Prefs Setting)"
@TOC SETVNC_SYSTEM_3
This defines a system @{"macro" link Macros} that is invoked whenever a
ViNCEd window should be closed with an active and running program in it. It
replaces the @{"Quit shell" link Fl_SYSTEMMACRO} in that case.


However, ViNCEd must be told to use macros to close the window - which is
done by the @{"Call macro to close window" link SETVNC_SHELL_1} flag. If
this flag is not set, ViNCEd will ignore this macro and will just send an
"End of File" condition. This will happen, too, if this macro is left blank.

@ENDNODE
@NODE Fl_DEFAULT_FONT "Font/DEFAULT_FONT (Prefs Setting)"
@TOC SETVNC_WINDOW_1
Here you define the default font for ViNCEd windows - only for the windows
contents, not for the menu and the screen title - which is used if no font
is specified in the @{"window path" link OpenPath}.


The font specification must be given by the base name of the font without
".font", i.e. "topaz", a dot, and the requested size. Hence, to use the
topaz font, size 9 as default font, specify
@{CODE}

topaz.9

@{BODY}
here.

This font @{B}MUST@{UB} be a fixed-width (non-proportional) font, or the
graphics output will look messy.



It might be somewhat simpler to use the font requester of the
@{"SetVNC program" link SetVNCToc} on the
@{"first window page" link SETVNC_WINDOW_1}, just press the "Font" gadget on
that page.



@{B}Note@{UB}: The XEN font is NOT a fixed width font. Try the
"topaz6.8" of the author included in the distribution.


@ENDNODE
@NODE Fl_DEFAULT_PATH "Default path/DEFAULT_PATH (Prefs Setting)"
@TOC SETVNC_SYSTEM_4
This string is used as @{"window path" link OpenPath} if no path was
specified when opening a ViNCEd window, i.e. just the blank handler name
like "VNC:" was used. The handler name itself MUST NOT be specified in this
string.


Except that, it is interpreted and handled just in the same way as a
@{"path" link OpenPath} specified in the traditional way.


@{B}Note@{UB}: Due to a "feature" of the 1.3 Mount command, this is disabled
for older Os releases. Opening a window just with the handler name will (and
has to!) fail for these releases.

@ENDNODE
@NODE Fl_BUTTONMACRO "BUTTONMACRO (Prefs Setting)"
@TOC SETVNC_MACROS_3
This keyword defines the @{"macro" link Macros} body for the ViNCEd title
bar buttons. Each button definition must consist of a pair of a BUTTONMACRO
and a following @{"BUTTONTITLE" link Fl_BUTTONTITLE} keyword; up to ten
buttons may be defined, they will be put into the window title bar, from
left to right, as many buttons as room is available.

@ENDNODE
@NODE Fl_BUTTONTITLE "BUTTONTITLE (Prefs Setting)"
@TOC SETVNC_MACROS_3
This keyword defines the title of a ViNCEd @{"button" link Macros}, to
appear in the ViNCEd title bar. This definition @{B}MUST@{UB} follow a
@{"BUTTONMACRO" link Fl_BUTTONMACRO} keyword which has already setup the
body of the macro to be defined; up to ten buttons can be defined.


They will be installed into the window title in their order of appearance,
from left to right, as many as possible.

@ENDNODE

@REMARK Generic explanations for the TAB expansion settings
@NODE EXPAND_FILE_PRI "File priority (TAB Setting)"
@TOC Tab_Settings
The priority assigned to "ordinary files". These are files that have neither
the "e" bit nor the "s" bit set, i.e. are neither scripts nor executables.
Since the "e" bit is set by default in the Amiga system, very few files will
actually match this category.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_EXEC_PRI "Executables priority (TAB Setting)"
@TOC Tab_Settings
The priority assigned to files with the "e" (executable) bit set. Note that
most Amiga files fall into this category and not into
@{"Files" link EXPAND_EXEC_PRI} since this flag is set by default by the
AmigaOs.


If both the "s" and the "e" bit is set, the file is a
@{"script" link EXPAND_SCRIPT_PRI}, not an executable.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_SCRIPT_PRI "Scripts priority (TAB Setting)"
@TOC Tab_Settings
The priority assigned to files with the "s" (script) bit set, hence shell
scripts, and mostly ARexx interpreter files. If both, the "s" and the "e"
bit are set, the file is supposed to be a script, not an
@{"executable" link EXPAND_EXEC_PRI}.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_PATH_PRI "Path priority, relative (TAB Setting)"
@TOC Tab_Settings
This is a relative priority added to the priority to all files found in the
command search path of the shell, except for the current directory and the
C: assign. ViNCEd will search in the path only if you're expanding the first
argument of a shell line - namely, the command. Neither directories nor
icons found in the path match. If this is set to -128, the command search
path is not searched at all, and if the overall priority of a file falls
below -128, it is not added to the expansion list.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_COMMAND_PRI "Command (C:) priority, relative (TAB Setting)"
@TOC Tab_Settings
The relative priority of files found in the C: assign. This priority is
added as a modifier to the priority of objects found in the C: directory if
the first argument of a command line is expanded. If a different argument
gets expanded, the C: directory is excluded automatically. Additionally,
neither icons nor directories in C: match anything, they get just ignored.
If you don't want ViNCEd to search C:, even for the first argument, then set
this to -128. If the overall priority of a file falls below -128, it is not
added to the expansion list.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_RESIDENT_PRI "Residents priority (TAB Setting)"
@TOC Tab_Settings
The priority for commands found in the shell internal list of resident
commands. This list is only searched if the first argument of a command line
is to be expanded and left alone else. If this priority is set to -128, the
resident list is never searched.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_INFO_PRI "Icon (.info) priority (TAB Setting)"
@TOC Tab_Settings
The priority of the ".info" files that contain the workbench icons. To get
rid of them completely, assign them a priority of -128.

Note, too, that icons will not be found in any other directory than the
current directory, even if the first argument gets expanded, and even if the
C: directory and the path is included in the search path.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_DEVICE_PRI "Devices priority (TAB Setting)"
@TOC Tab_Settings
The priority of DOS device drivers such as "df0:", "ser:" or "VNC:". If you
don't want to see device drivers in your expansion list, set this to -128.

Note that this DOES NOT include @{"assigns" link EXPAND_ASSIGN_PRI} or
@{"volumes" link EXPAND_VOLUME_PRI}.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_ASSIGN_PRI "Assigns priority (TAB Setting)"
@TOC Tab_Settings
The priority of assigns such as "DEVS:" or "LIBS:". If you
don't want to see assigns in your expansion list, set this to -128.

Note that this DOES NOT include @{"devices" link EXPAND_DEVICE_PRI} or
@{"volumes" link EXPAND_VOLUME_PRI}.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_VOLUME_PRI "Volumes priority (TAB Setting)"
@TOC Tab_Settings
The priority of volume names such as "Work:" or "Empty:", e.g. names of
disks, but not the name of the drive. If you don't want to see volume names
in your expansion list, set this to -128.

Note that this DOES NOT include @{"assigns" link EXPAND_ASSIGN_PRI} or
@{"devices" link EXPAND_DEVICE_PRI}.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_DIRECTORY_PRI "Directories priority (TAB Setting)"
@TOC Tab_Settings
The priority assigned to ordinary directories. If you don't want
to see directories in your TAB expansion, set this to -128. However,
directories will still match if the search pattern ends explicitly with a
forwards slash "/", regardless of this priority.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this priority?" link SETVNC_SHELL_5}
@{BODY}

@ENDNODE
@NODE EXPAND_DOUBLEREQ "Double TAB Requester (TAB Setting)"
@TOC Tab_Settings
If this item is checked, the Double TAB requester is enabled. This requester
is presented whenever you press TAB a second time after completion of the
directory search, within a selectable time. This time interval is
under control of the @{"timinig page" link SETVNC_TIMING_1}. As a special
case, if this time interval is set to zero, the requester will always pop up
after the second TAB.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this flag?" link SETVNC_SHELL_3}
@{BODY}

@ENDNODE
@NODE EXPAND_FULLEXPAND "First TAB expands fully (TAB Setting)"
@TOC Tab_Settings
If checked, ViNCEd will not try to present a
@{"refinement" link Refinement} in case more than one matching file was
found on a TAB expansion. Instead, the first match found will be inserted
immediately.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this flag?" link SETVNC_SHELL_3}
@{BODY}

@ENDNODE
@NODE EXPAND_VNCREQUESTER "Add ViNCEd matches to the requester (TAB Setting)"
@TOC Tab_Settings
If disabled, a standard file requester showing the current directory will
be used. If enabled, only matching files will be shown in this requester,
but @{B}INCLUDING@{UB} matches from the resident list, the device list and
even matches found in other directories, if available.


This requester might look a bit strange sometimes since it may contain
double entries. This is, however, normal if, for example, a file was found
twice in two different directories, or was found in the command directory
and in the list of resident commands. You should be alarmed if that happens
because it is not quite clear which copy of the file will be executed by the
shell.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this flag?" link SETVNC_SHELL_3}
@{BODY}

@ENDNODE
@NODE EXPAND_AMBIGREQ "Requester if expansion is ambiguous (TAB Setting)"
@TOC Tab_Settings
If this item is enabled, ViNCEd will open its file requester in case more
than one possible match for your TAB expansion
@{"template" link Template} was found.


@{CODE}
@{"To the TAB expansion tutorial" link TabExpand}
@{"To the TAB expansion settings overview" link Tab_Settings}
@{"Where to adjust this flag?" link SETVNC_SHELL_3}
@{BODY}

@ENDNODE
@NODE EXPAND_PARTIALPAT "Do not match characters behind cursor (TAB Setting)"
@TOC Tab_Settings
Controls how ViNCEd should construct its TAB match pattern. If this flag is
turned off, which is the default, ViNCEd will look for possible expansions
that start with the characters in front of the cursor position and that end
with the characters behind and under the cursor position. Hence,
possible expansions can be generated by "typing at the cursor position".


If this flag is enabled, ViNCEd uses a different mechanism. The search
pattern is truncated at the cursor position, hence characters behind and
under the cursor do not contribute by restricting the search further. If a
match has been found, these additional characters are either turned into an
argument of the match by separating them by a blank space from the former
search pattern, or are concatenated to the match if the match is a directory
or a device.

@ENDNODE
@NODE EXPAND_INTOCONSOLE "List expansions on the console (TAB Setting)"
@TOC Tab_Settings
This flag will disable any kind of requester and will instead print the
possible matches of a TAB expansion in the form of a list on the console. As
for the requester, this list is sorted by the
@{"priority" link SETVNC_SHELL_5} of the matches found. Top priority
elements go first.

@ENDNODE

@REMARK Control characters
@NODE Ctl_ENQ "05 ENQ"
@TOC CtrlList
@{B}07@{UB}     :(C)    ENQ     (enquire)


Returns the terminal type as string to the receiver. This is always
"ViNCEd".
@ENDNODE
@NODE Ctl_BEL "07 BEL"
@TOC CtrlList
@{B}07@{UB}     :(C)    BEL     (bell)


Flashes the screen.
@ENDNODE
@NODE Ctl_BS "08 BS"
@TOC CtrlList
@{B}08@{UB}     :(C)    BS      (backspace)


Moves the cursor backwards. Usually non-destructive, but this can be
changed with @{"CSI >?24h" link Fl_DOSERASE}.
@ENDNODE
@NODE Ctl_HT "09 HT"
@TOC CtrlList
@{B}09@{UB}     :(C)    HT      (horizontal tabulator)


Moves the cursor to the next tabulator stop, can be toggled to inserting
spaces up to the next TAB stop with @{"CSI 4h" link Fl_DOSINSERT}.

@ENDNODE
@NODE Ctl_LF "0A LF"
@TOC CtrlList
@{B}0A@{UB}     :(C)    LF      (line feed)


Move the cursor to the next line. Scrolling can be disabled
with @{"CSI >1h" link CsiList}.


@ENDNODE
@NODE Ctl_VT "0B VT"
@TOC CtrlList
@{B}0B@{UB}     :(C)    VT      (vertical tabulator)


Move the cursor upwards one line.
@ENDNODE
@NODE Ctl_FF "0C FF"
@TOC CtrlList
@{B}0C@{UB}     :(C)    FF      (form feed)


Clear screen and set cursor to origin. If in the @{"commodore mode" link CsiEsc},
and the cursor is not in the border, clear only the scroll region.

@ENDNODE
@NODE Ctl_CR "0D CR"
@TOC CtrlList
@{B}0D@{UB}     :(C)    CR      (carriage return)


Move the cursor to the start of the current line.

@ENDNODE
@NODE Ctl_SI "0E SI"
@TOC CtrlList
@{B}0E@{UB}     :(C)    SI      (shift in)


Set implicitly bit 7 of all printed characters.

@ENDNODE
@NODE Ctl_SO "0F SO"
@TOC CtrlList
@{B}0F@{UB}     :(C)    SO      (shift out)


Revert the result of @{"SI" link Ctl_SI} and leave bit 7 of the
printed characters alone.

@ENDNODE
@NODE Ctl_ESC "1B ESC"
@TOC CtrlList
@{B}1B@{UB}     :(C)    ESC     (escape)


Escape sequence introducer, see @{"List of ESC sequence" link ESCList}.

@ENDNODE
@NODE Ctl_DEL "7F DEL"
@TOC CtrlList
@{B}7F@{UB}     :(C)(V) DEL     (delete)


A checkered box (a smear character), but can be turned into the
forward deleting control character by @{"CSI >?24h" link Fl_DOSERASE}.

@ENDNODE
@NODE Ctl_IND "84 IND"
@TOC CtrlList
@{B}84@{UB}     :(C)    IND     (index)


Works like @{"LF" link Ctl_LF}, but does not place cursor at start of line.

@ENDNODE
@NODE Ctl_NL "85 NL"
@TOC CtrlList
@{B}85@{UB}     :(C)    NL      (new line)


Equivalent to @{"LF" link Ctl_LF} followed by @{"CR" link Ctl_CR}.

@ENDNODE
@NODE Ctl_HST "88 HST"
@TOC CtrlList
@{B}88@{UB}     :(C)    HST     (horizontal tabulator set)


Create a tabulator stop at the current cursor position.

@ENDNODE
@NODE Ctl_RI "8D RI"
@TOC CtrlList
@{B}8D@{UB}     :(C)    RI      (reverse index)


Move the cursor one line upwards, identical to @{"VT" link Ctl_VT}.

@ENDNODE
@NODE Ctl_SS2 "8E SS2"
@TOC UnCtrlList
@{B}8E@{UB}     :(2)    SS2     (shift sequence 2)


Move to international character table G2. @{B}Unsupported@{UB}

Standard LATIN-1-ANSI has only the character sets G0 and G1, and
ViNCEd does only support eight bit characters of G0 and G1.

@ENDNODE
@NODE Ctl_SS3 "8F SS3"
@TOC UnCtrlList
@{B}8F@{UB}     :(2)    SS3     (shift sequence 3)


Move to international character table G3. @{B}Unsupported@{UB}

Standard LATIN-1-ANSI has only the character sets G0 and G1, and
ViNCEd does only support eight bit characters of G0 and G1.

@ENDNODE
@NODE Ctl_DCS "90 DCS"
@TOC UnCtrlList
@{B}90@{UB}     :(2)    DCS     (download character set)


Start downloading a character set. @{B}Unsupported@{UB}

ViNCEd does not support the fixed character matrix of VT-xxx
terminals and especially no download-able character sets.


The control sequence is recognized, and its contents is ignored. DCS is
terminated by @{"ST" link Ctl_ST}.

@ENDNODE
@NODE Ctl_SPA "96 SPA"
@TOC UnCtrlList
@{B}96@{UB}     :(2)    SPA     (start guarded area)


Mark the beginning of a guarded area. @{B}Unsupported@{UB}

@ENDNODE
@NODE Ctl_EPA "97 EPA"
@TOC UnCtrlList
@{B}97@{UB}     :(2)    EPA     (end guarded area)


Mark the end of a guarded area. @{B}Unsupported@{UB}

@ENDNODE
@NODE Ctl_SOS "98 SOS"
@TOC UnCtrlList
@{B}98@{UB}     :(2)    SOS     (start of string)


Terminated by @{"ST" link Ctl_ST}, otherwise @{B}unsupported@{UB}.

@ENDNODE
@NODE Ctl_DECID "9A DECID"
@TOC UnCtrlList
@{B}9A@{UB}     :(D)    DECID   (DEC terminal ID)


This is the eight bit equivalent of @{"ESC Z" link Esc_uz} which is
an obsolete form of @{"CSI c" link CSI_lc}, VT-52 status request.
Replied by "CSI ?60c" ("this is a VT-220 terminal")

@ENDNODE
@NODE Ctl_CSI "9B CSI"
@TOC CtrlList
@{B}9B@{UB}     :(C)    CSI     (control sequence introducer)


Often used below for more complex sequences,
see @{"list of CSI sequences" link CSIList}.


This sequence has the seven bit equivalent @{"ESC [" link Esc_Bra}.

@ENDNODE
@NODE Ctl_ST "9C ST"
@TOC CtrlList
@{B}9C@{UB}     :(C)    ST      (string terminator)


Equivalent to @{"ESC \ " link Esc_Bsl}, this terminates
a @{"OSC" link Ctl_OSC} sequence.

@ENDNODE
@NODE Ctl_OSC "9D OSC"
@TOC CtrlList
@{B}9D@{UB}     :(C)    OSC     (operating system controls)


Another type of control sequence that takes full strings as argument.
See @{"list of OSC sequences" link OSCList}. Terminated
by @{"ST" link Ctl_ST} (VT-xxx) or @{"BEL" link Ctl_BEL} (XTerm)
or @{"LF" link Ctl_LF} (ViNCEd). ViNCEd accepts all all three standards.


This sequence has the seven bit equivalent @{"ESC ]" link Esc_Ket}.

@ENDNODE
@NODE Ctl_PM "9E PM"
@TOC UnCtrlList
@{B}9E@{UB}     :(2)    PM


@{B}Unsupported@{UB}.

Privacy message. The control sequence is recognized, and its contents
is ignored. PM is terminated by @{"ST" link Ctl_ST}.

@ENDNODE
@NODE Ctl_APC "9F APC"
@TOC UnCtrlList
@{B}9F@{UB}     :(2)    APC     (application program command)


@{B}Unsupported@{UB}

The control sequence is recognized, and its contents is ignored. APC is
terminated by @{"ST" link Ctl_ST}.

@ENDNODE

@REMARK ESC sequences
@NODE Esc_7 "ESC 7"
@TOC EscList
@{B}ESC 7@{UB}  :(D)


Safeback cursor, colors and style.
@ENDNODE
@NODE Esc_8 "ESC 8"
@TOC EscList
@{B}ESC 8@{UB}  :(D)


Restore colors, style and cursor position.
@ENDNODE
@NODE Esc_9 "ESC 9"
@TOC EscList
@{B}ESC 9@{UB}  :(V)


Restore colors, style, cursor and background color.
@ENDNODE
@NODE Esc_ud "ESC D"
@TOC EscList
@{B}ESC D@{UB}  :(C)


The seven bit equivalent of @{"IND" link Ctl_IND}, moves the cursor
down one line.
@ENDNODE
@NODE Esc_ue "ESC E"
@TOC EscList
@{B}ESC E@{UB}  :(C)


The seven bit equivalent of @{"NL" link Ctl_NL}, equivalent to a line
feed @{"LF" link Ctl_LF} and @{"CR" link Ctl_CR} at once.

@ENDNODE
@NODE Esc_uf "ESC F"
@TOC EscList
@{B}ESC F@{UB}  :(D)


Cursor to lower left corner of screen. This is mainly intended as a
work around for some HP terminals and therefore @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_uh "ESC H"
@TOC EscList
@{B}ESC H@{UB}  :(C)


The seven bit equivalent of @{"HST" link Ctl_HST}, sets a
tabulator stop at the current cursor position.

@ENDNODE
@NODE Esc_um "ESC M"
@TOC EscList
@{B}ESC M@{UB}  :(C)


The seven bit equivalent of @{"RI" link Ctl_RI}, moves the cursor
up one line.

@ENDNODE
@NODE Esc_un "ESC N"
@TOC EscList
@{B}ESC N@{UB}  :(2)


The seven bit equivalent of @{"SS2" link Ctl_SS2}. @{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_uo "ESC O"
@TOC EscList
@{B}ESC O@{UB}  :(2)


The seven bit equivalent of @{"SS3" link Ctl_SS3}. @{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_up "ESC P"
@TOC EscList
@{B}ESC P@{UB}  :(2)


The seven bit equivalent of @{"DCS" link Ctl_DCS}, the downloadable
character set introducer. Terminated by @{"ST" link Ctl_ST}.
@{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_uv "ESC V"
@TOC EscList
@{B}ESC V@{UB}  :(2)


Seven bit equivalent of @{"SPA" link Ctl_SPA}. @{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_uw "ESC W"
@TOC EscList
@{B}ESC W@{UB}  :(2)


Seven bit equivalent of @{"EPA" link Ctl_SPA}. @{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_ux "ESC X"
@TOC EscList
@{B}ESC X@{UB}  :(2)


Seven bit equivalent of @{"SOS" link Ctl_SOS}. @{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_uz "ESC Z"
@TOC EscList
@{B}ESC Z@{UB}  :(D)


Obsolete form of @{"CSI c" link CSI_lc}, VT-52 status request. Replied by
"CSI ?60c" ("this is a VT-220 terminal")

@ENDNODE
@NODE Esc_lc "ESC c"
@TOC EscList
@{B}ESC c@{UB}  :(C)


Global reset, clear (lower) screen. Reset colors and rendering styles to
to default, resets TAB stops, select character table G0 and much more.

@ENDNODE
@NODE Esc_ll "ESC l"
@TOC EscList
@{B}ESC l@{UB}  :(2)


Memory lock. Lock all lines above the cursor. Not implemented, therefore
@{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_lm "ESC m"
@TOC EscList
@{B}ESC m@{UB}  :(2)


Memory unlock. Reverts @{"ESC l" link Esc_ll}. Not implemented, therefore
@{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_Under "ESC _"
@TOC EscList
@{B}ESC _@{UB}  :(2)


The seven bit equivalent of @{"APC" link Ctl_CSI}, the application
program command character. Terminated by @{"ST" link Ctl_ST}.
@{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_Hat "ESC ^"
@TOC EscList
@{B}ESC ^@{UB}  :(2)


The seven bit equivalent of @{"PM" link Ctl_PM}, the privacy message
introducer. Terminated by @{"ST" link Ctl_ST}. @{B}Unsupported@{UB}

@ENDNODE
@NODE Esc_Bra "ESC ["
@TOC EscList
@{B}ESC [@{UB}  :(C)


The seven bit equivalent of @{"CSI" link Ctl_CSI}, the control sequence
introducer.

@ENDNODE
@NODE Esc_Bsl "ESC \ "
@TOC EscList
@{B}ESC \\@{UB}  :(2)


The seven bit equivalent of @{"ST" link Ctl_ST}, the string terminator for
@{"OSC sequences" link OSCList}.

@ENDNODE
@NODE Esc_Ket "ESC ]"
@TOC EscList
@{B}ESC ]@{UB}  :(2)


The seven bit equivalent of @{"OSC" link Ctl_OSC}, the operating system
controls character. Used for introducing the "XTerm" sequences and
terminated by either @{"BEL" link Ctl_BEL}, @{"LF" link Ctl_LF} or
@{"ST" link Ctl_ST}.

@ENDNODE
@NODE Esc_Num8 "ESC # 8"
@TOC EscList
@{B}ESC # 8@{UB}  :(D)


DEC screen alignment test, fills window with E's. Used for testing but
not particular useful otherwise.

@ENDNODE
@NODE Esc_SPCF "ESC SPC F"
@TOC EscList
@{B}ESC SPC F@{UB}  :(2)


Switch to seven bit mode. ViNCEd will output seven bit control sequences
now and will ignore the MSB.

@ENDNODE
@NODE Esc_SPCG "ESC SPC G"
@TOC EscList
@{B}ESC SPC G@{UB}  :(2)


Switch back to eight bit mode. ViNCEd will sent 8 bit control characters.
This is the default.

@ENDNODE
@NODE Esc_SPCL "ESC SPC L"
@TOC EscList
@{B}ESC SPC L@{UB}  :(2)


Set ANSI conformance level 1 (vt100, 7-bit controls). This is currently
ignored by ViNCEd except that it enters the seven bit compatibility mode.

@ENDNODE
@NODE Esc_SPCM "ESC SPC M"
@TOC EscList
@{B}ESC SPC M@{UB}  :(2)


Set ANSI conformance level 2 (vt200). This is currently ignored by ViNCEd
except that it enters the eight bit mode.

@ENDNODE
@NODE Esc_SPCN "ESC SPC N"
@TOC EscList
@{B}ESC SPC N@{UB}  :(2)


Set ANSI conformance level 3 (vt300). This is currently ignored by ViNCEd
except that it enters the eight bit mode.

@ENDNODE
@NODE Esc_At "ESC @"
@TOC EscList
@{B}ESC \@@{UB}     :(2)


Insert the next control character directly. This sequence is not
understood by the ViNCEd terminal emulator, but only by the CSI parser
of the @{"SetVNC buffer IO module" link Ca_GET}, don't send this to
ViNCEd itself.

@ENDNODE
@NODE Esc_Num3 "ESC # 3"
@TOC EscList
@{B}ESC # 3@{UB}  :(D)


Upper half of double height and double width characters.
The font is left to the system and not scalable,
therefore @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_Num4 "ESC # 4"
@TOC EscList
@{B}ESC # 4@{UB}  :(D)


Lower half of double height and double width characters.
The font is left to the system and not scalable,
therefore @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_Num6 "ESC # 6"
@TOC EscList
@{B}ESC # 6@{UB}  :(D)


Double width characters in the current line. The font is left to the
system and not scalable, therefore @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_OpenS "ESC ("
@TOC EscList
@{B}ESC (@{UB}    :(2)


Select G0 character set with next character. As for ViNCEd, the G0 set
is fixed to plain ASCII and part of the locale and the font, therefore
@{B}UNSUPPORTED@{UB}.

@ENDNODE
@NODE Esc_CloseS "ESC )"
@TOC EscList
@{B}ESC )@{UB}    :(2)


Select G1 character set with next character. As for ViNCEd, the G1 set
is fixed to ECMA 94 Latin 1 and part of the locale and the font, therefore
@{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_StarS "ESC *"
@TOC EscList
@{B}ESC *@{UB}    :(2)


Select G2 character set with next character. As ViNCEd and the Amiga
do not support the G2 character set, this is @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_PlusS "ESC +"
@TOC EscList
@{B}ESC +@{UB}    :(2)


Select G3 character set with next character. As ViNCEd and the Amiga
do not support the G3 character set, this is @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_BarS "ESC |"
@TOC EscList
@{B}ESC |@{UB}    :(2)


Select G3 set as GR (LS3R). @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_BraS "ESC }"
@TOC EscList
@{B}ESC }@{UB}    :(2)


Select G2 set as GR (LS2R). @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_TwiddleS "ESC ~"
@TOC EscList
@{B}ESC ~@{UB}    :(2)


Select G1 set as GR (LS1R) @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_ln "ESC n"
@TOC EscList
@{B}ESC n@{UB}    :(2)


Permanent shift to the G2 character set. There is no G2 character set
in the Amiga, hence @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_lo "ESC o"
@TOC EscList
@{B}ESC o@{UB}    :(2)


Permanent shift to the G3 character set. There is no G3 character set
in the Amiga, hence @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_Less "ESC < "
@TOC EscList
@{B}ESC <@{UB}    :(2)


Enter VT-52 emulation mode. ViNCEd doesn't implement a VT-52 emulation,
therefore @{B}unsupported@{UB}.

@ENDNODE
@NODE Esc_Eq "ESC ="
@TOC EscList
@{B}ESC =@{UB}    :(2)


Keypad mode enable. ViNCEd doesn't implement the keypad mode,
therefore @{B}unsupported@{UB}.

@ENDNODE

@REMARK OSC sequences
@NODE Osc_0 "ESC ] 0;strg ST"
@TOC OscList
@{B}ESC ] 0;strg ST@{UB}        :(X)


Set the icon name and window title to the provided string.

@ENDNODE
@NODE Osc_1 "ESC ] 1;strg ST"
@TOC OscList
@{B}ESC ] 1;strg ST@{UB}        :(X)


Set the icon name to the provided string.

@ENDNODE
@NODE Osc_2 "ESC ] 2;strg ST"
@TOC OscList
@{B}ESC ] 2;strg ST@{UB}        :(X)


Set the window title alone to the provided string.

@{B}Note@{UB}: If the icon title is empty, ViNCEd will use the window title
as icon title as well.

@ENDNODE
@NODE Osc_3 "ESC ] 3;strg ST"
@TOC OscList
@{B}ESC ] 3;strg ST@{UB}        :(V)


Set screen title. To make this working, the window must have been opened
with a screen title, i.e. an @{"STITLE" link Op_STITLE} option. Set the
window title alone to the provided string.


This sequence is incompatible to XTerm which expects here to set an
X-property on the top-level window, something that could be compared to the
screen of the Amiga.


@ENDNODE
@NODE Osc_4 "ESC ] 4;strg ST"
@TOC OscList
@{B}ESC ] 4;strg ST@{UB}        :(V)


For ViNCEd, this is identical to @{"ESC ] 0;strg ST" link Osc_0}.


This sequence is incompatible to XTerm which expects here to set a color to
a given named color.

@ENDNODE
@NODE Osc_10 "ESC ] 10;strg ST"
@TOC UnOscList
@{B}ESC ] 10;strg ST@{UB}        :(X)


Change color names starting with text foreground to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_11 "ESC ] 11;strg ST"
@TOC UnOscList
@{B}ESC ] 11;strg ST@{UB}        :(X)


Change color names starting with text background to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_12 "ESC ] 12;strg ST"
@TOC UnOscList
@{B}ESC ] 12;strg ST@{UB}        :(X)


Change color names starting with text cursor to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_13 "ESC ] 13;strg ST"
@TOC UnOscList
@{B}ESC ] 13;strg ST@{UB}        :(X)


Change color names starting with mouse foreground to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_14 "ESC ] 14;strg ST"
@TOC UnOscList
@{B}ESC ] 14;strg ST@{UB}        :(X)


Change color names starting with mouse background to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_15 "ESC ] 15;strg ST"
@TOC UnOscList
@{B}ESC ] 10;strg ST@{UB}        :(X)


Change color names starting with Tek foreground to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_16 "ESC ] 16;strg ST"
@TOC UnOscList
@{B}ESC ] 16;strg ST@{UB}        :(X)


Change color names starting with Tek background to the color "strg", given
as a list of one or more color names or RGB specifications, separated by
semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_17 "ESC ] 17;strg ST"
@TOC UnOscList
@{B}ESC ] 17;strg ST@{UB}        :(X)


Change color names starting with highlight to the color "strg",
given as a list of one or more color names or RGB specifications, separated
by semicolon, up to eight.


@{B}Unsupported@{UB}, but something similar is available
thru @{"CSI V" link Csi_uv}.

@ENDNODE
@NODE Osc_41 "ESC ] 41;strg ST"
@TOC OscList
@{B}ESC ] 41;strg ST@{UB}        :(V)


Set user inputs. This command inserts its string argument into the keyboard
buffer as if it was typed by the user. Should be used with great care since
this might easely lead to confusions. Might not be activated in all console
modes to avoid security holes.

@ENDNODE
@NODE Osc_42 "ESC ] 42;strg ST"
@TOC OscList
@{B}ESC ] 42;strg ST@{UB}        :(V)


Set keymap. ViNCEd checks either the keymap.resource or "DEVS:Keymaps" for
the desired keymap. Hence the command

@{CODE}
echo "*E]42;d"
@{BODY}

selects the german keyboard.

@ENDNODE
@NODE Osc_46 "ESC ] 46;strg ST"
@TOC UnOscList
@{B}ESC ] 46;strg ST@{UB}        :(X)


Change log file to "strg".


@{B}Unsupported@{UB}, due to limitations set by the dos library ViNCEd can't
support log files currently. Besides, I don't like Big Brother.

@ENDNODE
@NODE Osc_50 "ESC ] 50;strg ST"
@TOC OscList
@{B}ESC ] 50;strg ST@{UB}        :(V)


Change the window font. The font is given as "name.size", the appendix
"font" must be dropped. As an example,

@{CODE}
echo "E*]50;topaz.8"
@{BODY}

selects the topaz font in size eight.


This is not quite compatible to the XTerm which expects fonts in different
formats not suitable for the Amiga.

@ENDNODE

@REMARK CSI Sequences
@NODE Csi_At "CSI n @"
@TOC CsiList
@{B}CSI n \@@{UB}        :(2)


Insert n spaces at the cursor position.

@ENDNODE
@NODE Csi_ua "CSI n A"
@TOC CsiList
@{B}CSI n A@{UB}        :(C)


Move cursor n lines up. In the @{"VT-220 mode" link CsiEsc}, you're able to
leave the scrolling region with this command, in the Commodore mode this
scrolls if the cursor reaches the border of the scroll region.

@ENDNODE
@NODE Csi_ub "CSI n B"
@TOC CsiList
@{B}CSI n B@{UB}        :(C)


Move cursor n lines down. In the @{"VT-220 mode" link CsiEsc}, you're able
to leave the scrolling region with this command, in the Commodore mode this
scrolls if the cursor reaches the border of the scroll region.

@ENDNODE
@NODE Csi_uc "CSI n C"
@TOC CsiList
@{B}CSI n C@{UB}        :(C)


Move cursor n characters forwards. Unlike formulated in the VT-220 standard,
n may be zero or negative and moves in that case the cursor in the opposite
direction or doesn't move it at all. This feature is not available in
@{"VT-220 mode" link CsiEsc}.

@ENDNODE
@NODE Csi_ud "CSI n D"
@TOC CsiList
@{B}CSI n D@{UB}        :(C)


Move cursor n characters backwards. Unlike formulated in the VT-220
standard, n may be zero or negative and moves in that case the cursor in the
opposite direction or doesn't move it at all. This feature is not available
in @{"VT-220 mode" link CsiEsc}.

@ENDNODE
@NODE Csi_ue "CSI n E"
@TOC CsiList
@{B}CSI n E@{UB}        :(C)


Move cursor n lines down, set cursor to the leftmost position. n can be
zero or negative in the @{"Commodore mode" link CsiEsc}.

@ENDNODE
@NODE Csi_uf "CSI n F"
@TOC CsiList
@{B}CSI n F@{UB}        :(2)


Move cursor n lines up, set cursor to the leftmost position. n can be
zero or negative in the @{"Commodore mode" link CsiEsc}.

@ENDNODE
@NODE Csi_ug "CSI n G"
@TOC CsiList
@{B}CSI n G@{UB}        :(2)(V)


Set the cursor column (X position) to n. If n is negative, it specifies an
offset from the rightmost window border. Note that columns are counted from
one up. This sequence is identically to @{"CSI n `" link Csi_Apo}.

@ENDNODE
@NODE Csi_uh "CSI n;n H"
@TOC CsiList
@{B}CSI n;n H@{UB}      :(C)(V)


Move cursor to the specified row and column. n counts from one up (ugly, but
true). In the @{"Commodore mode" link CsiEsc}, the cursor cannot be placed
outsite of the scrolling region, and the position is relative to the
scrolling region.


As an extension, each numeric argument can be preceded by >?, which moves
the cursor to an absolute position ignoring the scroll region.


The roles between the modified and unmodified version of this sequence are
interchanged in the VT-220 mode; the unmodified version moves the cursor to
an absolute position, the modified to a position relative to the scrolling
region. This default can be again overridden and reversed by the sequence
@{"CSI ?6h" link Csi_lh} which selects the VT-220 "origin mode".


As an extension to the VT-220 standard, negative values are accepted and
specify positions relative to the bottom or right border.

@ENDNODE
@NODE Csi_ui "CSI n I"
@TOC CsiList
@{B}CSI n I@{UB}        :(C)(2)


Move to the next nth TAB stop. If ommitted, this defaults to one. The
argument n is an extension and is allowed to be negative to move backwards.


@ENDNODE
@NODE Csi_uj "CSI n J"
@TOC CsiList
@{B}CSI n J@{UB}        :(C)(2)


Erase in display; n specifies the operation in detail.


@{B}n=0@{UB}    :(C)    (default)

Clear starting at cursor position up to the end of the window.


@{B}n=1@{UB}    :(2)

In the CBM compatibility mode, identical to n=0. In the VT-220 mode: Clear
from the beginning of the window up to and inclusive the cursor position,
does NOT touch the lines in the @{"upper display region" link Buffers}. This
is a workaround for a bug in the editor "Ed". (Which guy at CBM did not read
the docs?)


@{B}n=2@{UB}    :(2)

Clear all @{"lower lines" link Buffers}, do not move the cursor.


@{B}n=3@{UB}    :(V)

Same as n=1, but works even in CBM mode like the VT-220 control code.


In the @{"Commodore mode" link CsiEsc}, the cleared region depends on
whether the cursor is in the scrolling region or in the border. In the later
case, everything is cleared, in the former only the scroll region is
affected.


@ENDNODE
@NODE Csi_uk "CSI n K"
@TOC CsiList
@{B}CSI n K@{UB}        :(C)(2)


Erase in line; n specifies again the operation in detail.


@{B}n=0@{UB}    :(C)    (default)

Clear everything under and behind the cursor position up to the end of the
line.


@{B}n=1@{UB}    :(2)

In the Commodore compatibility mode, like n=0. This is a workaround
for a bug in the system editor "Ed". In the VT-220 mode clear characters
from the start of the line up to and inclusive the cursor position.


@{B}n=2@{UB}     :(2)

Clear the whole line, but do not move the cursor.


@{B}n=3@{UB}    :(V)

Clears characters from the start of the line to the cursor position, like
n=1. But this one works even in the commodore mode.

@ENDNODE
@NODE Csi_ul "CSI n L"
@TOC CsiList
@{B}CSI n L@{UB}        :(C)


Insert n lines. This does usually scroll lines into
the @{"lower buffer" link Buffers} unless the control flag
@{"CSI >?14h" link Fl_SCROLLBORDERS} is set.


@ENDNODE
@NODE Csi_um "CSI n M"
@TOC CsiList
@{B}CSI n M@{UB}        :(C)


Delete n lines. Scrolls in lines in the lower buffer unless CSI >?14h is
set. Inserts blank lines at the bottom of the window in this case.

@ENDNODE
@NODE Csi_up "CSI n P"
@TOC CsiList
@{B}CSI n P@{UB}        :(C)


Delete n characters.

@ENDNODE
@NODE Csi_us "CSI n S"
@TOC CsiList
@{B}CSI n S@{UB}        :(C)


Scroll up n lines. In the @{"Commodore mode" link CsiEsc}, this scrolls only
the scroll region if the cursor is not in the border. If the flag CSI >? 14h
is set, blank lines are scrolled in and the off-window buffers are not
affected.


@ENDNODE
@NODE Csi_ut "CSI n T"
@TOC CsiList
@{B}CSI n T@{UB}        :(C)


Scroll down n lines. In the @{"Commodore mode" link CsiEsc}, this scrolls
only the scroll region if the cursor is not in the border. If the flag CSI
>? 14h is set, blank lines are scrolled in and the off-window buffers are
not affected.


@ENDNODE
@NODE Csi_uv "CSI reg;r;g;b V"
@TOC CsiList
@{B}CSI reg;r;g;b V@{UB} :(V)           ViNCEd set color sequence.

@{B}CSI ?reg;r;g;b V@{UB}:(V)           ViNCEd set cursor color sequence.



These sequences will change the screen colors of ViNCEd. They work only if
the ViNCEd window was opened on its own screen, as told by the parameters in
the @{"window path" link OpenPath}.


These screen colors can be set by default as well, using the
@{"second window page" link SETVNC_WINDOW_2} of SetVNC.


Colors defined in the defaults can be reset, i.e. the CSI V can be un-done
with the reset control sequence @{"ESC c" link ESCLIST}.


@{B}reg@{UB} is the index of the color register you want to change.
Currently, ViNCEd supports only 16 different color registers.


@{B}r;g;b@{UB}

The red, green and blue component of the color to load into "reg". The
values are given as 16 bit integers, i.e. 65535 is the maximum.


If @{B}reg@{UB} is between 16 and 31, the color register @{UB}reg@{UB}-16 
is affected; thus, @{B}reg@{UB}=16 and @{B}reg@{UB}=0 set both the
background color. However, the red, green and blue components are now given
as four bit integers, i.e. 15 is the maximum. This gives a coarser color
specification, but the numbers are somewhat more readable.


If @{B}reg@{UB} is between 32 and 47, this sequence selects a color for the
@{"ANSI pen" link ANSICOLORS} @{B}reg@{UB}-32, hence overriding the ViNCEd
defaults; this works even if no custom screen was opened for this window.


The color itself is given as 16 bit values @{B}r;g;b@{UB}.


To specify four bit ANSI colors, use values for @{B}reg@{UB} between 48 and
63, again selecting the color of the
@{"ANSI pen" link ANSICOLORS} @{B}reg@{UB}-48.


A value between 64 and 95 releases the ANSI pen @{B}reg@{UB}-64. This does
@{B}NOT@{UB} mean that some colors are reloaded with system defaults, it is
just the pen that is released; a different program running on the same
screen will be allowed to load and change it.



Now for the ViNCEd set cursor color sequence; note the question mark in
front of the register number:


@{B}reg@{UB} = ?1  :

Use a colored cursor, use 16 bit color definitions, i.e. 65535 is lightest.


@{B}reg@{UB} = ?17 :

Use a colored cursor, specify colors in four bit values, i.e. 15 is highest
color intensity.


@{B}reg@{UB} = ?33 :

Use a colored cursor, specify 16 bit color values but load the color with a
higher precision, i.e. specify a higher priority for the cursor color. This
is useful if you want to load the cursor color register with a definite
value even though you're working on a screen with very few pens available.


@{B}reg@{UB} = ?49 :

Use a colored cursor, define the color as four bit value, use higher
precision.


@{B}reg = ?65@{UB} :

Use the default "COMPLEMENT" style cursor, free the cursor color. @{B}THIS
DOES NOT MEAN@{UB} that the color registers are loaded with the default
screen values you found there before you colored the cursor. This does ONLY
mean that ViNCEd releases the control over the color register back to the
operating system and uses the old style cursor instead.

@ENDNODE
@NODE Csi_uw "CSI n W"
@TOC CsiList
@{B}CSI n W@{UB}        :(C)


Cursor TAB control; details are controlled by the argument n.


@{B}n=0@{UB}    :(C)    (Default)       Set TAB stop at cursor position

@{B}n=2@{UB}    :(C)    Clear TAB stop at cursor position

@{B}n=5@{UB}    :(C)    Clear all TAB stops

@ENDNODE
@NODE Csi_ux "CSI n X"
@TOC CsiList
@{B}CSI n X@{UB}        :(2)


Overwrite the next n characters with blank spaces.


@ENDNODE
@NODE Csi_uy "CSI n Y"
@TOC CsiList
@{B}CSI n Y@{UB}        :(V)(S)

ViNCEd window manager control. Details depend on n.


This is a replacement for a similar SGI winterm control sequence that does
not obey the ANSI rules and hasn't been implemented in ViNCEd for that
reason. This control sequence performs some intuition related actions:


@{B}n = 0@{UB}  :       Activate this window.

@{B}n = 1@{UB}  :       Send window to front.

@{B}n = 2@{UB}  :       Send window to background.

@{B}n = 3@{UB}  :       Send the screen this window resides on to the front.

@{B}n = 4@{UB}  :       Send the screen to the background.

@{B}n = 5@{UB}  :       Show the screen title.

@{B}n = 6@{UB}  :       Hide the screen title.


The values n=5 and n=6 are only working if the
@{"window path" link OpenPath} forced ViNCEd to open its own screen. They
make only sense for @{"BACKDROP" link Op_BACKDROP} like windows and send the
screen drag bar behind or in front of a @{"BACKDROP" link Op_BACKDROP}
windows. Hence, this action can't be seen, usually.

@ENDNODE
@NODE Csi_uz "CSI n Z"
@TOC CsiList
@{B}CSI n Z@{UB}        :(C)


Cursor n TABs backwards, n may be negative to move forwards.

@ENDNODE
@NODE Csi_Apo "CSI n `"
@TOC CsiList
@{B}CSI n `@{UB}        :(2)(V)


Set the cursor column (X position) to n. If n is negative, it specifies an
offset from the rightmost window border. Note that columns are counted from
one up. This sequence is identically to @{"CSI n G" link Csi_ug}.


@ENDNODE
@NODE Csi_lc "CSI c"
@TOC CsiList
@{B}CSI c@{UB}          :(2)


VT-52 status request. Send terminal ID, identically to
@{"ESC Z" link Esc_uz}. Replied by CSI ?60c ("this is a VT-220 terminal").



@{B}CSI >c@{UB}         :(2)


Send device attributes. Replied by CSI 1 ;vers;rev c ("this is a VT-220
terminal."). @{B}vers@{UB} is the ViNCEd version number, @{B}rev@{UB} is the
ViNCEd revision.

@ENDNODE
@NODE Csi_ld "CSI n d"
@TOC CsiList
@{B}CSI n d@{UB}        :(2)(V)


Set the cursor row (Y position) to n. If n is negative, it specifies
an offset from the bottom window border, or the bottom of the scroll 
region. Note that rows are counted from one up.

In the @{"Commodore mode" link CsiEsc}, the cursor cannot be placed
outsite of the scrolling region, and the position is relative to the
scrolling region.


As an extension, the argument can be preceded by >?, which moves the cursor
to an absolute position ignoring the scroll region.


The roles between the modified and unmodified version of this sequence are
interchanged in the VT-220 mode; the unmodified version moves the cursor to
an absolute position, the modified to a position relative to the scrolling
region. This default can be again overridden and reversed by the sequence
@{"CSI ?6h" link Csi_lh} which selects the VT-220 "origin mode".

@ENDNODE
@NODE Csi_lf "CSI n;n f"
@TOC CsiList
@{B}CSI n;n f@{UB}      :(C)(V)


Move cursor to the specified row and column. n counts from one up (ugly, but
true). Usually like @{"CSI n;n H" link Csi_uh}, but the details are again a
bit tricky.


In the @{"Commodore mode" link CsiEsc}, CSI n;n f can be used to place the
cursor outside of the scrolling region, which is impossible with the former
sequence.


In the @{"VT-220 mode" link CsiEsc} the position is clipped to the scrolling
region unless the origin mode CSI ?6h is active.

@ENDNODE
@NODE Csi_lg "CSI n g"
@TOC CsiList
@{B}CSI n g@{UB}        :(2)


Tab control, details depend on n:


@{B}n=0@{UB}    :(2)    (default) Clear the TAB stop under the cursor.

@{B}n=3@{UB}    :(2)    Clear all TAB stops.

@{B}n=100@{UB}  :(S)    Reset TAB stops to default.


@ENDNODE
@NODE Csi_lh "CSI n h"
@TOC CsiList
@{B}CSI n h@{UB}        :(C)(2)(V)(D)


Set mode control flag or flags. Similarly to @{"CSI n l" link Csi_lh},
@{"CSI n v" link Csi_lv}, and @{"CSI n w" link Csi_lw}, more than one flag
is allowed here at a time, separate the flags you want to set by a
semicolon ";".


Here the list of legal (known) values. The default is printed in brackets,
but for some mode flags, you may change the default with the
@{"SetVNC program" link SetVncToc} as well. Just follow the links to find
out how the flag is called and select there "Contents" from the line of the
gadgets above to go to the online help of
the @{"SetVNC page" link SetVNCGui} that controls the flag.


@{B}>?30 @{UB}  :[l](V) @{"XTerm/CON: cursor mode" link Fl_XTERMCURSOR}.

If this mode is enabled, the cursor won't move when you mark blocks or use
the scrollers at the edges of the window. Instead, the window will "pop
back" to the original position whenever you type a key or something gets
printed. This is the way how XTerm behaves; the cursor can still be moved
explicitly.


@{B}>?29 @{UB}  :[l](V) Special key parsing disable.

If set, some keyboard functions of ViNCEd are disabled: History, Break
(Ctrl-C thru CTRL-F), Stop (CTRL-S), all TAB expansion functions. Function
keys, Quit and "Send Inputs" remain intact. This is useful for writing an
editor, where you might even want to send CSI >?28h as well.


@{B}>?28 @{UB}  :[l](V) Send disable.

If set, even the "Send Inputs" function is no longer available, together
with "Quit". The close-gadget, however, remains operational. Do not send
this to a shell or you're lost!


@{B}>?27 @{UB}  :[l](V) User block control.

Block operations are not executed, but send as CSI-sequences to the input
stream; they must be handled by the serving program itself by calling the
vnc.library. See @{"below" link ReceiveCsi} for special codes you may
receive.


@{B}>?26 @{UB}  :[h](V) Raw control. The break keys Ctrl-C to Ctrl-F and the
job control key Ctrl-Z, as well as "Xon" Ctrl-Q and "Xoff" Ctrl-S are
disabled in RAW-mode; their ASCII code is just send to the input stream.

If this flag is set to "l", the functions are "executed" by ViNCEd, if set
to "h", they are passed to the console output = the program input stream.
This flag is ignored in @{"cooked mode" link ConsoleModes}.

Due to a strange "feature" of the RAW: handler, ^C thru ^F are always
executed AND sent, even if this flag is "h". I don't know what this is
supposed to be good for, but VNC emulates this behaviour in the CBM
compatibility mode. This feature can be turned off either with CSI >?23l or
by enabling the VT-220 emulation.

(Replaces somehow the missing ioctl() call of unix)


@{B}>?25 @{UB}  :[h](V) @{"AutoPaste" link Fl_AutoPaste}.

If set, ViNCEd automatically loads a block from the clipboard if the user
wants to paste text into the window. If disabled, a
@{"request" link RECEIVECSI} is send to the input stream.

However, marking and copying of text works as usual.


@{B}>?24 @{UB}  :[l](V) @{"Erasing BS" link Fl_DOSERASE}.

If set, the control code BS=08 erases characters and does not only move the
cursor. Additionally, the control code DEL=7F (127 decimal) works like the
keyboard Del-key: It erases forwards and is no longer interpreted as a
printable character.


@{B}>?23 @{UB}  :[h](V) "RAW break bug emulation".

If set, the break  functions ^C thru ^F are always executed, regardless of
whether the CSI >?26 flag is set or not. In worst case (and that is what the
flag defaults say), the break keys send an ASCII value @{B}AND@{UB} generate
a break signal. This workaround can be disabled either by turning on the
VT-220 emulation, or by setting this flag to "l".


@{B}>?21 @{UB}  :[l](V) @{"Bottom adjust" link Fl_SCROLLTOBOTTOM}.

In turned on, keep the last line of the window adjusted to the bottom of the
window if the window gets resized. This is the behavour of the old CON:
window. If disabled, ViNCEd will use its default procedure, i.e. to insert
blank lines or lines from the lower buffer.


@{B}>?19 @{UB}  :[h](V) @{"Wide window" link Fl_SMALLDISPLAY}.

Do not wordwrap at the right border of the window, but scroll. ViNCEd does
not reformat the text in case the window gets resized.


@{B}>?18 @{UB}  :[h](V) @{"Follow print" link Fl_NOPRINTSCROLL}.

Follow the cursor while printing by scrolling the window to make it visible.


@{B}>?16 @{UB}  :[l](V) AutoIndent.

After a "Send Inputs" or a "Split" @{"function" link KeyFunction}, place the
cursor under the first non-space of the line above. Useful for editors,
useless for the shell; do not set it.


@{B}>?15 @{UB}  :[l](V) SevenBitReports.

If enabled, ViNCEd will report all keyboard sequences and all answer back
sequences as if the seven bit mode has been enabled. This might help some
VT-xxx terminals to get the cursor keys right. To be precise, this is a
workaround against a bug in some "termcap" libraries since ESC [ and CSI
should be considered to be identically. Unfortunately, they are not.


@{B}>?14 @{UB}  :[l](V) @{"Extended bold" link Fl_BOLDEXTCOLORS}.

If this bit is set, ViNCEd uses the extended pens 8-15 for characters which
would usually appear in boldface. Pen 0 is mapped to pen 8 and so on. The
bold attribute controls the mapping of the foreground color, the blinking
attribute that of the background color.


@{B}>?13 @{UB}  :[h](V) @{"Buffer scrolling" link Fl_SHORTSCREENINSERT}.

If disabled, ViNCEd does not scroll lines into the lower
@{"display buffer" link Buffers} in case blank lines are inserted into the
window. If lines get removed, only blank lines are inserted into the window
if this flag is disabled and the lines below the bottom edge of the window
remain untouched.


@{B}>?12 @{UB}  :[l](V) @{"Shell mode" link Fl_SHELLMODE}.

If set, @{"TAB-expansion" link TabExpand} and @{"job control" link JobCtrl}
(Ctrl-Z) are enabled, as well as some other
@{"shell goodies" link ShellMode}.


@{B}>?11 @{UB}  :[l](V) Emacs mode.

This flag is only used in @{"RAW or ENGLISH" link ConsoleModes} mode. If it
is set, the @{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} and
@{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} keys will work
slightly different. If an alphanumeric key is pressed along with
@{FG Background}@{BG Text}Alt@{FG Text}@{BG Background}, ViNCEd will
transmit an ESC character, ASCII 27 = 0x1b along with the key. That is,
@{FG Background}@{BG Text}Alt a@{FG Text}@{BG Background} becomes the two
character sequence "ESC a". This sequence is interpreted by the Un*x editor
"Emacs" as "Meta a" command sequence. Furthermore,
@{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} and an alphanumeric
key is translated to the ASCII code of the key modulo 32, ignoring whatever
the keyboard would have defined for this sequence. This will enable
sequences like @{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background}
 @{FG Background}@{BG Text}Space@{FG Text}@{BG Background} which cannot be
reached on a standard keymap.


@{B}>?10 @{UB}  :[l](V) Edit buffer.

If set, the size of the @{"review buffer" link Buffers} is unlimited (well,
except by memory).


@{B}>?8 @{UB}   :[l](V) @{"ANSI coloring" link Fl_ANSIMODE}.

If set, the "set render" sequence CSI m is interpreted strictly and ViNCEd
will try to select colors that fit the ANSI standard as close as possible.
Details how to change these colors and what can be done with this mode are
in a @{"separate section" link AnsiColors}.

Changing this flag results also in a reset of the rendering colors.


@{B}>?6  @{UB}  :[l](V) @{"Blinking cursor" link Fl_Blinking}.

Enables the blinking cursor.


@{B}>?4  @{UB}  :[l](V) @{"Underscore cursor" link Fl_Underline}.

Use an underscore cursor instead of the block cursor.


@{B}>?3  @{UB}  :[l](V) Row mode.

If set, the user is not allowed to leave the current line, and ViNCEd is
turned into a pure and very strict line editor. Even the "Send"
@{"function" link KeyFunction} DOES NOT leave the current line, unlike what
you and the shell expects. This mode is reserved for filling out "forms" and
is not useful for the shell; @{B}Beware!@{UB}.


@{B}>?2  @{UB}  :[l](V) @{"VT-220 mode" link Fl_VTMODE}.

If set, ViNCEd interprets control sequences according to the VT-220 standard
and not compatible to the original console. This affects mostly the handling
of the scroll region and the interpretation of the cursor placement
sequences CSI H,CSI f, CSI S,CSI T, as well as some other minor
interpretational differences.


@{B}?1002@{UB}  :[l](X)(V) @{"XTerm 2 Mouse Tracking" link MouseTrack}


@{B}?1000@{UB}  :[l](X) @{"XTerm Mouse Tracking" link MouseTrack}


@{B}?47  @{UB}  :[l](2) Use alternate screen buffer.

If enabled, this sequence exchanges the contents of the current display
buffer with the contents of a second background buffer. The background
buffer is @{"Owner" link Owners} dependent, therefore each owner may build
its own "screen". This sequence does not set rendering options or the cursor
position.


@{B}?46  @{UB}  :[l](2)(D) Enable logging.

If enabled, ViNCEd logs all outputs to the serial port. All printed data is
sent over the serial port at 9600 baud, 8 bits, one stop bit. Alterantively,
this data can be logged by using a debugging tool like "Sashimi" or "Sushi".
Input data from the user is not logged, though. Should be used with care
for debugging purposes only since it may slow down ViNCEd a lot, especially
if Sashimi is not used.


@{B}?25  @{UB}  :[h](2)(D) Display cursor.

If disabled, the cursor is invisible.


@{B}?9   @{UB}  :[l](X) @{"X10 Mouse Tracking" link MouseTrack}


@{B}?7   @{UB}  :[h](C)(D) Wordwrap.

If disabled, the text is not broken at the chosen border, but the additional
characters are lost.


@{B}?6   @{UB}  :[l](2) Origin mode.

If enabled, the CSI H sequence will place the cursor relative to the scroll
region in the VT-220 emulation. Ignored in the CBM mode.


@{B}?5   @{UB}  :[h](2)(D) @{"Reverse video" link Fl_ANSIREVERSE}.

Works only with the @{"ANSI coloring" link ANSICOLORS} enabled as well.
Reverse video will swap the ANSI black and white colors so that the default
is black text on white background. The meaning of the ANSI color pens 0 and
7 is interchanged, but all other colors remain the same.


@{B}?1   @{UB}  :[l](2)(D) @{"Numpad mode" link Fl_NUMPADMODE}.

Use the numeric keypad for cursor control functions.


@{B}20   @{UB}  :[h](C) Auto CR.

If set, the @{"line feed control code" link CTRLLIST} 0A (=10 decimal)
includes the implicit execution of CR, i.e. moves the cursor to the left,
too.


@{B}4    @{UB}  :[l](2) @{"Insert mode" link Fl_DOSINSERT}.

If set, printing inserts instead of overwrites. Does not change the handling
of user input.


@{B}2    @{UB}  :[l](2) Keyboard lock.

If enabled, the keyboard is locked and no inputs are accepted. Do not send
this to the shell or you're lost!


@{B}>1   @{UB}  :[h](C) Scroll lock.

If cleared, scrolling is forbidden.


@{"Mouse tracking" link MouseTrack} related "CSI h" / "CSI l" sequences are
listed in the @{"Sequences that return results" link SendBackCSI} chapter.


@ENDNODE
@NODE Csi_ll "CSI n l"
@TOC CsiList
@{B}CSI n l@{UB}        :(C)(2)(V)(D)


Clear mode control flag or flags. Similarly to @{"CSI n h" link Csi_lh},
@{"CSI n v" link Csi_lv}, and @{"CSI n w" link Csi_lw}, more than one flag
is allowed here at a time, separate the flags you want to set by a
semicolon ";".


The complete list of all available modes is in the documentation of the
@{"CSI h" link Csi_lh} sequence.

@ENDNODE
@NODE Csi_lm "CSI n m"
@TOC CsiList
@{B}CSI n m@{UB}        :(C)(V)


Rendering control. More than one option can be given, separate them by ";".
The restriction to ">" arguments as for the console device does not hold for
ViNCEd, ">n" style arguments may go anywhere.


@{B}n=0@{UB}    :(C)    Plain text, default color.


@{B}n=1@{UB}    :(C)    Enable bold.


@{B}n=2@{UB}    :(C)    Faint (secondary color, usually white)


@{B}n=4@{UB}    :(C)    Enable underline.


@{B}n=5@{UB}    :(2)    Enable blinking.

This version of ViNCEd does not support blinking text, it just sets the text
in bold, like XTerm. This attribute makes a difference in case the mode
@{"CSI >?14h" link Csi_lh} "Extended bold" is set, and selects the extended
colors for the character container box.


@{B}n=7@{UB}    :(C)    Reversed (exchange character/cell colors).

@{B}n=8@{UB}    :(C)    Concealed text.

This is invisible text for passwords, etc. However, the text will be still
visible in files saved with the @{"Project Menu" link ProjectMenu}.
Therefore, this mode is not really 100% safe.


@{B}n=20@{UB}   :(V)    Plain text, default color.


@{B}n=21@{UB}   :(S)    Disable bold.


@{B}n=22@{UB}   :(C)    Default foreground color, disable bold.


@{B}n=23@{UB}   :(C)    Disable italic.


@{B}n=24@{UB}   :(C)    Disable underline.


@{B}n=25@{UB}   :(2)    Disable blinking.


@{B}n=27@{UB}   :(C)    Disable reverse.


@{B}n=28@{UB}   :(C)    Concealed off.


@{B}n=30..37@{UB}:(C)   Set foreground color to 0..7.

This is either an absolute pen value, or selects an
@{"ANSI colors" link ANSICOLORS}, depending whether the ANSI coloring
is active. Same goes for all color selection sequences below.


@{B}n=38@{UB}   :(V)    Set foreground color to 8


@{B}n=39@{UB}   :(C)    Reset forground color

Reset foreground color to default or to the value saved with
@{"CSI SPC s" link Csi_ls}.


@{B}n=51@{UB}   :(V)    Select User input

Special in the sense that this is ignored by ViNCEd itself, but used by
SetVNC for buffer outputs written with the @{"PUT argument" link Ca_PUT}.
This sequence selects user input text.


@{B}n=59..65@{UB}:(V)   Set foreground color to 9..15

The current ViNCEd version can control up to 16 colors, but not more. Colors
8 to 15 are the "extended" colors. This is either an absolute pen number or
an ANSI color index.


@{B}n=40..47@{UB}:(C)   Set background color to 0..7


@{B}n=38@{UB}   :(V)    Set background color to 8


@{B}n=39@{UB}   :(C)    Reset background color

Reset background color to default or to the value saved with CSI SPC s.



@{B}n=71@{UB}   :(V)    Select DOS output.

Again a private SetVNC sequence. Selects printed text in saved buffers.


@{B}n=79..85@{UB}:(V)   Set background color to 9..15


@{B}n=90..97@{UB}:(X)   Set foreground color to 8..15


@{B}n=100..107@{UB}:(X) Set background color to 8..15



@{B}REMARK@{UB}: If you activated the
@{"ANSI rendering scheme" link ANSICOLORS} with the CSI >?8h
sequence, the arguments to CSI m to not specify a pen number (as with CON:),
but a predefined ANSI color.


More rendering-options:


@{B}>n@{UB}     :(C)    Set fill color.

Selects the background (fill) pen as n, n=0..15. Unlike the clumsy
console.device, this might appear anywhere in the control string.


@{B}?n@{UB}     :(V)    Set input rendering.


All values of n presented above are valid, but change only the appearance
of the user input; the style of printed characters remains intact.


@{B}REMARK@{UB}: As a special hack, if no argument is given at all, the text
rendering is reset to the defaults. DO NOT DEPEND ON THIS WORKING IN NEWER
RELEASES, this is a compatibility hack.

@ENDNODE
@NODE Csi_ln "CSI n n"
@TOC CsiList
@{B}CSI n n@{UB}        :(C)(V)


Request parameters. The second n is a literal n, not a number.


@{B}CSI 6 n@{UB}        :(C)

Send cursor position, relative to scroll region if in Commodore mode,
absolute in VT-220 mode.


@{B}CSI >?0 n@{UB}      :(V)

Send cursor position, but unlike CSI 6n it is send as a string that can be
send back to ViNCEd to restore the cursor position later. It is relative to
the scroll region in Commodore mode, absolute in VT-220 mode if the "origin
mode" is disabled.


@{B}CSI >?1 n@{UB}      :(V)

Send absolute cursor position. Leads to @{"CSI n;n f" link Csi_lf} in
Commodore mode, @{"CSI n;n H" link Csi_uh} in VT-220 mode.


@{B}CSI >?2 n@{UB}      :(V)

Send relative cursor position (relative to scroll region), leads to
@{"CSI n;n H" link Csi_uh} in Commodore mode, to
@{"CSI n;n f" link Csi_lf} to VT-220 mode.


@{B}CSI >?3 n@{UB}      :(V)

Send ViNCEd version string. Leads to CSI version;revision V


@{B}CSI >?4 n@{UB}      :(V)

Send mode flags. Sends "ESC [" and a sequence of mode flags (xxx h, xxx l)
that describe their current settings.



The next sequences are replacement sequences for the XTerm sequence
@{B}CSI t@{UB} which conflicts with the similar CBM sequence.


@{B}CSI >?12 n@{UB}     :(V)    or, equivalently,

@{B}CSI >?14 n@{UB}     :(V)    or, even more,

@{B}CSI >?16 n@{UB}     :(V)

Send window title as "ESC ] l Title ESC \\" @{"OSC sequence" link OscList}.


@{B}CSI >?13 n@{UB}     :(V)

Send icon title as "ESC ] L Title ESC \\" @{"OSC sequence" link OscList}.
The result string is empty in case the icon title defaults to the window
title.


@{B}CSI >?15 n@{UB}     :(V)

Send screen title as "ESC ] S Title ESC\\" @{"OSC sequence" link OscList}.
Note that you may get and set the screen title, but the window must have
been opened with a screen title to make it appear.


@{B}CSI >?62 n@{UB}     :(V)

Send window font as "ESC ] F Font.Size ESC\\"
@{"OSC sequence" link OscList}. The suffix ".font" will be replaced by this
query sequence by the font height as decimal encoded number.


You currently cannot query the console keymap because the name of the
default keymap is not available in the AmigaOs keyboard system. Keymaps
can be set, only.


@{B}CSI 5n@{UB}         :(2)

Terminal status request. Answered by CSI " 0 n ("terminal is fine").


@{B}CSI ?15n@{UB}       :(2)(D)

Printer status request. Answered by CSI ?11 n ("printer not ready").


@{B}CSI ?25n@{UB}       :(2)(D)

Keyboard status report. Answered by CSI ?21 n ("User definable keys are
locked")


@{B}CSI ?26n@{UB}       :(2)(D)

Keymap status request. Answered by CSI ?27 ; 0 n ("Keyboard language
unknown")

@ENDNODE
@NODE Csi_lp "CSI n p"
@TOC CsiList
@{B}CSI n p@{UB}        :(C)(2)


Set parameters. Details depend on "n":


@{B}CSI "n;m p@{UB}    :(2)     Set ANSI conformance level.


n selects the conformance level.

@{B}n = 61@{UB}                 VT100

@{B}n = 62@{UB}                 VT200

@{B}n = 63@{UB}                 VT300


ViNCEd currently ignores the ANSI conformance level.


m selects the bit width. If m is not present, the default 1 is assumed and
the seven bit mode is enabled.


@{B}n = 0@{UB}  :       8 bit mode

@{B}m = 1@{UB}  :       7 bit mode (8th bit set to zero) (default)

@{B}n = 2@{UB}  :       8 bit mode



Other variations of this control sequence:


@{B}CSI !p@{UB}         :(2)    Like @{"ESC c" link Esc_lc}, full reset.


@{B}CSI n p@{UB}        :(C)    Cursor control, details depend on n.


@{B}n=0@{UB}    :       Disable cursor

Everything else, including no argument at all: Enable cursor.


@ENDNODE
@NODE Csi_lq "CSI n q"
@TOC CsiList
@{B}CSI n q@{UB}        :(C)(2)


Enquiry parameters. Details depend on "n":


@{B}CSI 0 SPC q@{UB}    :(C)

Send window borders, compatible to CON: (SPC is the blank space 0x20 = 32).


@{B}CSI SPC q@{UB}      :(C)

Like CSI 0 q, but a hack to make the csh working. You @{B}SHOULD NOT DEPEND ON
THIS SEQUENCE@{UB}, it will be removed sometimes.


@{B}CSI >?0 q@{UB}      :(V)

Send window borders, together with the scroll region.


@{B}CSI >?1 q@{UB}      :(V)

Send maximal printable domain.


@{B}CSI >?2 q@{UB}      :(V)

Send window domain.


@{B}CSI >?3 q@{UB}      :(V)

Send window domain without scroll borders.

@ENDNODE
@NODE Csi_lr "CSI n;n r"
@TOC CsiList
@{B}CSI n;n r@{UB}      :(2)


Set scroll region.


This sets the size of the scroll region. All lines above and below this
region are not scrolled, thus, kept where they are. The first argument is
the first line of the scroll region, "1" being the topmost line. The second
argument is the last line of the scroll region. At least two lines must be
in the region or it gets disabled. If the VT-220 mode is enabled, the cursor
gets set to the left top edge of the window, or to the first line of the
scroll region if the "origin mode" @{"CSI ?6h" link Csi_lh} is active.

@ENDNODE
@NODE Csi_ls "CSI SPC s"
@TOC CsiList
@{B}CSI SPC s@{UB}      :(C)


Set default rendering (SPC is the blank space, ASCII 32=0x20).


Sending this sequence sets the rendering type and color defaults to the
currently active pens and draw style. This default can be restored later by
@{"CSI 0 m" link Csi_lm}, @{"CSI 29 m" link Csi_lm} or
@{"CSI 39 m" link Csi_lm}. However, the defaults get lost on a full reset
@{"ESC c" link Esc_lc} and are then re-read from the DrawInfo of the screen
ViNCEd displays its window on. If you enabled the
@{"ANSI coloring" link ANSICOLORS}, the default is white text on black
background, as defined by the ANSI standard, unless the reverse video mode
@{"CSI ?5h" link Csi_lh} is active.

@ENDNODE
@NODE Csi_lt "CSI n t"
@TOC CsiList
@{B}CSI n t@{UB}        :(C)


Set page length to n lines.


The remaining part of the window can be used for drawing graphics on
yourself and is not touched by ViNCEd. It is, too, @{B}not refreshed@{UB} on
a resize, that's up to the program drawing in the border.


If the parameter is ommitted, ViNCEd restores the default behaivour and
uses the full height for rendering.


This sequence conflicts unfortunately with a similar XTerm sequence.

@ENDNODE
@NODE Csi_lu "CSI n u"
@TOC CsiList
@{B}CSI n u@{UB}        :(C)


Set line length to n characters.


The remaining part of the window won't be touched by ViNCEd and can be used
to display graphics.


If the parameter is ommitted, ViNCEd restores the default behaivour and
uses the full width for rendering.

@ENDNODE
@NODE Csi_lv "CSI n v"
@TOC CsiList
@{B}CSI n v@{UB}        :(V)


Saveback modes. Saves back one or more of the mode control bits that can be
set with @{"CSI n h" link Csi_lh} and cleared with @{"CSI n l" link Csi_ll}.

For the allowed values of n, see there.


This is sort of DEC control sequence that conflicts with another sequence
and is therefore here.

@ENDNODE
@NODE Csi_lw "CSI n w"
@TOC CsiList
@{B}CSI n w@{UB}        :(V)


Restore modes. Restores one or more of the mode control bits usually set by
@{"CSI n h" link Csi_lh} or @{"CSI n l" link Csi_ll}. See there for more
information.


This is sort of DEC that conflicts with with another sequence at the
same position.


Unfortunately, this sequence conflicts with the DEC "Enable Filter
Rectangle" sequence.

@ENDNODE
@NODE Csi_lx "CSI n x"
@TOC CsiList
@{B}CSI n x@{UB}        :(C)


Set left offset to n pixels.


The area left to this boundary is not touched by ViNCEd and can be used to
draw graphics.


If the parameter is ommitted, ViNCEd restores the default behaivour and
sets the left according to the window border.

@ENDNODE
@NODE Csi_ly "CSI n y"
@TOC CsiList
@{B}CSI n y@{UB}        :(C)


Set top offset to n pixels.


The area on top of this boundary is not touched by ViNCEd and
can be used to render graphics.


If the parameter is ommitted, ViNCEd restores the default behaivour and
sets the top offset according to the window border.

@ENDNODE
@NODE Csi_Bra "CSI n {"
@TOC CsiList
@{B}CSI n {@{UB}        :(C)


Set Raw Events.


n is a semicolon separated list of input events that should be send to the
input stream.


Unlike with CON:, this works in all @{"console modes" link ConsoleModes},
even in cooked mode, but if in raw mode, all selected events will be
disabled when switching back to cooked mode. This is again a compatibility
hack, to make old programs working. As a second hack, the window-close input
event is always active when switching to raw mode, even if you haven't
requested it. This was done to make the program "more" working (sigh). If
you do not want to receive the window-close event in raw mode, you must
explicitly turn it off.


A third special event is the timing event: while this event never worked in
CON: windows (try it !), it works in ViNCEd. Since your input stream will be
trashed with a lot of timing events otherwise, this event gets disabled as
soon as you receive a timing event. You have to re-activate it again, each
time. The following events are supported:


@{B}n = 2@{UB}  :       Raw mouse input

@{B}n = 3@{UB}  :       Private console event   (do not use)

@{B}n = 4@{UB}  :       Pointer position event

@{B}n = 6@{UB}  :       Timer event             (works, see above)

@{B}n = 7@{UB}  :       Gadget down

@{B}n = 8@{UB}  :       Gadget up

@{B}n = 9@{UB}  :       Requester activity

@{B}n = 10@{UB} :       Menu pick

@{B}n = 11@{UB} :       Window close

@{B}n = 12@{UB} :       Window resized

@{B}n = 13@{UB} :       Window requires refresh

@{B}n = 14@{UB} :       Preferences changed

@{B}n = 15@{UB} :       Disk removed

@{B}n = 16@{UB} :       Disk inserted

@{B}n = 17@{UB} :       Window activated

@{B}n = 18@{UB} :       Window inactivated

@{B}n = 19@{UB} :       New pointer position    (v36)

@{B}n = 20@{UB} :       Menu help               (v36)

@{B}n = 21@{UB} :       Window box changed      (v36)


For more about the input events, consult the
@{"RKRM-Devices" link References} and check the list of
@{"answer back sequences" link ReceiveCSI} to find out which type of input
you receive.

@ENDNODE
@NODE Csi_Ket "CSI n }"
@TOC CsiList
@{B}CSI n }@{UB}        :(C)


Reset Raw Events.


n is a semicolon separated list of input events that should be disabled
again that have been activated with @{"Csi n {" link Csi_Bra}.

@ENDNODE

@REMARK Unsupported CSI sequences
@NODE CsiU_ut "CSI n T"
@TOC UnCsiList
@{B}CSI n T@{UB}        :(X)


Mouse tracking control. Conflicts with the Commodore scrolling command.

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lb "CSI n b"
@TOC UnCsiList
@{B}CSI n b@{UB}        :(2)


Repeat the preceding graphic character Ps times.

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lh "CSI n h"
@TOC UnCsiList
@{B}CSI n h@{UB}        :(2)


Various @{B}unsupported@{UB} mode flags for @{"CSI h" link Csi_lh}:



@{B}n=6@{UB}    :(S)    Lock scroll buffer

@{B}n=9@{UB}    :(S)    Visual bell.
This is controlled by the sound preferences.


@{B}n=12@{UB}   :(S)    Overlay mode or duplex control.

@{B}n=?2@{UB}   :(D)    USA characters for G0-G3 set, or VT-52

@{B}n=?3@{UB}   :(D)    132 rows mode.
Depends on the size of the window, not under control of ViNCEd.


@{B}n=?4@{UB}   :(D)    Smooth scrolling.

@{B}n=?8@{UB}   :(D)    Auto repeat.
Under control of the preferences.


@{B}n=?18@{UB}  :(D)    Send FF after printing.

@{B}n=?19@{UB}  :(D)    Print full screen/scroll region.

@{B}n=?38@{UB}  :(D)    Tektronix mode. Unsupported by ViNCEd.

@{B}n=?40@{UB}  :(D)    Allow 80/132 width switching.

@{B}n=?41@{UB}  :(D)    Curses Fix.
This is Amiga, not Unix. Should be part of ixemul, not of ViNCEd.


@{B}n=?42@{UB}  :(D)    Enable national character set.
Not under control of ViNCEd.


@{B}n=?44@{UB}  :(D)    Ring bell on window border.

@{B}n=?45@{UB}  :(D)    Reverse Wraparound.

@{B}n=?66@{UB}  :(D)    Application keypad.

@{B}n=?67@{UB}  :(D)    Backarrow key sends delete.

@{B}n=?1001@{UB}:(X)    Hilite mouse tracking.

@{B}n=?1003@{UB}:(X)    Use All Motion Mouse Tracking.

@{B}n=?1010@{UB}:(X)    Scroll to bottom on tty output.
Currently not under application control.


@{B}n=?1011@{UB}:(X)    Scroll to bottom on key press.
Currently not under application control.


@{B}n=?1035@{UB}:(X)    Enable special modifiers for Alt and NumLock keys.

@{B}n=?1036@{UB}:(X)    Send ESC when Meta modifies a key.

@{B}n=?1037@{UB}:(X)    Send DEL from the editing-keypad Delete key.

@{B}n=?1047@{UB}:(X)    Use Alternate Screen Buffer.
Identically to n=?47.


@{B}n=?1048@{UB}:(X)    Save cursor as in @{"ESC 7" link Esc_7}

@{B}n=?1049@{UB}:(X)    Save cursor as in @{"ESC 7" link Esc_7} and
use Alternate Screen Buffer, clearing it first.

@{B}n=?1051@{UB}:(X)    Set Sun function-key mode.

@{B}n=?1052@{UB}:(X)    Set HP function-key mode.

@{B}n=?1060@{UB}:(X)    Set legacy keyboard emulation.

@{B}n=?1061@{UB}:(X)    Set Sun/PC keyboard emulation of VT220.


@ENDNODE
@NODE CsiU_li "CSI n i"
@TOC UnCsiList
@{B}CSI n i@{UB}        :(2)(D)


Media copy. Details depend on n:


@{B}n=0@{UB}    :(2)    Print screen    (default)

@{B}n=4@{UB}    :(2)    Turn off printer controller mode.

@{B}n=5@{UB}    :(2)    Turn on printer ctronller mode.

@{B}n=?1@{UB}   :(D)    Print line containing cursor.

@{B}n=?4@{UB}   :(D)    Turn off autoprint mode.

@{B}n=?5@{UB}   :(D)    Turn on autoprint mode.

@{B}n=?10@{UB}  :(D)    Print composed display.

@{B}n=?11@{UB}  :(D)    Print all pages.


All of them are @{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lm "CSI n m"
@TOC UnCsiList
@{B}CSI n m@{UB}        :(2)


The following special mode flags for the set render sequence are
@{B}unsupported@{UB}:


@{B}n = 100@{UB}        : Set foreground and background color to default


@{B}CSI 38; 5; n m@{UB} : Set background color to n.

@{B}CSI 48; 5; n m@{UB} : Set foreground color to n.

@ENDNODE
@NODE CsiU_ln "CSI n n"
@TOC UnCsiList
@{B}CSI n n@{UB}        :(2)


The second n is a literal lowercase n, with n=100 to 107.
Send RGB color codes of the palette entries 0 to 7. Replaced by something
smarter, see @{"CSI V" link Csi_uv}

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lq "CSI n q"
@TOC UnCsiList
@{B}CSI n q@{UB}        :(2)


LED control. This should be done by audio programs, not by ViNCEd.

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lr "CSI n r"
@TOC UnCsiList
@{B}CSI n r@{UB}        :(D)


DEC restore parameters. Conflicts with ViNCEd / VT-220 "Set Scroll Region",
but functionally replaced by @{"CSI w" link Csi_lw}.

@{B}unsupported@{UB}.


@ENDNODE
@NODE CsiU_ls "CSI n;n s"
@TOC UnCsiList
@{B}CSI n;n s@{UB}      :(D)(V)(C)


Set horizontal scroll region. The selected number of left and right rows
does not get scrolled. This should work someday like a horizontal
counterpart of @{"CSI n;n r" link Csi_lr}, is however quite tricky to
implement.



Also:

DEC save parameters. Conflicts with ViNCEd "Set Scroll Region" above, but
functionally replaced by @{"CSI v" link Csi_lv}.

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lt "CSI n;n;n t"
@TOC UnCsiList
@{B}CSI n;n;n t@{UB}        :(2)


Various window manipulation flags. Conflicts with the CBM set page length
command.

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_lx "CSI n x"
@TOC UnCsiList
@{B}CSI n x@{UB}        :(2)


Request terminal parameters. Conflicts with Commodore's "set left offset".

@{B}unsupported@{UB}.

@ENDNODE
@NODE CsiU_bar "CSI n |"
@TOC UnCsiList
@{B}CSI n |@{UB}        :(D)


Request Locator Position, @{B}unsupported@{UB}.

@ENDNODE


@REMARK Programmer's Guide
@NODE CsiEsc "CSI and ESC sequences"
@TOC ProgToc
ViNCEd recognizes a big bunch of control sequences; mostly introduced by a
CSI (0x9b = 155) or ESC (0x1b = 27) character, these do not only change
ViNCEd's internal settings, but do also move the cursor, scroll the window,
set the color and font of the text and adjust the keyboard.


All control sequences of the original console handler are supported, most
VT-220 and some unix "XTerm" sequences have been added to complete the set,
even some SGI winterm sequences are present. 


The explanation of some concepts, used in the description of the sequences
follow:


@{B}Commodore Mode@{UB}:

This is the ViNCEd operating mode which offers most compatibility to the
original console handler. ViNCEd interprets all control sequences in the
same way as the original handler, even if they contradict the VT-xxx
standards. This is the mode ViNCEd should operate in if used as window
handler for the shell, to avoid compatibility problems with existing
programs. Even in this mode, ViNCEd extensions are available.



@{B}VT-220 Mode@{UB}

This is the ViNCEd extended mode which interprets the control sequences in a
way compatible to the VT-220 standard. It is a quite complete, but not a
full VT-220 emulation. ViNCEd does not implement VT-220 sequences that
conflict with the standards of the operating system, i.e. ViNCEd does not
implement download-able character sets, neither user definable keymaps
except thru the @{"SetVNC" link SetVNCToc} program interface, nor does it
come with a build-in VT-52 emulation which I regard as rather useless.
However, it implements some useful extensions to the VT-220 standard found
in the unix XTerm and SGI "winterm" programs, as definable window titles,
selectable fonts and definable colors - all thru documented control
sequences.



@{B}Scroll Region@{UB}:

While ViNCEd scrolls usually the complete window contents, it is possible to
separate several lines at the top and at the bottom of the window that are
not scrolled. You might want to put there some global information, like the
cursor position, the date, and so on, if writing an editor. The way how
these lines interact with the control codes is again controlled by mode
flags.


The commodore mode makes these lines "invisible" to the usual control
codes. However, this is not compatible with the VT-220 definition of some
control sequences and the behavour changes in this mode.



@{B}Origin Mode@{UB}:

The cursor movement instructions are relative to the scrolling region in the
commodore mode, i.e. the origin of the display is at the top left edge of
the scrolling region. This is usually not the case in the VT-220 emulation
except the @{B}Origin Mode@{UB} is enabled, a standard VT-220 flag.



@{B}8 Bit Mode vs. 7 Bit Mode@{UB}:

Usually, the Amiga uses eight bit wide characters. However, for some
terminal purposes the eighth bit is used as a parity bit and should be
ignored for that reason. To reach all ASCII-codes, use in the seven bit mode
the ShiftIn and ShiftOut control codes (0x0E,0x0F) and substitute the
control sequence introducer CSI 0x9B (155 decimal) by the sequence ESC [.
Additionally, this substitution is also made by ViNCEd: All answer back
control codes that usually come with CSI are now send with ESC [ instead.
Your parser code should be smart enough to handle this substitution, too.



@{B}Origin of the control sequences@{UB}:


The origin of the control sequences is indicated by a character in brackets
behind the description:


@{CODE}
(C)=Commodore or standard TTY   (2)=VT-220 enhancements added to ViNCEd
(X)=Unix XTerm                  (S)=SGI winTerm
(V)=ViNCEd                      (D)=Digital
@{BODY}


And now for the list of the control sequences:


@{"List of control characters                                       " link CtrlList }

Standard TTY control characters in the range 0x00 to 0x1F, including VT-220
shortcuts in the range 0x80 to 0x9f.


@{"List of unsupported control characters                           " link UnCtrlList }

Control characters not supported by ViNCEd.


@{"List of ESC sequences                                            " link EscList }

Control sequences introduced by ESC 0x1B, including XTerm sequences.


@{"List of unsupported ESC sequences                                " link UnEscList }

ESC sequences not supported by ViNCEd.


@{"List of OSC sequences                                            " link OscList }

Control sequences introduced by OSC 0x9D or ESC ]


@{"List of unsupported OSC sequences                                " link UnOscList }

OSC sequences not supported by ViNCEd.


@{"List of CSI sequences                                            " link CsiList }

Control sequences introduced by CSI 0x9B or ESC [


@{"List of CSI sequences that return results                        " link SendBackCsi }

CSI sequences that answer back with another sequence.


@{"List of unsupported CSI sequences                                " link UnCsiList }

CSI sequences not supported by ViNCEd.


@{"List of sequences you might receive                              " link ReceiveCsi }

The list of answer back sequences you may find in the input stream.


@{"List of control sequences the keyboard parser sends and receives " link KeyboardList }

CSI sequences that are sent by the @{"keyboard functions" link KeyFunction}.


@{"Mouse Tracking Information                                       " link MouseTrack}

ESC sequences and details of the ViNCEd mouse tracking function.


@ENDNODE
@NODE CtrlList "List of control characters"
@TOC ProgToc
Here is the list of control codes - all codes are given in hex notation:


First the control characters in the C0 set:

@{CODE}

@{"05   ENQ                                             " link Ctl_ENQ}
@{"07   BEL                                             " link Ctl_BEL}
@{"08   BS                                              " link Ctl_BS}
@{"09   HT                                              " link Ctl_HT}
@{"0A   LF                                              " link Ctl_LF}
@{"0B   VT                                              " link Ctl_VT}
@{"0C   FF                                              " link Ctl_FF}
@{"0D   CR                                              " link Ctl_CR}
@{"0E   SI                                              " link Ctl_SI}
@{"0F   SO                                              " link Ctl_SO}
@{"1B   ESC                                             " link Ctl_ESC}
@{"7F   DEL                                             " link Ctl_DEL}

@{BODY}

The control characters C1 in the range 0x80 to 0x9f are convenient shortcuts
for more complex sequences:

@{CODE}
@{"84   IND                                             " link Ctl_IND}
@{"85   NL                                              " link Ctl_NL}
@{"88   HST                                             " link Ctl_HST}
@{"8D   RI                                              " link Ctl_RI}
@{"9A   DECID                                           " link Ctl_DECID}
@{"9B   CSI                                             " link Ctl_CSI}
@{"9C   ST                                              " link Ctl_ST}
@{"9D   OSC                                             " link Ctl_OSC}
@{BODY}

@ENDNODE
@NODE UnCtrlList "Unsupported control characters"
@TOC ProgToc
The following non-printing characters are known by ViNCEd, but will be
currently ignored:

@{CODE}
@{"8E   SS2                                             " link Ctl_SS2}
@{"8F   SS3                                             " link Ctl_SS3}
@{"90   DCS                                             " link Ctl_DCS}
@{"96   SPA                                             " link Ctl_SPA}
@{"97   EPA                                             " link Ctl_EPA}
@{"98   SOS                                             " link Ctl_SOS}
@{"9E   PM                                              " link Ctl_PM}
@{"9F   APC                                             " link Ctl_APC}
@{BODY}

@ENDNODE
@NODE EscList "List of ESC sequences"
@TOC ProgToc
And now the list of ESC control sequences. Some of the sequences are long
forms of eight bit control characters @{"in the C1 set" link CtrlList}.

@{"ESC" link Ctl_ESC} is the ASCII-character 0x1B (27 decimal) and SPC is
the blank space 0x20 (32 decimal); "n" is a decimal number.

@{CODE}
@{"ESC 7                                                " link Esc_7}
@{"ESC 8                                                " link Esc_8}
@{"ESC 9                                                " link Esc_9}
@{"ESC D                                                " link Esc_ud}
@{"ESC E                                                " link Esc_ue}
@{"ESC H                                                " link Esc_uh}
@{"ESC M                                                " link Esc_um}
@{"ESC Z                                                " link Esc_uz}
@{"ESC c                                                " link Esc_lc}
@{"ESC [                                                " link Esc_Bra}
@{"ESC \                                                " link Esc_Bsl}
@{"ESC ]                                                " link Esc_Ket}

@{"ESC # 8                                              " link Esc_Num8}

@{"ESC SPC F                                            " link Esc_SPCF}
@{"ESC SPC G                                            " link Esc_SPCG}
@{"ESC SPC L                                            " link Esc_SPCL}
@{"ESC SPC M                                            " link Esc_SPCM}
@{"ESC SPC N                                            " link Esc_SPCN}
@{BODY}

The next ESC sequence is only understood by the CSI parser of the
@{"SetVNC buffer IO module" link Ca_GET}, don't send this to ViNCEd itself:

@{CODE}
@{"ESC @                                                " link Esc_At}
@{BODY}

@ENDNODE
@NODE UnEscList "Unsupported ESC sequences"
@TOC ProgToc
Again, there are some ignored or unknown ESC sequences. The first group
are unsupported seven bit variants of unsupported eight bit sequences:

@{CODE}
@{"ESC P                                                " link Esc_up}
@{"ESC _                                                " link Esc_Under}
@{"ESC ^                                                " link Esc_Hat}
@{"ESC N                                                " link Esc_un}
@{"ESC O                                                " link Esc_uo}
@{"ESC V                                                " link Esc_uv}
@{"ESC W                                                " link Esc_uw}
@{"ESC X                                                " link Esc_ux}
@{BODY}

Some unsupported DEC sequences follow:

@{CODE}
@{"ESC # 3                                              " link Esc_Num3}
@{"ESC # 4                                              " link Esc_Num4}
@{"ESC # 6                                              " link Esc_Num6}
@{BODY}


Some miscellaneous unsupported sequences:

@{CODE}
@{"ESC F                                                " link Esc_uf}
@{"ESC l                                                " link Esc_ll}
@{"ESC m                                                " link Esc_lm}
@{BODY}


The following sequences are part of an international character support. This
should be done by the locale.library together with the correct font, and not
by ViNCEd itself. They are all ignored.

@{CODE}
@{"ESC ( s                                              " link Esc_OpenS}
@{"ESC ) s                                              " link Esc_CloseS}
@{"ESC * s                                              " link Esc_StarS}
@{"ESC + s                                              " link Esc_PlusS}

where "s" is a single character from the following table:

        s = 0           DEC Special Character and Line Drawing Set
        s = A           United Kingdom (UK)
        s = B           United States (USASCII)
        s = 4           Dutch
        s = C or 5      Finnish
        s = R           French
        s = Q           French Canadian
        s = K           German
        C = Y           Italian
        C = E or 6      Norwegian/Danish
        C = Z           Spanish
        C = H or 7      Swedish
        C = =           Swiss

@{"ESC |                                                " link Esc_BarS}
@{"ESC }                                                " link Esc_BraS}
@{"ESC ~                                                " link Esc_TwiddleS}
@{"ESC n                                                " link Esc_ln}
@{"ESC o                                                " link Esc_lo}
@{"ESC <                                                " link Esc_Less}
@{"ESC =                                                " link Esc_Eq}
@{BODY}

@ENDNODE
@NODE OSCList "List of OSC sequences"
@TOC ProgToc
OSC sequences are introduced by "ESC ]" or its eight bit equivalent,
@{"OSC" link Ctl_OSC}. Former ViNCEd guides handled them as "XTerm
sequences" as part of the ESC sequence list.


OSC sequences are terminated by @{"ST (ASCII 0x9C)" link Ctl_ST} or its
seven bit equivalent @{"ESC \ " link ESC_Bsl}, but the Un*x XTerm program
uses @{"BEL (ASCII 0x07)" link Ctl_BEL} instead for traditional reasons.


ViNCEd allows @{"LF" link Ctl_LF} as third (or forth) possible terminator
for convenience.


An OSC sequence takes therefore the form

@{CODE}
@{B}ESC ] n;strg ST@{UB}
@{BODY}

where "ESC ]" can be substituted by "OSC", and "ST" can be substituted by
"BEL", "LF" or its seven bit equivalent "ESC \\".


"n" is a numeric parameter describing the desired function:

@{CODE}
@{"ESC ] 0;strg ST                                      " link Osc_0}
@{"ESC ] 1;strg ST                                      " link Osc_1}
@{"ESC ] 2;strg ST                                      " link Osc_2}
@{"ESC ] 3;strg ST                                      " link Osc_3}
@{"ESC ] 4;strg ST                                      " link Osc_4}
@{"ESC ] 41;strg ST                                     " link Osc_41}
@{"ESC ] 42;strg ST                                     " link Osc_42}
@{"ESC ] 50;strg ST                                     " link Osc_50}
@{BODY}

@ENDNODE
@NODE UnOSCList "Unsupported OSC sequences"
@TOC ProgToc
Not all OSC sequences of the XTerm are supported, mainly because they are
designed for the "X11" graphics system of Unix and not for Amiga Intuition.


@{CODE}
@{"ESC ] 10;strg ST                                     " link Osc_10}
@{"ESC ] 11;strg ST                                     " link Osc_11}
@{"ESC ] 12;strg ST                                     " link Osc_12}
@{"ESC ] 13;strg ST                                     " link Osc_13}
@{"ESC ] 14;strg ST                                     " link Osc_14}
@{"ESC ] 15;strg ST                                     " link Osc_15}
@{"ESC ] 16;strg ST                                     " link Osc_16}
@{"ESC ] 17;strg ST                                     " link Osc_17}
@{"ESC ] 46;strg ST                                     " link Osc_46}
@{BODY}

@ENDNODE
@NODE CsiList "List of CSI sequences"
@TOC ProgToc
The complete set of CSI sequences follow. They are all introduced by the CSI
code 0x9B (=155 decimal), which can be replaced by ESC [. As
above, "n" is again a number which can be dropped and defaults to
one, unless otherwise stated.


The character code of ESC is 0x1B (decimal 27), SPC is again the white
space, 0x20 (decimal 32).

@{CODE}
@{"CSI n @                                              " link Csi_At}
@{"CSI n A                                              " link Csi_ua}
@{"CSI n B                                              " link Csi_ub}
@{"CSI n C                                              " link Csi_uc}
@{"CSI n D                                              " link Csi_ud}
@{"CSI n E                                              " link Csi_ue}
@{"CSI n F                                              " link Csi_uf}
@{"CSI n G                                              " link Csi_ug}
@{"CSI n;n H                                            " link Csi_uh}
@{"CSI n I                                              " link Csi_ui}
@{"CSI n J                                              " link Csi_uj}
@{"CSI n K                                              " link Csi_uk}
@{"CSI n L                                              " link Csi_ul}
@{"CSI n M                                              " link Csi_um}
@{"CSI n P                                              " link Csi_up}
@{"CSI n S                                              " link Csi_us}
@{"CSI n T                                              " link Csi_ut}
@{"CSI reg;r;g;b V                                      " link Csi_uv}
@{"CSI n W                                              " link Csi_uw}
@{"CSI n X                                              " link Csi_ux}
@{"CSI n Y                                              " link Csi_uy}
@{"CSI n Z                                              " link Csi_uz}
@{"CSI n `                                              " link Csi_Apo}
@{"CSI c          and CSI >c                            " link Csi_lc}
@{"CSI n d                                              " link Csi_ld}
@{"CSI n;n f                                            " link Csi_lf}
@{"CSI n g                                              " link Csi_lg}
@{"CSI n h                                              " link Csi_lh}
@{"CSI n l                                              " link Csi_ll}
@{"CSI n m                                              " link Csi_lm}
@{"CSI n n        (various)                             " link Csi_ln}
@{"CSI n p        (various)                             " link Csi_lp}
@{"CSI n q        (various)                             " link Csi_lq}
@{"CSI n;n r                                            " link Csi_lr}
@{"CSI SPC s                                            " link Csi_ls}
@{"CSI n t                                              " link Csi_lt}
@{"CSI n u                                              " link Csi_lu}
@{"CSI n v                                              " link Csi_lv}
@{"CSI n w                                              " link Csi_lw}
@{"CSI n x                                              " link Csi_lx}
@{"CSI n y                                              " link Csi_ly}
@{"CSI n {                                              " link Csi_Bra}
@{"CSI n }                                              " link Csi_Ket}
@{BODY}

@ENDNODE
@NODE SendBackCSI "Sequences that return results"
@TOC ProgToc
Some CSI sequences not only set some parameters, they also send back some
kind of CSI sequence to inform the user of the result. For example, you may
ask ViNCEd to send the current dimension of the window and much more...

The list of the answer back messages can be found in a @{"separate section" link RECEIVECSI}.

@{CODE}

@{"05   ENQ                                             " link Ctl_ENQ}
@{"9A   DECID                                           " link Ctl_DECID}

@{"ESC Z                                                " link Esc_uz}

@{"CSI c          and CSI >c                            " link Csi_lc}
@{"CSI n h                                              " link Csi_lh}
@{"CSI n n        (various)                             " link Csi_ln}
@{"CSI n q        (various)                             " link Csi_lq}
@{"CSI n {                                              " link Csi_Bra}


@{BODY}

@ENDNODE
@NODE UNCSIList "Unsupported CSI sequences"
@TOC ProgToc
Unsupported CSI sequences, partially conflicting with Commodore
sequences, partially depending on 16 bit characters and other stuff I
do not want to implement, or implement fully:

@{CODE}
@{"CSI n T                                              " link CsiU_ut}
@{"CSI n b                                              " link CsiU_lb}
@{"CSI n h                                              " link CsiU_lh}
@{"CSI n i                                              " link CsiU_li}
@{"CSI n n                                              " link CsiU_ln}
@{"CSI n m                                              " link CsiU_lm}
@{"CSI n q                                              " link CsiU_lq}
@{"CSI n r                                              " link CsiU_lr}
@{"CSI n;n s       (various)                            " link CsiU_ls}
@{"CSI n;n;n t                                          " link CsiU_lt}
@{"CSI n x                                              " link CsiU_lx}
@{"CSI n |                                              " link CsiU_bar}
@{BODY}


All tektronix sequences (not listed here) are also not supported.

@ENDNODE
@NODE RECEIVECSI "Sequences you might receive"
@TOC ProgToc
Sequences, you might receive thru your input stream additionally to the
@{"keyboard functions" link KeyboardList} send to you in the
@{"english mode" link ConsoleModes}.

Please note that in @{"7 bit mode" link CsiEsc}, CSI is replaced by ESC [.

@{CODE}

@{B}CSI n;n V@{UB}      :(V)    Version report. Consists of version and
                       revision in this order.

@{B}CSI n;n R@{UB}      :(C)    Cursor position. Answer of CSI 6n.

@{B}CSI n;n H@{UB}      :(V)    Cursor position. Answer of CSI >?0n and
                       others.

@{B}CSI n;n f@{UB}      :(V)    Cursor position. Answer of CSI >?0n and
                       others.

@{B}CSI n;n;n;n r@{UB}  :(C)    Window bounds report. Answer to CSI 0q
                       and others. The numbers are the upper left edge
                       position and the height and width of the requested
                       area.

@{B}CSI n SPC v@{UB}    :(C)(V) (SPC is the blank space 20, 32 decimal)
                       Copy/paste report. Received if AutoPaste mode flag
                       CSI >?25 is disabled or block control is completely
                       under user control by the "user block control"
                       mode flag CSI >? 27.

        @{B}n=0@{UB}    :(C)    Paste
        @{B}n=1@{UB}    :(V)    Copy
        @{B}n=2@{UB}    :(V)    Cut
        @{B}n=3@{UB}    :(V)    Hide
        @{B}n=4@{UB}    :(V)    Select All
        @{B}n=5@{UB}    :(V)    Copy quiet (copy, but do not hide)


@{B}CSI n;n;n;n;n;n;n;n |@{UB}  :(C)    Raw Event report. Requested by
                       CSI {. Works also in cooked mode. Parameters are the
                       class, subclass, the code, the qualifier, the position
                       x and y and the seconds and microseconds of the event.
                       For details, study the @{"RKRMs" link References}.

@{BODY}
The next ones can be heard only in @{"raw mode" link CsiEsc}:

@{CODE}

@{B}CSI n ~@{UB}        :(C)    Function keys and other special keys.

        @{B}n=0..9@{UB} :(C)    Function keys F1 to F10.
        @{B}n=10..19@{UB}:(C)   Shifted function keys F1 to F10.
        @{B}n=20@{UB}   :(2)    Function key F11 (usually not available)
        @{B}n=21@{UB}   :(2)    Function key F12 (usually not available)
        @{B}n=30@{UB}   :(2)    Function key F11 with shift.
        @{B}n=31@{UB}   :(2)    Function key F12 with shift.

        The next ones look unusual, but are sent by ViNCEd depending
        on the keymap mapping, even with a standard keyboard:

        @{B}n=40@{UB}   :(2)    Insert
        @{B}n=41@{UB}   :(2)    Page Up
        @{B}n=42@{UB}   :(2)    Page Down
        @{B}n=43@{UB}   :(2)    Pause/Break
        @{B}n=44@{UB}   :(2)    Home
        @{B}n=45@{UB}   :(2)    End

        @{B}n=50@{UB}   :(2)    Shifted Insert
        @{B}n=51@{UB}   :(2)    Shifted Page Up
        @{B}n=52@{UB}   :(2)    Shifted Page Down
        @{B}n=53@{UB}   :(2)    Shifted Pause/Break
        @{B}n=54@{UB}   :(2)    Shifted Home
        @{B}n=55@{UB}   :(2)    Shifted End


@{B}CSI A@{UB}          :(C)    Cursor up
@{B}CSI B@{UB}          :(C)    Cursor down
@{B}CSI C@{UB}          :(C)    Cursor right
@{B}CSI D@{UB}          :(C)    Cursor left
@{B}CSI T@{UB}          :(C)    Shift cursor up.

@{B}CSI S@{UB}          :(C)    Shift cursor down.
@{B}CSI SPC \@@{UB}      :(C)    Shift cursor right. (Again, SPC is the blank space)
@{B}CSI SPC A@{UB}      :(C)    Shift cursor left.

@{B}CSI Z@{UB}          :(C)    Shift TAB

@{B}CSI ?~@{UB}         :(C)    Help

@{BODY}
The next sequences can be received only in
@{"medium mode" link ConsoleModes}. They identify special ViNCEd features
and are sent out if an external shell should run a TAB expansion and others.

@{CODE}

@{B}CSI id;len;crs U@{UB}:(V)   Medium mode report. Sends this CSI sequence,
                       and the current input line as pure ASCII of the given
                       length "len", with the relative cursor position "crs"
                       within this line. If "crs" is one, this identifies
                       the cursor to be at the first character of the line,
                       and so on. "id" specifies what to do with this line,
                       i.e. an feature usually implemented by ViNCEd, which
                       should be done now by the user shell:

        @{B}12@{UB}     : first Tab expansion
        @{B}13@{UB}     : first Tab expansion reverse
        @{B}22@{UB}     : second Tab expansion
        @{B}23@{UB}     : second Tab expansion reverse
        @{B}32@{UB}     : third Tab expansion
        @{B}33@{UB}     : third Tab expansion reverse
        @{B}42@{UB}     : fourth Tab expansion
        @{B}43@{UB}     : fourth Tab expansion reverse
        @{B}52@{UB}     : fifth Tab expansion
        @{B}53@{UB}     : fifth Tab expansion reverse

        @{B}2@{UB}      : history upwards
        @{B}3@{UB}      : history down
        @{B}4@{UB}      : search history upwards
        @{B}5@{UB}      : search history downwards
        @{B}6@{UB}      : recall history upwards
        @{B}7@{UB}      : recall history downwards
        @{B}10@{UB}     : rewind history
@{BODY}

Except for these control codes, ViNCEd will also send the code
@{B}1A@{UB} in case the @{"Ctrl-Z" link CtrlZ} function is used in the
@{"medium mode" link ConsoleModes} instead of executing it.

Another sequence you can hear in english and medium mode is the line-feed
character 0A. It is send whenever a new prompt must be displayed and the
mode flag >?29 is high.


The next sequences are answer back sequences of a VT-220 terminal which
can be received by ViNCEd as well, provided the
@{"proper control codes" link SendBackCSI} are send to it.

@{CODE}

@{B}CSI ?60@{UB}        :       "This is a VT-220 terminal".
                       Answer of CSI c and ESC Z.
@{B}CSI " 0n @{UB}      :       "Terminal is fine". Answer of CSI 5n.
@{B}CSI ?11n@{UB}       :       "Printer not ready". Answer of CSI ?15n.
@{B}CSI ?21n@{UB}       :       "User definable keys are locked". Answer of
                       CSI ?21 n.
@{B}CSI ?27;0n@{UB}     :       "Keyboard language unknown". Answer of
                       CSI ?26 n.
@{B}CSI >1;vers;revc@{UB}:      Answer of @{"CSI >c" link Csi_lc}.

@{BODY}

@ENDNODE
@NODE KeyboardList "List of control sequences the keyboard parser sends and receives"
@TOC ProgToc
This is the list of the CSI sequences the keyboard parser knows. You
shouldn't print these sequences since they won't work if they are found in
the output stream. These control sequences are only useful in two
situations:


o) In case you've selected the @{"english console mode" link ConsoleModes},
these sequences will be send to your input stream and encode the enhanced
@{"keyboard functions" link KeyFunction} of ViNCEd.


o) You send a string to the keyboard parser directly. That can be done
either by the ESC ] 41; @{"escape sequence" link EscList}, by the
vnc.library function DoAsciiData() or by using the
@{"dos packet" link PacketList} ACTION_SETLINE. This string will be parsed
as if it has been typed in by the user. These functions are, for example,
used by the TAB expansion.


The following definitions are used in the table below:

@{CODE}

n               a decimal number, represented as an ASCII string.
CSI             CSI control sequence introducer, hex 9B (decimal 155).
                Can be substituted by ESC [.
ESC             Escape character, hex 1B (decimal 27).
SPC             ASCII blank space hex 20 (decimal 32).

@{BODY}
The character in brackets behind the sequence specifies the origin of
this sequence:

@{CODE}

(C)             Commodore, VT-xxx
(2)             VT-220 standard
(V)             ViNCEd extension

@{BODY}

The characters in square brackets indicate special properties of this
keyboard function:

@{CODE}
T               does not abort TAB expansion
S               does not snap back the window position to the cursor
I               executed immediately in type-ahead mode
H               does not clear the history search buffer

@{BODY}

...and now for the list of keyboard sequences; some of them have replacement
sequences; these are indicated in the line below the definition. Numeric
values, as the ASCII values of control characters, are given in hexadecimal.

@{CODE}


@{B}CSI n D@{UB}        :(C)    @{"Cursor Left" link Kf_Cursor_Left}
                       Even though this looks like the VT-220 output
                       sequence, it works slightly different. It does
                       not move the cursor across lines. "n" is the
                       number of positions to move, allowed to be
                       zero or negative.

@{B}CSI n C@{UB}        :(C)    @{"Cursor Right" link Kf_Cursor_Right}
                       Ditto.

@{B}CSI n A@{UB}        :(C)    @{"Cursor Up" link Kf_Cursor_Up}
@{B}8D@{UB}

@{B}CSI n B@{UB}        :(C)    @{"Cursor Down" link Kf_Cursor_Down}
@{B}84@{UB}

@{B}CSI 1 E@{UB}        :(V)[H] @{"History Up" link Kf_History_Up}

@{B}CSI 2 E@{UB}        :(V)[H] @{"History Down" link Kf_History_Down}
@{B}12@{UB}

@{B}CSI 1 F@{UB}        :(V)[H] @{"Search Partial Upwards" link Kf_Search_Partial_Upwards}

@{B}CSI 2 F@{UB}        :(V)[H] @{"Search Partial Downwards" link Kf_Search_Partial_Downwards}

@{B}CSI 3 E@{UB}        :(V)[H] @{"Search History Upwards" link Kf_Search_History_Upwards}

@{B}CSI 3 F@{UB}        :(V)[H] @{"Search History Downwards" link Kf_Search_History_Downwards}

@{B}CSI SPC n \@@{UB}    :(C)    @{"Half Screen Left" link Kf_Half_Screen_Left}
                       The parameter "n" repeats this command "n" times.

@{B}CSI SPC n A@{UB}    :(C)    @{"Half Screen Right" link Kf_Half_Screen_Right}
                       Ditto.

@{B}CSI n T@{UB}        :(C)    @{"Half Screen Up" link Kf_Half_Screen_Up}
                       The parameter "n" repeats this command "n" times.
@{B}CSI 41~@{UB}        :(2)    @{"Half Screen Up" link Kf_Half_Screen_Up}
                       Identically to above, but "n" is always one.

@{B}CSI n S@{UB}        :(C)    @{"Half Screen Down" link Kf_Half_Screen_Down}
@{B}CSI 42~@{UB}        :(2)    @{"Half Screen Down" link Kf_Half_Screen_Down}

@{B}CSI 6 E@{UB}        :(V)    @{"To Left Border" link Kf_To_Left_Border}
@{B}01@{UB}

@{B}CSI 6F@{UB}         :(V)    @{"To Right Border" link Kf_To_Right_Border}
@{B}1A@{UB}

@{B}CSI 54~@{UB}        :(2)    @{"To Top of Screen" link Kf_To_Top_of_Screen}

@{B}CSI 55~@{UB}        :(2)    @{"To Bottom of Screen" link Kf_To_Bottom_of_Screen}

@{B}CSI 4 E@{UB}        :(V)    @{"Prev Word" link Kf_Prev_Word}

@{B}CSI 4 F@{UB}        :(V)    @{"Next Word" link Kf_Next_Word}

@{B}CSI 5 E@{UB}        :(V)    @{"Prev Component" link Kf_Prev_Component}

@{B}CSI 5 F@{UB}        :(V)    @{"Next Component" link Kf_Next_Component}

@{B}CSI 44~@{UB}        :(2)    @{"Home" link Kf_Home}

@{B}CSI 45~@{UB}        :(2)    @{"End" link Kf_End}

@{B}CSI 7 E@{UB}        :(V)[S] @{"Scroll Up" link Kf_Scroll_Up}
@{B}CSI 51~@{UB}        :(2)[S]

@{B}CSI 7 F@{UB}        :(V)[S] @{"Scroll Down" link Kf_Scroll_Down}
@{B}CSI 52~@{UB}        :(2)[S]

@{B}CSI 8 E@{UB}        :(V)    @{"Scroll Half Screen Up" link Kf_Scroll_Half_Screen_Up}

@{B}CSI 8 F@{UB}        :(V)    @{"Scroll Half Screen Down" link Kf_Scroll_Half_Screen_Down}

@{B}CSI 10 J@{UB}       :(V)    @{"Send Inputs" link Kf_Send_Inputs}
@{B}0D@{UB}

@{B}CSI 11 J@{UB}       :(V)    @{"Split Line" link Kf_Split_Line}
@{B}85@{UB}

@{B}CSI 12 J@{UB}       :(V)    @{"Insert ^J" link Kf_Insert_Ctrl_J}

@{B}CSI 13 J@{UB}       :(V)    @{"Line Feed" link Kf_Line_Feed}
@{B}0A@{UB}

@{B}CSI 20 J@{UB}       :(V)    @{"Send Complete Line" link Kf_Send_Complete_Line}

@{B}CSI n I@{UB}        :(V)    @{"TAB Forwards" link Kf_Tab_Forwards}
@{B}09@{UB}                     n is again the number of TABs to move. Can be zero
                       or negative.

@{B}CSI n Z@{UB}        :(2)    @{"TAB Backwards" link Kf_Tab_Backwards}
                       n may be again zero or negative.

@{B}CSI 12 W@{UB}       :(V)[T] @{"Expand Path" link Kf_Expand_Path}

@{B}CSI 13 W@{UB}       :(V)[T] @{"Expand Backwards" link Kf_Expand_Backwards}

@{B}CSI 22 W@{UB}       :(V)[T] @{"Expand Short" link Kf_Expand_Short}

@{B}CSI 23 W@{UB}       :(V)[T] @{"Expand Short Bkwds" link Kf_Expand_Short_Bkwds}

@{B}CSI 32 W@{UB}       :(V)[T] @{"Expand Devices" link Kf_Expand_Devices}

@{B}CSI 33 W@{UB}       :(V)[T] @{"Expand Devs Bkwds" link Kf_Expand_Devs_Bkwds}

@{B}CSI 42 W@{UB}       :(V)[T] @{"Expand Dirs" link Kf_Expand_Dirs}

@{B}CSI 43 W@{UB}       :(V)[T] @{"Expand Dirs Bkwds" link Kf_Expand_Dirs_Bkwds}

@{B}CSI 52 W@{UB}       :(V)[T] @{"Expand Icons" link Kf_Expand_Icons}

@{B}CSI 53 W@{UB}       :(V)[T] @{"Expand Icons Bkwds" link Kf_Expand_Icons_Bkwds}

@{B}CSI 62 W@{UB}       :(V)[T] @{"Expand Alt" link Kf_Expand_Alt}

@{B}CSI 63 W@{UB}       :(V)[T] @{"Expand Alt Bkwds" link Kf_Expand_Alt_Bkwds}

@{B}03@{UB}             :(C)[TSI]@{"Send ^C" link Kf_Send_Ctrl_C}

@{B}04@{UB}             :(C)[TSI]@{"Send ^D" link Kf_Send_Ctrl_D}

@{B}05@{UB}             :(C)[TSI]@{"Send ^E" link Kf_Send_Ctrl_E}

@{B}06@{UB}             :(C)[TSI]@{"Send ^F" link Kf_Send_Ctrl_F}

@{B}CSI 13 Y@{UB}       :(V)[TSI]@{"Send ^C to All" link Kf_Send_Ctrl_C_To_All}

@{B}CSI 14 Y@{UB}       :(V)[TSI]@{"Send ^D to All" link Kf_Send_Ctrl_D_To_All}

@{B}CSI 15 Y@{UB}       :(V)[TSI]@{"Send ^E to All" link Kf_Send_Ctrl_E_To_All}

@{B}CSI 16 Y@{UB}       :(V)[TSI]@{"Send ^F to All" link Kf_Send_Ctrl_F_To_All}

@{B}7F@{UB}             :(C)    @{"Delete Forwards" link Kf_Delete_Forwards}

@{B}08@{UB}             :(C)    @{"Delete Backwards" link Kf_Delete_Backwards}

@{B}CSI 2 K@{UB}        :(V)    @{"Delete Full Line" link Kf_Delete_Full_Line}

@{B}CSI 12 K@{UB}       :(V)    @{"Cut Full Line" link Kf_Cut_Full_Line}

@{B}CSI 3 K@{UB}        :(V)    @{"Delete Inputs" link Kf_Delete_Inputs}

@{B}CSI 13 K@{UB}       :(V)    @{"Cut Inputs" link Kf_Cut_Inputs}

@{B}CSI 5 K@{UB}        :(V)    @{"Delete Word Fwds" link Kf_Delete_Word_Fwds}

@{B}CSI 15 K@{UB}       :(V)    @{"Cut Word Fwds" link Kf_Cut_Word_Fwds}

@{B}CSI 6 K@{UB}        :(V)    @{"Delete Word Bkwds" link Kf_Delete_Word_Bkwds}
@{B}17@{UB}

@{B}CSI 16 K@{UB}       :(V)    @{"Cut Word Bkwds" link Kf_Cut_Word_Bkwds}

@{B}CSI 7 K@{UB}        :(V)    @{"Delete Component Fwds" link Kf_Delete_Component_Fwds}

@{B}CSI 17 K@{UB}       :(V)    @{"Cut Component Fwds" link Kf_Cut_Component_Fwds}

@{B}CSI 8 K@{UB}        :(V)    @{"Delete Component Bkwds" link Kf_Delete_Component_Bkwds}

@{B}CSI 18 K@{UB}       :(V)    @{"Cut Component Bkwds" link Kf_Cut_Component_Bkwds}

@{B}CSI 0 K@{UB}        :(2)    @{"Delete End of Line" link Kf_Delete_End_of_Line}

@{B}CSI 10 K@{UB}       :(V)    @{"Cut End of Line" link Kf_Cut_End_of_Line}
@{B}0B@{UB}             :(C)    @{"Cut End of Line" link Kf_Cut_End_of_Line}

@{B}CSI 1 K@{UB}        :(2)    @{"Delete Start of Line" link Kf_Delete_Start_of_Line}

@{B}CSI 11 K@{UB}       :(V)    @{"Cut Start of Line" link Kf_Cut_Start_of_Line}
@{B}15@{UB}             :(C)    @{"Cut Start of Line" link Kf_Cut_Start_of_Line}

@{B}CSI 9K@{UB}         :(V)    @{"Delete End of Display" link Kf_Delete_End_of_Display}

@{B}0C@{UB}             :(C)    @{"Form Feed" link Kf_Form_Feed}

@{B}CSI 20 K@{UB}       :(V)    @{"Clear Screen" link Kf_Clear_Screen}

@{B}CSI 2 v@{UB}        :(V)    @{"Cut" link Kf_Cut}

@{B}CSI 1 v@{UB}        :(V)[TS]@{"Copy" link Kf_Copy}

@{B}CSI 0 v@{UB}        :(C)    @{"Paste" link Kf_Paste}

@{B}CSI 3 v@{UB}        :(V)[TS]@{"Hide" link Kf_Hide}

@{B}CSI 4 v@{UB}        :(V)[TS]@{"Select All" link Kf_Select_All}

@{B}CSI 5 v@{UB}        :(V)[TS]@{"Copy Quiet" link Kf_Copy_Quiet}

@{B}CSI 18 W@{UB}       :(V)    @{"Reset" link Kf_Reset}

@{B}CSI 28 W@{UB}       :(V)    @{"Full Reset" link Kf_Full_Reset}

@{B}CSI 19 W@{UB}       :(V)    @{"Iconify" link Kf_Iconify}

@{B}CSI 30 W@{UB}       :(V)[TS]@{"Toggle Esc" link Kf_Toggle_Esc}

@{B}CSI 20 W@{UB}       :(V)[TS]@{"Toggle Numlock" link Kf_Toggle_NumLock}

@{B}CSI 40~@{UB}        :(2)    @{"Toggle Overwrite" link Kf_Toggle_Overwrite}

@{B}13@{UB}             :(C)[TSI]@{"Suspend" link Kf_Suspend}

@{B}11@{UB}             :(C)[TSI]@{"Resume" link Kf_Resume}

@{B}CSI 14 W@{UB}       :(V)[S] @{"Abort Expansion" link Kf_Abort_Expansion}

@{B}CSI 0 E@{UB}        :(V)[T] @{"Scroll to Cursor" link Kf_Scroll_To_Cursor}

@{B}02@{UB}             :(C)    @{"Rewind History" link Kf_Rewind_History}

@{B}19@{UB}             :(C)    @{"Yank" link Kf_Yank}

@{B}1C@{UB}             :(C)    @{"Generate EOF" link Kf_Generate_EOF}

@{B}CSI n~@{UB}         :(C)    Function key "n", or function key "n"
                       shifted. Check the @{"received CSI sequences list" link ReceiveCsi}
                       for details.

@{B}07@{UB}             :(C)    @{"Display Beep" link Kf_Display_Beep}

@{B}CSI 43~@{UB}        :(V)[TSI]@{"Toggle Pause" link Kf_Toggle_Pause}

@{B}CSI ?~@{UB}         :(C)    @{"Help" link Kf_Help}

@{B}CSI 17 Y@{UB}       :(V)    @{"Fork New Shell" link Kf_Fork_New_Shell}

@{B}CSI 21 W@{UB}       :(V)    @{"Insert CSI" link Kf_Insert_CSI}

@{B}CSI 31 W@{UB}       :(V)    @{"Insert ESC" link Kf_Insert_ESC}

@{BODY}

@ENDNODE
@NODE AnsiColors "ANSI Colors"
@TOC ProgToc
By using the "set render" @{"CSI sequence" link CsiList}, you're able to
specify colors - or more precisely - pen values in which the text has to be
rendered. However, how the arguments of the CSI m sequence are used depends
on whether the "ANSI coloring" is enabled or not.


In the default mode - which is compatible to the old console device - the
color numbers mean simply the hardware pen to use to render the text,
whichever color has been loaded into the hardware register.


However, if you select the "ANSI coloring", these arguments specify one of
the sixteen pre-definable color values and are not related to the hardware
register used to display this color on the screen. One possibility to choose
these colors, which is also the default, is to use the pre-defined
standard "ANSI colors". Additionally, the standard color layout is chosen -
to match the ANSI specifications, namely text in pen 7, white, on background
in pen 0, black.


The ANSI coloring is available either @{"as default" link SETVNC_EDIT_3}, or
as an option in the @{"open path" link OPENPath}, or can be selected by an
@{"CSI sequence" link CSILIST}, online.


The following table gives an overview about the ANSI color definitions and
how they are activated. The first eight colors are compatible to the ANSI
standard; you may, however, still define them yourself, check the
@{"second window page" link SETVNC_WINDOW_2} of SetVNC. The colors 8 to 15
are ViNCEd extensions to the standard.


@{CODE}

ANSI    Color           Activated by
                        for foreground  for container   for background
________________________________________________________________________

0       black           CSI 30 m        CSI 40 m        CSI >0 m
                        CSI ?30 m       CSI 40 m

1       red             CSI 31 m        CSI 41 m        CSI >1 m
                        CSI ?31 m       CSI ?41 m

2       green           CSI 32 m        CSI 42 m        CSI >2 m
                        CSI ?32 m       CSI ?42 m

3       yellow          CSI 33 m        CSI 43 m        CSI >3 m
                        CSI ?33 m       CSI ?43 m

4       blue            CSI 34 m        CSI 44 m        CSI >4 m
                        CSI ?34 m       CSI ?44 m

5       magenta         CSI 35 m        CSI 45 m        CSI >5 m
                        CSI ?35 m       CSI ?45 m

6       turquoise       CSI 36 m        CSI 46 m        CSI >6 m
                        CSI ?36 m       CSI ?46 m

7       white           CSI 37 m        CSI 47 m        CSI >7 m
                        CSI ?37 m       CSI ?47 m

@{BODY}

The arguments in the range 30..37 set the foreground color, the range
40..47 is responsible for the background color. The sequences of the type
"CSI > _ m" select the window fill color. The similar control sequences with
the additional question mark "CSI ?_ m" set the color for the user input
only.


The following pens are defined for ViNCEd, and are NOT ANSI standard, nor
CON: compatible. They work ONLY in ViNCEd windows:

@{CODE}

ViNCEd  Color           Activated by
                        for foreground  for container   for background
________________________________________________________________________

8       grey            CSI 38 m        CSI 48 m        CSI >8 m
                        CSI ?38 m       CSI 48 m

9       pink            CSI 59 m        CSI 79 m        CSI >9 m
                        CSI ?59 m       CSI ?79 m

10      spring green    CSI 60 m        CSI 80 m        CSI >10 m
                        CSI ?60 m       CSI ?80 m

11      orange          CSI 61 m        CSI 81 m        CSI >11 m
                        CSI ?61 m       CSI ?81 m

12      sky blue        CSI 62 m        CSI 82 m        CSI >12 m
                        CSI ?62 m       CSI ?82 m

13      violet          CSI 63 m        CSI 83 m        CSI >13 m
                        CSI ?63 m       CSI ?83 m

14      neon green      CSI 64 m        CSI 84 m        CSI >14 m
                        CSI ?64 m       CSI ?84 m

15      light gray      CSI 65 m        CSI 85 m        CSI >15 m
                        CSI ?65 m       CSI ?85 m

@{BODY}

This ANSI coloring works ONLY for Kickstart releases 3.0 (39.xx) and up
since the necessary system functions are not available in earlier releases.


@{B}REMARK:@{UB} You may alter the ANSI color layout, i.e. the colors that
ViNCEd chooses for the ANSI pens. This works either with the private
@{"CSI sequence" link CSILIST} "CSI V" or by using the prefs editor
@{"SetVNC" link SETVNC_WINDOW_2}, the second "Window" page.



@{B}REMEMBER:@{UB} ViNCEd TRIES its best to find colors that look like the
definitions above, but this isn't always possible. Don't expect miracles, on
a four color screen screen you'll only see four different colors, not more!
If there isn't a red color, then... THAT's IT.

The ANSI colors are mapped to the most similar looking screen pens,
regardless if they look "similar" at all. ANSI "red" might get mapped into
grey if nothing "more red-ish" is available.


ViNCEd uses shared pens for the ANSI coloring, but tries to allocate more
pens if no matching color can be found. Remember that this might be
impossible if either the screen has a very low depth or other programs
running on the same screen allocated pens as well.

If you want all ANSI colors, or as much as possible, open ViNCEd on a
private or public screen, read the
@{"window path section" link OPENPath} on how to do this. Then define colors
to be used by ViNCEd on this screen, by using the preference editor,
again on the @{"2nd window page" link SETVNC_WINDOW_2}.


ViNCEd might choose not to allocate additional pens for the ANSI colors if
"sufficient" matches are found. This depends not only on if more pens are
available, but also on the depth of the screen. ViNCEd is more tolerant on a
screen of low depth! For example, ViNCEd usually won't allocate ANY ANSI
colors on screens of depth three (eight pens) or below, leaving the
additional pens to other purposes. IF you want to use ALL pens as ANSI pens,
YOU HAVE TO DEFINE THE COLORS EXPLICITLY, again with
@{"SetVNC" link SETVNC_WINDOW_2}.


I would suggest to leave the first four colors alone, and fill in the
remaining colors to get a perfect ANSI match. If, for example, you're
working with the standard CBM workbench layout, a blue, white, grey and
black color is already available. Define colors four and up as the missing
colors, namely red, yellow, green, magenta and turquois for a full ANSI set, and
additionally light blue, pink, neon green, spring green, orange, dark green
and violet for a full ViNCEd set of colors.

@ENDNODE
@NODE MouseTrack "Mouse Tracking"
@TOC ProgToc
ViNCEd 3.70 supports so called "Mouse Tracking" CSI sequences. With these
control sequences, you can ask ViNCEd to inform you - or your program - if
the user moves the mouse, or clicks onto a character in the window. These
functions are most useful to implement "block operations" in an editor, or
to drive an interactive, character based user interface.


ViNCEd supports X10, XTerm and XTerm-2 mouse tracking plus some minor
additions, except for the "Mouse hilite tracking" which does not fit very
well into the intuition user interface rules.


X10 mouse tracking is enabled by @{B}CSI?9h@{UB} and disabled by
@{B}CSI?9l@{UB}. If enabled, ViNCEd sends the following six character
control sequence if one of the mouse buttons is pressed:


@{B}ESC [ M bxy@{UB}             (6 characters)


@{B}b@{UB} encodes the mouse button which was pressed, it is set to SPC
(blank space, ASCII 32 = 0x20) for the leftmost button. Other values are "!"
(exclamation mark) for the middle button and "\"" (double quotes) for the
right mouse button. Since the right mouse button is tracked by intuition and
the middle mouse button is used for insertion and other ViNCEd internal
purposes, only the left mouse button is currently tracked, all other mouse
button presses are not reported.


@{B}x@{UB} is the x coordinate of the character over which the mouse pointer has been
pressed. As always for the terminal interface, it counts from one for
the leftmost character to "width" for the rightmost character. Note that
this is really a character offset, not a pixel position! The position is
@{B}not@{UB} encoded as a readable decimal ASCII number string, but as a
single ASCII character by adding the absolute position to 32=0x20 (ASCII
blank space, SPC) and encoding the result as ASCII character, i.e. "!" =
0x21 means one, "#" is three, etc.


@{B}y@{UB} is the y coordinate of the character over which the mouse has been
pressed.


X10 mouse events are not reported in case the mouse button was pushed
outside of the printable area of the window, and if the mouse button is
released or the mouse is moved. Furthermore, the mouse position does
@{B}not@{UB} include horizontal scrolling, but encodes the "graphical"
offset of the position to the left window border.


Normal XTerm tracking is enabled by @{B}CSI?1000h@{UB} and disabled by
@{B}CSI?1000l@{UB}. Unlike the X10 reports, mouse button presses and
releases are sent, but no mouse moves. On such an event, the following 6
character sequence will be generated:


@{B}ESC [ M bxy@{UB}             (6 characters)


@{B}x@{UB} and @{B}y@{UB} encode again the mouse position by one character
ASCII codes in the same way as above, except that @{B}x@{UB} includes now
the horizontal scroll offset such that this is a true character position as
it is addressable by @{B}CSI H@{UB} for example.


@{B}b@{UB} is the button and qualifier variable. The low two bits of
@{B}b@{UB} encode button information:

@{CODE}
Bit 0 and 1:    Encode the button push and release. Set to
        0       if the left mouse button was pressed
        1       if the middle mouse button was pressed
        2       if the right mouse button was pressed
        3       if any button was released.

Since ViNCEd and intuition filter the right and middle mouse buttons before
mouse tracking can grab them, the values 1 and 2 never show up.

Bit 2:          Set if either @{FG Background}@{BG Text}Shift@{FG Text}@{BG Background} key was hold down.
Bit 3:          Set if either @{FG Background}@{BG Text}Alt@{FG Text}@{BG Background} key was hold down.
                On Un*x machines, this encodes the "Meta" key.
Bit 4:          Set if the @{FG Background}@{BG Text}Ctrl@{FG Text}@{BG Background} key is held down.
@{BODY}

Similar to the X10 mouse tracking, only mouse button presses within the text
region of the window are recognized. If the mouse button is released while
the pointer is outside of the window or the text area, ViNCEd will truncate
the mouse coordinates to the inner dimensions of the window, and will send
the mouse button report in all cases. This was mainly done to be
able to drive a "state machine" such that every mouse button press is
guaranteed to be paired by a mouse button release. Mouse movement reports
are not sent.


XTerm hilite tracking @{B}CSI?1001h@{UB} is not supported because it
requires a type of interaction of the client program with the console which
does not fit into the intuition input mechanisms and because it could hang
the computer in worst case. I don't see a useful application for it anyhow.


XTerm-2 mouse tracking is enabled by @{B}CSI?1002h@{UB} and is disabled by
@{B}CSI?1002l@{UB}. It is similar to XTerm mouse tracking except that ViNCEd
sends also mouse movement reports in case the mouse button is held down
while "dragging" with the mouse pointer. This makes this kind of mouse
tracking perfect for editors with "Cut/Copy" clipboard support and block
marking.

On "dragging", the following six-term sequence is sent to the client:


@{B}ESC [ M bxy@{UB}             (6 characters)


@{B}x@{UB}, @{B}y@{UB} and @{B}b@{UB} are as above, except that bit 5 of
the button qualifier @{B}b@{UB} is set, too, to indicate an active
"dragging". Furthermore, this sequence is only send in case the mouse
pointer really moved relative to the last position, to avoid unnecessary
overhead and trashing of the input buffer of the client.


The @{B}x@{UB} and @{B}y@{UB} positions are truncated to the text area
bounds in @{"VT-220 mode" link Fl_VTMODE} because this is how XTerm-2 would
react. This is unfortunately inconvenient if "scrolling by dragging" should
be supported, i.e. the window contents should be scrolled in case the mouse
pointer leaves the printable window area. Therefore, ViNCEd reacts a bit
different if the @{"VT-220 mode" link Fl_VTMODE} is disabled: Instead of
truncating to the inner text dimensions, mouse positions are truncated to
an enlarged region which is one character position wider on the left, right,
upper and lower edge. This means that an @{B}x@{UB} position of "0", encoded
as ASCII SPC (blank space) is sent in case the mouse pointer is left to the
left edge, or reports "width+1" in case it is beyond the right edge. Just
the same holds for the @{B}y@{UB} coordinate. An editor could use this
information to scroll the window contents in the desired direction.

@ENDNODE
@NODE ConsoleModes "Console Modes"
@TOC ProgToc
For short, ViNCEd has four where the standard terminal has only two.


But I guess I should first give an explanation what is this about:


The standard Amiga Os comes with two "flavours" of window handlers, the
"CON:" handler and the "RAW:" handler. Both are actually handled by the same
program and you can therefore convert a "CON:" window into a "RAW:" window
and vice versa. The difference between the two is how they handle input.


In "RAW" mode, each key press is send immediately to the input stream of a
waiting program, and none of these key presses is echoed on the screen. It's
the matter of the program of do that. "RAW" mode has very little to offer,
all has to be done by the external program using the console - read
key-press by key-press and decide what to do about it. This mode is,
however, very adapted for running an editor in the console since it gives
full control over what is printed on the screen at which time and where.


The "CON" mode is different from that. Usually, no inputs are send to the
input stream of a program at all. Instead, the console lets you edit a line
as a whole, including all the nice editor features of ViNCEd like delete
characters, insert some, go back in the history and much more. Then, if you
press @{FG Background}@{BG Text}Return@{FG Text}@{BG Background}, the
collected inputs on one line are send back to the program as a complete
line. The shell uses this mode since it is more convenient to leave all the
troublesome editor features for the console and care only for parsing
complete shell lines. This mode is also called the "canonical mode", or the
"cooked mode" - because it is "not raw". The ViNCEd convention for this mode
is "well done" for a reason you'll be able to understand in a second.


ViNCEd has more to offer than just "raw" and "cooked". There's something in
between.



@{B}The raw mode@{UB}:

This works as explained above. All key presses are directly send to the
input stream, without any buffering. However, to be compatible to the
standard console, no @{"extended ViNCEd key codes" link KeyboardList} are
send back, only standard functions will be available. Your ViNCEd keyboard
definitions won't be used by this mode. All this, as I said, for
compatibility since a program might not expect some unusual CSI sequences.


@{B}The english mode@{UB}:

This is "almost raw"; it works like the raw mode above, except that all the
ViNCEd @{"extended keyboard CSI sequences" link KeyboardList} are send as
well. An extended editor may profit quite a lot from that, as it will be
able to receive sequences as "move to the home position", "toggle overwrite
mode", "move to the next word" and so on. An editor using these functions
need not to offer a separate keyboard editor because this is already setup
and controlled by ViNCEd.


@{B}The medium mode@{UB}:

This is "almost cooked"; it works like the "cooked" = "well done" mode
below, except that ViNCEd does not provide the
@{"TAB expansion" link TabExpand}, @{"history" link History} and
@{"job control" link JobCtrl}; I don't like the way how these functions are
currently implemented because these are features the shell - and not the
shell editor - should provide. In case any of these functions is used,
ViNCEd will not perform them, but will send on a
@{"CSI sequence" link ReceiveCSI} to tell the shell to do so; this sequence
will include the complete line you've entered so far. It's the matter of the
shell to extract the right information. Except for that, this mode works
like the "well done" mode below.

A future "VinShell" ("Vinchy") might make use of this mode. It offers the
flexibility of the "raw mode" and the convenience of the "well done" mode.


@{B}The well done mode@{UB}:

This is what was usually called the "cooked mode". (However, you don't
"cook" steaks, they are "well done" in case you haven't noticed the origin
of the mode names ;-). All user inputs are buffered, the console provides
additional functions like the @{"TAB expansion" link TabExpand} and
@{"Job Control" link JobCtrl}. The way how this is implemented must be
called "a hack", but it is the only way to make this compatible to the
standard Amiga Shell. It is fully backwards compatible to the old console
"cooked" mode.



For experts: The console modes can be selected with the
@{"dos packet" link PacketList} "ACTION_SCREEN_MODE". The following mode IDs
have been defined in "vnc/packets.h":


@{B}VNC_RAW_MODE@{UB}

Equals one. The standard "raw" mode. The same value goes for the standard
CON: handler as well.


@{B}VNC_WELL_DONE_MODE@{UB}

Is zero. This is the "cooked" or "well done" mode; identical to the
identifier for the old CON:-handler.


@{B}VNC_ENGLISH_MODE@{UB}

This is three and identifies the english mode.


@{B}VNC_MEDIUM_MODE@{UB}

This is two and identifies the medium mode.


@ENDNODE
@NODE PacketList "List of understood DOS packets"
@TOC ProgToc
This is the list of packets understood by ViNCEd together with their
parameters. More can be found in "vnc/packets.h"


@{CODE}
@{B}ACTION_WRITE@{UB}:

dp_Type:                0x57
dp_Arg1:                filehandle -> fh_Arg1
dp_Arg2:                char * to buffer
dp_Arg3:                number of characters to print

dp_Res1:                number of characters written, or -1 on error
dp_Res2:                error code

@{BODY}
Write characters to the ViNCEd console.



@{CODE}
@{B}ACTION_READ@{UB}:

dp_Type:                0x52
dp_Arg1:                filehandle -> fh_Arg1
dp_Arg2:                char * to buffer
dp_Arg3:                size of buffer

dp_Res1:                number of characters read, could be less than Arg3,
                        is zero if "End of File" is detected,
                        is -1 if an error was detected
dp_Res2:                error code

@{BODY}
Read characters or complete lines from the ViNCEd console.



@{CODE}
@{B}ACTION_WAIT_CHAR@{UB}:

dp_Type:                0x14
dp_Arg1:                timeout period in microseconds

dp_Res1:                success code; DOSFALSE if no characters present,
                        or DOSTRUE if characters available
dp_Res2:                error code if dp_Res1 DOSFALSE
                        number of inputs lines queued if dp_Res2 DOSTRUE
                        This is an ugly hack to make the ARexx Lines()
                        function working. Do not depend on this.

@{BODY}
Wait a specified timeout period for characters to be available in the ViNCEd
output buffer. Return DOSFALSE if the output buffer (hence your input
buffer) remains empty. Returns DOSTRUE if characters are available. The
number of available lines in the output buffer will be returned in dp_Res2.
However, this is a hack to keep ARexx happy you should not depend on in
future versions. The output buffer of ViNCEd is character oriented, not line
oriented.



@{CODE}
@{B}ACTION_DISK_INFO@{UB}:

dp_Type:                0x19
dp_Arg1:                BPTR struct InfoData.
                        This structure is filled as follows:

                        id_DiskType     either CON\\0 or RAW\\0 dependent
                                        on the console mode.
                        id_VolumeNode   the pointer to the intuition window
                                        used by ViNCEd
                        id_InUse        the pointer to an struct IORequest
                                        opened for the console.device

                        all other fields are zero.

dp_Res1:                success code, DOSTRUE or DOSFALSE.
                        You NEED to care about DOSFALSE! ViNCEd might be
                        unable to open a window if the system is too low
                        on memory.
dp_Res2:                an error code.


@{BODY}
@{B}BIG BIG WARNING@{UB}:

THIS PACKET IS A MESS. DO NOT USE THIS PACKET UNLESS YOU CALL
ACTION_UNDISK_INFO, too.


This packet will pop-open the window in case it has been closed or
iconified because certain programs depend on an correctly setup pointer
in the structure above. Do @{B}not@{UB} use the IO request structure.
Sending out read or write requests in ViNCEd won't do good. ViNCEd
windows are @{B}not@{UB} handled by the console device. The id_DiskType
is set to CON\\0 (four characters packed into one long word) for the
@{"medium mode" link ConsoleModes} or the
@{"well done mode" link ConsoleModes}. It is set to RAW\\0 otherwise.



@{B}This packet is a big mess. If you MUST use it, call
ACTION_UNDISK_INFO afterwards.@{UB} If you want to set the keyboard or the
font, @{B}DO NOT MESS@{UB} with this packet. Use the documented
@{"ESC codes" link EscList} to set these properties.



@{CODE}
@{B}ACTION_UNDISK_INFO@{UB}

dp_Type:                0x201

dp_Res1:                DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
This packet un-does the side effects of ACTION_DISK_INFO. The window will be
allowed to closed or iconified after this packet has been received. Each
ACTION_DISK_INFO must be matched by one and exactly one ACTION_UNDISK_INFO.



@{CODE}
@{B}ACTION_TIMER@{UB}

dp_Type:                0x1e

@{BODY}
Internal use only, do not send this packet type. This is intentionally
undocumented.



@{CODE}
@{B}ACTION_SCREEN_MODE@{UB}

dp_Type:                0x3e2
dp_Arg1:                the screen mode to select

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code in case of failure

@{BODY}
This packet selects a different @{"console mode" link ConsoleModes} for the
stream associated to this packet. The following modes are available:

@{CODE}
VNC_RAW_MODE      =1    raw mode, unbuffered, single character mode,
                        only CBM control sequences are send
VNC_ENGLISH_MODE  =3    english mode, unbuffered, single character mode,
                        extended ViNCEd settings are send as well
VNC_MEDIUM_MODE   =2    medium mode, line buffered. TAB expansion, history,
                        job control and other functions are no longer
                        executed by ViNCEd, but left to the shell by sending
                        out @{"CSI sequences" link ReceiveCsi}.
VNC_WELL_DONE_MODE=0    the well done mode, usually known as the "cooked
                        mode"



@{CODE}
@{B}ACTION_FINDUPDATE@{UB}
@{B}ACTION_FINDINPUT@{UB}
@{B}ACTION_FINDOUTPUT@{UB}

dp_Type:                0x3ec,0x3ed,0x3ee
dp_Arg1:                BPTR to struct FileHandle
dp_Arg2:                set this to NULL
dp_Arg3:                BPTR to a BCPL string containing the
                        @{"window path" link OpenPath}.

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
This opens a ViNCEd window. Unlike for the original CON: handler, the window
path *must* be given here; the window won't be opened just because you
called DeviceProc() - that's different compared to the original handler. The
type specified for the stream won't matter, all three codes work alike. The
following special names are available:

@{CODE}
"*"                     Opens a stream to the @{"owner" link Owners} of
                        the same owner that send this packet.
"CONSOLE:"              Opens a stream to the NULL owner.
"CONSOLE:name"          Opens a stream to a named owner.

@{BODY}
None of the two last names sends the given stream to foreground mode, so
beware! You need to send ACTION_SET_OWNER to do that.



@{CODE}
@{B}ACTION_SEEK@{UB}            (V)

dp_Type:                0x3f0
dp_Arg1:                filehandle -> fh_Arg1
dp_Arg2:                offset
dp_Arg3:                seek mode

dp_Res1:                absolute file position before seek operation took
                        place or -1 on error
dp_Res2:                error code

@{BODY}
No, that's not a typo. ViNCEd allows seeking in its output stream. If you
seek towards the end, the data that was "sought over" will not be read and
kind of "put back" for later usage. I don't know if this is useful or not,
but using this Seek() operation, it is possible to determinate the number of
characters in the ViNCEd input buffer. At least, this packet is implemented
since VNC 1.00.



@{CODE}
@{B}ACTION_CHANGE_SIGNAL@{UB}

dp_Type:                0x3e3
dp_Arg1:                filehandle -> fh_Arg1
dp_Arg2:                struct MessagePort *
dp_Arg3:                set this to NULL

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                struct MsgPort * to port used before if
                        dp_Res1 is DOSTRUE, or error code if DOSFALSE


dp_Arg2 may be set to NULL to read the current port.

@{BODY}
This command selects a port - and therefore a task - to send Ctrl-C and
the other break signals to. This port must be an ACTION_SIGNAL type port.

This command is "a nice idea" but not much more; it cannot be implemented
strictly. ViNCEd does also have to send the break signal to the last program
that printed on the ViNCEd screen. This is an ugly hack also implemented in
the original CON: handler for pre-2.0 programs. To avoid possible mess,
ViNCEd checks the port to break to on every "Break" signal carefully if it
is valid, but still: In case you selected a break-port with this packet and
the port is about to disappear, reset the break-port by this packet to some
useful value. 



@{CODE}
@{B}ACTION_NIL@{UB}

dp_Type:                0x0
@{BODY}
This is an internal packet and intentionally undocumented.



@{CODE}
@{B}ACTION_SETLINE@{UB}         (also known as ACTION_FORCE)

dp_Type:                0x7d1
dp_Arg1:                filehandle -> fh_Arg1
dp_Arg2:                char * to a buffer
dp_Arg3:                number of characters

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
This packet sends characters to the ViNCEd internal keyboard buffer as if
they have been typed. All ViNCEd keyboard
@{"CSI sequences" link KeyboardList} may be specified here. The LF "line
feed" character will be replaced by "CR", the
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key.


This packet IS multithreaded, but there is only one thread per ViNCEd
window.

If you want one thread per owner, use the "ESC ] 41"
@{"ESC sequence" link EscList} which is the recommended method.



@{CODE}
@{B}ACTION_PUSHLINE@{UB}        (also known as ACTION_STACK)

dp_Type:                0x7d2
dp_Arg1:                filehandle -> fh_Type
dp_Arg2:                char * to a buffer
dp_Arg3:                number of characters

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
Pushes the buffer data at the end of the ViNCEd output (hence your input)
buffer, in LIFO order. This is used for the ARexx "PUSH" command. However,
since the ARexx DoPkt routine is buggy, this works only reliable if the
ARexx fix in the ViNCEd archive has been applied. This bug is NOT ViNCEd
related, it happens, too, with the original CON: handler.



@{CODE}
@{B}ACTION_QUEUELINE@{UB}       (also known as ACTION_QUEUE)

dp_Type:                0x7d3
dp_Arg1:                filehandle -> fh_Type
dp_Arg2:                char * to a buffer
dp_Arg3:                number of characters

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
Queues the buffer data at the beginning of the ViNCEd output (hence your
input) buffer, in FIFO order. This is used for the Arexx "QUEUE" command.
However, since the ARexx DoPkt routine is buggy, this works only reliable if
the ARexx fix in the ViNCEd archive has been applied. This bug is NOT ViNCEd
related, it happens, too, with the original CON: handler.



@{CODE}
@{B}ACTION_EXPANDLINE@{UB}

dp_Type:                0x7db
dp_Arg1:                filehandle -> fh_Arg1
dp_Arg2:                char * to a buffer
dp_Arg3:                number of characters

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
This packet sends characters to the ViNCEd internal keyboard buffer as if
they have been typed. All ViNCEd keyboard
@{"CSI sequences" link KeyboardList} may be specified here. The LF "line
feed" character will be replaced by "CR", the
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background} key.

This is identically to ACTION_SETLINE except that the TAB expansion is not
aborted, even though some "typing is done on the keyboard".


This packet IS multithreaded, but there is only one thread per ViNCEd
window.

If you want one thread per owner, use the "ESC ] 41"
@{"ESC sequence" link EscList}.

This function should be used exclusively by an alternative external TAB
expansion patched into the vnc.library.



@{CODE}
@{B}ACTION_CLEARLINE@{UB}

dp_Type:                0x7dc
dp_Arg1:                filehandle -> fh_Type

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
Removes all input from the user input line and rewinds the history.


This function uses the same thread as ACTION_SETLINE and ACTION_EXPANDLINE,
so handle with care! This aborts, too, the TAB expansion.


@{B}Note@{UB}: There is little use of this packet since quite the same can
be done by inserting ASCII 02, the rewind history keyboard function, in
the keyboard buffer with ACTION_SETLINE. Read the
@{"keyboard CSI list" link KeyboardList} for details.



@{CODE}
@{B}ACTION_SENDID@{UB}

dp_Type:                0x1f8

dp_Res1:                A pointer to the cn_Window structure, the
                        main structure of ViNCEd. See "vnc/window.h".
dp_Res2:                The size of this structure.

@{BODY}
Request a pointer to the ViNCEd main structure handling the current window;
this structure is documented in "vnc/window.h".

Do @{B}not@{UB} modify or read fields from this structure unless you've
called the vnc.lib LockWindow() function to arbitrate access. This is the
structure that must be passed in register a5 for most vnc.library functions.
C authors might prefer to use the link library SetCNWindow() function.



@{CODE}
@{B}ACTION_CURRENT_VOLUME@{UB}

dp_Type:                0x7
dp_Arg1:                filehandle -> fh_Arg1

dp_Res1:                A BPTR to the struct DeviceList, the
                        handler entry of ViNCEd.
dp_Res2:                set to NULL

@{BODY}
Sending this packet does not make too much sense anyways. This is actually a
file system packet that is only implemented for completeness.



@{CODE}
@{B}ACTION_DIE@{UB}

dp_Type:                0x5

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
Shutdown ViNCEd completely, if possible.

This packet tries to cancel this running handler task. However, this is only
successful if no streams are open, plus some other peculiarities. It returns
DOSTRUE if "it thinks" the handler could be shutdown. This is not
guaranteed, even in that case. If another packet is still in the input queue
at the time this packet was sent, the shutdown request will be canceled, as
well as by some other external occurrences.



@{CODE}
@{B}ACTION_FLUSH@{UB}

dp_Type:                0x1b

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
Refreshes the ViNCEd window. Useful if scrolling is delayed and something
important must be shown immediately.

This packet returns always DOSTRUE.



@{CODE}
@{B}ACTION_ABORT@{UB}

dp_Type:                0x200

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
Aborts all pending packets of the owner this packet was sent from. This
makes only sense if the packets were send asynchronously, see below.



@{CODE}
@{B}ACTION_SET_OWNER@{UB}

dp_Type:                0x40c
dp_Arg1:                mode, see below
dp_Arg2:                char * name

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
This packet is actually a filing system packet; it is here abused to set the
foreground ViNCEd @{"owner" link Owners}.

The "mode" parameter must be zero, the "name" argument points to a C-style
string (no BSTR, no BPTR!) of the name of the owner to be set to foreground.
This can be NULL or a pointer to an empty string to select the NULL owner.

This packet is used by the vnc.library calls "Foreground()" and
"Background()" for the @{"job control" link JobCtrl} functions.



@{CODE}
@{B}ACTION_LIST_TO_LOCK@{UB}

dp_Type:                0x202
@{BODY}
This packet is internal use only. Do not send it.



@{CODE}
@{B}ACTION_EXAMINE_OBJECT@{UB}

dp_Type:                0x17
@{BODY}
This packet is internal use only; it is intentionally undocumented.



@{CODE}
@{B}ACTION_EXAMINE_NEXT@{UB}

dp_Type:                0x18
@{BODY}
This packet is internal use only; intentionally undocumented.



@{CODE}
@{B}ACTION_FREE_LOCK@{UB}

dp_Type:                0xf
@{BODY}
Internal use only.



@{CODE}
@{B}ACTION_COPY_DIR@{UB}

dp_Type:                0x13
@{BODY}
Internal use only.


@{CODE}
@{B}ACTION_LOCATE_OBJECT@{UB}

dp_Type:                0x8
@{BODY}
Internal use only.



@{CODE}
@{B}ACTION_IS_FILESYSTEM@{UB}

dp_Type:                0x403

dp_Res1:                DOSFALSE
dp_Res2:                error code, set to zero.

@{BODY}
Check whether ViNCEd is a filing system. Answer is "no".



@{CODE}
@{B}ACTION_SET_COMMENT@{UB}

dp_Type:                0x1c
dp_Arg1:                set to NULL
dp_Arg2:                set to NULL
dp_Arg3:                set to NULL
dp_Arg4:                BPTR to BSTR

dp_Res1:                success code, DOSTRUE or DOSFALSE
dp_Res2:                error code

@{BODY}
This sets the window title to the supplied string; this string may contain
all control characters found in the @{"window title" link Title}.

@{B}NOTE:@{UB} This packet is left over from the "ConMan" handler. You
should better use the documented @{"Esc sequence" link EscList} "ESC ] 2;"
to set the window title.


@{CODE}
@{B}ACTION_TABHOOK_RETURN@{UB}

dp_Type:                0x802

@{BODY}
Internal use only. Do not send.


@{CODE}
@{B}ACTION_SEND_CHARLINE@{UB}

dp_Type:                0x803

@{BODY}
Internal use only. Do not send.


@{CODE}
@{B}ACTION_GET_DISK_FSSM@{UB}

dp_Type:                0x1069

dp_Res1:                NULL
dp_Res2:                ERROR_OBJECT_WRONG_TYPE

@{BODY}
This packet is used for filing systems and should return the file system
startup message. Since ViNCEd is no filing system, this packet fails.


Other goodies:

ViNCEd supports so called "asynchronous packets". These are packets not
delivered by the DoPkt() function, but build by the vnc.library, put into
the input queue of ViNCEd, that return immediately and that you can forget
about. The action they perform is delayed and they get executed whenever
ViNCEd has some time. These packets are sent by the vnc.library function
"SendAsyncPacket()". Check the autodocs for details; do @{B}not@{UB} attempt
to roll these packets on your own.

Just for completeness:

These packets are identified by setting the bit 31 of dp_Type to 1.



Owner identification:

ViNCEd identifies the owner a packet was sent from by the dp_Port reply port
in the DosPacket structure. ViNCEd does not provide a single port packets
are collected from, but one port per owner. That means especially that
@{B}you do not get@{UB} the address of the handler task if you subtract 0x5c
from the address of the port, as mentioned in Ralph Babel's "Guru Book".
This is definitely one of his lesser smart ideas...


The method which should be preferred is to check whether mp_Flags is
PA_SIGNAL, then read the "mp_SigTask" field of the port, which will always
point to the handler managing the port.


@ENDNODE
@NODE Owners "What is a ViNCEd owner, please?"
@TOC ProgToc
@{B}What are owners?@{UB}


Owners are groups of processes sharing the meaning of foreground and
background. A set of processes, called one owner, can be set to background,
i.e. set to receive no user input and can't print to the console, while a
second is put to foreground to hear the users commands. At least one owner
is always present: This is the NULL owner, setup once you open a ViNCEd
stream.


Owners not only share the foreground/background property, but also one
"thread" of the multi-threaded ESC/CSI sequence parser. ViNCEd cannot be
confused by garbled ESC-sequences that come from more than one process.
(Yeah, like a real file system this part of ViNCEd is multi-threated!)



@{B}How are "owners" identified?@{UB}


This is done by another new feature, "named CONSOLE"s. If a program opens a
new handle to the current console window, this is usually done by the file
name "*", or "CONSOLE:" under 2.0 and up. The name "*" will open a stream to
the owner the opening process is already part of. "CONSOLE:", however, will
identify the NULL owner.

To create a new owner that can be distinguished from the default one, use
the named consoles. Open a path like
@{CODE}

CONSOLE:name

@{BODY}
where "name" is some unique name used to identify your process or process
group. If not already created, a new owner will be constructed by ViNCEd,
and your process will be added to this owner. As a default, this new owner
is not put into foreground, to do this use the vnc.library functions
"Foreground()" and "Background()". They receive as arguments the stream
resulting in the open call.



@{B}Which owner do I get when I open a unnamed console?@{UB}


This depends on:

1) whether you open your stream with "*" or with "CONSOLE:"

2) The setting of your processes "pr_ConsoleTask"s field.


If you choose the name "CONSOLE:" you get always the NULL owner that
is created every time a new ViNCEd window opens - and that is usually under
the control of the shell.

If you choose the "*" name, the owner belonging to the controlling
console of your task is used. If opening a new owner, put the contents of
the file handles "fh_Type" field into "pr_ConsoleTask", and every stream
opened with "*" will belong to the new owner.

The following code segment opens a new file, creates a new owner, puts it
into foreground and sets the controlling terminal to the new owner:


@{CODE}

BPTR stream;
struct Process *myproc;
struct MsgPort *owner;


        stream=Open("CONSOLE:myowner",MODE_OLDFILE);
        if (stream) {
                myproc=(struct Process *)(FindTask(NULL));
                owner=((struct FileHandle *)(BADDR(stream)))->fh_Type;
                myproc->pr_ConsoleTask=owner;
                Foreground(stream);
        }

@{BODY}


Just for the case you missed that: Creating a new owner does not bring this
owner in foreground, and printing to that owner without further preparation
will suspend, i.e. halt you process. You have to bring it to foreground
FIRST. As a side effect, all other owners are then in background, and hence
even the shell can't trash your outputs.


Another remark: The message pointer called "owner" in the code above is not
really the ViNCEd-Owner structure, but if you send your packets to that
port, they get identified with the right ViNCEd owner.




@{B}What actually happens when I press Ctrl-Z?@{UB}


A new named owner with a unique name is created by opening a named console
like above, it is send to foreground, and a new shell process is forked with
the terminal process set to the new stream.


A second remark: This job control is still in a somewhat "experimental
phase". ViNCEd tries to do this as safe as possible, and for that reason it
is not possible to interrupt a program with Ctrl-Z if it is in an "unstable
phase" of working. The job control never caused a crash on my system, but it
is still a bit picky about the "stability" of the interrupted process. If
you have better ideas how to do this stuff, have a look at the vnc.library,
especially the entry point "CtrlZSuspend()". Write better
code and patch the library, if you can!

@ENDNODE
@NODE GURUS "List of Gurus thrown by ViNCEd"
As every shared library, ViNCEd can produce as a last help, software
failures (so called "Guru meditations"). They all start with the ID

0x1e000000

and above. This might be a bit unusual to a library if you read how these
failure codes should be constructed, but it I considered converting ViNCEd
into a device as a replacement for the console.device.


Here's the list:


@{CODE}
0x1e000005      ViNCEd could not find a owner that has to be removed in its
                hash list.
0x1e000008      The ViNCEd library open semaphore is damaged.

0x1e01000e      The message queue lacks memory.
0x1e010001      No memory for IO structures.
0x1e01000f      ViNCEd failed to create the VNCClip.supervisor.
0x1e018005      Somebody tried to free memory not under control of the
                ViNCEd memory manager.
0x1e038002      ViNCEd could not open the graphics.library.
0x1e038003      ViNCEd could not open the layers.library.
0x1e038004      ViNCEd could not open the intuition.library.
0x1e038007      ViNCEd could not open the dos.library.
0x1e138007      The PostRemove() procedure could not open dos.library.
0x1e038009      ViNCEd could not open the icon.library.
0x1e03800c      ViNCEd could not open the utility.library.
0x1e038014      ViNCEd could not open the gadtools.library.
0x1e038019      ViNCEd could not open the workbench.library.
0x1e03801e      The handler part of ViNCEd failed to open the vnc.library.
0x1e038204      The ButtonTextClass could not be created.
0x1e048035      ViNCEd failed to open the input.device.
0x1e048011      ViNCEd failed to open the console.device.
0x1e060001      ViNCEd failed to install its input handlers.
0x1e060002      ViNCEd failed to remove its input handlers.
0x1e060003      Qpkt-failure: ViNCEd send a request to the timer device but
                received a different one.
0x1e060004      The VNCFiler.supervisor received a command from a window it
                does not control.
0x1e060006      The VNCFiler.supervisor received an illegal command.
0x1e060016      The VNCFiler.supervisor received an invalid message.
0x1e060013      Qpkt-failure: FindCNWindow received not its own message.
0x1e060023      Qpkt-failure: DoAsciiData received not its own message.
0x1e060026      A required TABHook packet was not available.
0x1e060033      ViNCEd received an invalid ACTION_TabHookReturn packet.
0x1e070000      The VNCClip.supervisor failed to allocate a signal bit.
0x1e070017      The VNCSaver received an illegal command.
0x1e071000      The startup code of the VNCFiler failed.
0x1e071003      The startup message to the VNCFiler.supervisor was illegal.
0x1e080002      ViNCEd found an alien gadget in the windows gadget list and
                removed it accidentally.
0x1e08000f      ViNCEd found an illegal free mem of a dynamical node.
0x9e098204      The ButtonTextClass can't be closed.
@{BODY}

@ENDNODE
@NODE Goodies "ViNCEd goodies"
@TOC ProgToc
ViNCEd is written as a shared library, the vnc.library, which is open to
all users. A ".fd" file and the necessary link libraries are included. This
library contains functions to set and read the preferences of ViNCEd, as
well as controlling various ViNCEd internas as the
@{"job control" link JobCtrl}. Other functions are "patchable hooks" -
future enhancements might patch in here, as for example a custom TAB
expansion or a custom keyboard parser.


It is quite tricky to write a handler that does not reside in L:, but is a
shared library, and as such, is expungable. The vnc.library automagically
mounts itself as NEWCON:, VNR: or VNC: if it gets loaded, and it
automatically removes the handler from the dos device list if the library
gets expunged. Thus, ViNCEd is one of the rare handlers that are expunged
automatically if the system memory gets low.


Together with each window comes not only a handler process named by the
device name; but, if needed, a process that controls the tab expansion and
the job control, together with all other actions that are needed to interact
with the DOS. A usual handler itself can't perform DOS-I/O. A second
supervisor process is started by the library; the VNCClip.supervisor handles
the clipboard and is a smarter replacement for the usual ConClip, which is
no longer needed if work with ViNCEd. As a second job, it is also
responsible for re-loading the preferences and installing them into the
window.


Since ViNCEd does all the window handling by itself, all windows are by
default simple refresh windows. This slows down the scrolling if a ViNCEd
window is partly obscured. If you are a bit picky about this, you might want
to choose the
@{"SMART" link Op_SMART} @{"window path" link OpenPath} option.


ViNCEd knows a lot more @{"DOS packets" link PacketList} than the old CON:
handler; you may SEEK and FLUSH inside them, and the (unofficial) ARexx
packets QUEUE and PUSH are supported as well. Most "ConMan" extensions are
available as well, except for PIPE support which should really be
implemented thru the PIPE: handler instead.


ViNCEd supports @{"named consoles" LINK Owners}, which are a part of the
unique @{"job control" LINK JobCtrl} mechanism. All so called "owners" are
mostly independent of each other, may receive different
@{"input events" link ReceiveCsi}, even in "cooked mode". Timer events work
as well, unlike with the CON: handler.


ViNCEd windows can be opened on their own screens by giving special
arguments to the @{"window path" link OpenPath}, making tools like
"ScreenShell" useless. The colors, font and the monitor ID of this screen
can be setup by the @{"prefs editor" link SETVNC_WINDOW_1}.


ViNCEd supports special control characters in the window and screen title,
to display the result codes and some more information about shells running
in ViNCEd windows. Check the @{"title string" link Title} section for
detailed information.


The iconification gadget of ViNCEd is now replaced by an object of a public
gadget class called "tbiclass" if a public class of this name is
available. This should make it easier for GUI patch programs like SysIHack
or MCP to replace this gadget by a custom gadget. "VisualPrefs" is the first
program that supports this boopsi class and customizes ViNCEds gadgets. For
details, check the "includes" drawer of this distribution. ViNCEd does now,
too, support the external "toolbutton.image" class and loads it on startup.


I regard this as the "cleanest" solution that works without patching any
system function at all, so please make use of it (and dump KingKong...)


ViNCEd uses smart internal memory management functions to avoid
fragmentation of your system memory as much as possible. The memory manager
of ViNCEd is "dynamic" in the sense that it does not only use memory pools,
but also relocates memory blocks within these pools if required; therefore,
memory blocks will be "moved" thru the memory to reduce fragmentation. Up to
my knowledge, something like this hasn't been tried before. As you see, this
works stable since Version 1.06 of ViNCEd.


@ENDNODE
@NODE SetVNCGoodies "Goodies of the SetVNC program"
@TOC ProgToc
The complete configuration and support of ViNCEd is done thru one single
program, @{"SetVNC" link SetVNCToc}. There's no need to mess your C:
directory with tons of tiny files, one is enough.


SetVNC contains, too, the @{"user interface" link SetVNCGui} for the
preferences editor; this interface doesn't use any big external GUI library
as MUI or other horrors (a 200K GUI for a 64K program?). It's fully font
sensitive; it doesn't even require "gadtools" which is too unflexible for
what is needed. The GUI supports online help, you may always ask for
instructions if you got stuck.


Since most of the SetVNC functions aren't needed all the time, the program
is "overlayed", i.e. only the part needed is loaded into memory. This helps
conserving memory and avoids disk trashing, especially on "low end"
machines.


SetVNC offers options to save the screen and history buffers of ViNCEd in a
fully system-friendly way, without the requirement for any hacks.

@ENDNODE

@REMARK FAQ
@NODE FAQ "Frequently asked questions"
@TOC Main
This section contains frequently asked questions about ViNCEd. In case of a
problem, please study this chapter first; I'm easely annoyed by answering
these questions over and over again. Expect an "angry reply" in case you ask
any of these again...

@{CODE}
@{"ViNCEd seems sometimes to hang" link FAQ_HANG}
@{"How do I avoid moving the cursor by the cursor keys?" link FAQ_NOCURSOR}
@{"How to run the TAB expansion with the TAB keys?" link FAQ_TABTAB}
@{"How to avoid cursor movements on scrolling?" link FAQ_NOSCROLL}
@{"I don't want to be able to set the cursor with the mouse" link FAQ_NOPOSITION}
@{"I don't want to be able to move the cursor into the prompt" link FAQ_NOPROMPT}
@{"ViNCEd messes up my output" link FAQ_MESS}
@{"The TAB expansion does not work!" link FAQ_TAB}
@{"SetVNC doesn't save the preferences." link FAQ_SETVNCPREFS}
@{"How to setup ViNCEd as a VT-220 terminal?" link FAQ_VT220}
@{"Is it possible to run a ssh in ViNCEd?" link FAQ_SSH}
@{"I don't like the iconification gadget image" link FAQ_ICONIFY}
@{"For terminal usage, ^C isn't sent over the stream." link FAQ_TERM}
@{"How to turn off the horizontal scroller in the window?" link FAQ_SCROLLER}
@{"How to avoid that ViNCEd prints text into the right window border?" link FAQ_BORDER}
@{"I can't invoke the online guide!" link FAQ_GUIDE}
@{"I don't want to keep the icon of the online help" link FAQ_NOICON}
@{"Customizing the iconification icon does not work" link FAQ_ICONICON}
@{"The TAB expansion doesn't match files" link FAQ_EXECMATCH}
@{"Iconification doesn't work any more" link FAQ_NOICONIFY}
@{"The TAB requester no longer shows up" link FAQ_NOTABREQUESTER}
@{BODY}

@ENDNODE
@NODE FAQ_HANG "ViNCEd seems sometimes to hang"
@TOC FAQ
ViNCEd seems sometimes to "hang" if I press
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}.


ViNCEd doesn't hang, for sure. What most likely happened is that you've
typed rather fast and haven't released the "Shift" key yet when pressing
@{FG Background}@{BG Text}Return@{FG Text}@{BG Background}. The
@{FG Background}@{BG Text}Shift Return@{FG Text}@{BG Background} keyboard
combination is, however, @{"bound" link KeyBind} to the "Line Feed"
@{"keyboard function" link KeyFunction}. This function inserts just a line
feed but nothing else, it does not send any data to the shell for execution.


@{B}Solution:@{UB}

To avoid this, you could simply remove this keyboard binding with SetVNC,
using the @{"keyboard page" link SETVNC_KEYBOARD_1} of the preferences
editor.
@ENDNODE
@NODE FAQ_NOCURSOR "How do I avoid moving the cursor by the cursor keys?"
@TOC FAQ
How do I avoid moving the cursor by the cursor keys?


ViNCEd is a full screen editor, which means you're free to move the cursor
anywhere you want. Why do you expect that a shell works different that your
editor which uses the same keyboard layout? I'd consider this as an
improvement rather than a drawback, but whatever:


@{B}Solution:@{UB}

Reconfigure the keyboard, using the
@{"keyboard page" link SETVNC_KEYBOARD_1} of the preferences editor program,
@{"SetVNC" link SetVNCToc}. @{"Bind" link KeyBind} the cursor keys "Up" and
"Down" to the @{"keyboard functions" link KeyFunction} "History Up" and
"History Down" and save your changes.
@ENDNODE
@NODE FAQ_TABTAB "How to run the TAB expansion with the TAB keys?"
How to run the TAB expansion with the TAB keys?


The default preferences @{"bind" link KeyBind} the TAB expansion
functions to @{FG Background}@{BG Text}Ctrl TAB@{FG Text}@{BG Background},
mostly for backwards compatibility to CON: which does not know any form of
@{"TAB expansion" link TabExpand}. Furthermore, to enable the TAB expansion,
the window must be in @{"Shell Mode" link ShellMode} or any shell specific
extensions won't be available. This mode can be selected either by the
system preferences, on the @{"first shell page" link SetVNC_Shell_1}, or by
the @{"SHELL" link Op_SHELL} @{"window path" link OpenPath} argument.


@{B}Solution:@{UB}

Reconfigure the keyboard, using the
@{"keyboard page" link SETVNC_KEYBOARD_1} of the preferences editor program,
@{"SetVNC" link SetVNCToc}. @{"Bind" link KeyBind} the
@{FG Background}@{BG Text}TAB@{FG Text}@{BG Background} key to the
@{"keyboard functions" link KeyFunction} "Expand Path". More than one TAB
expansion is available, so you might bind other combinations to the various
TAB expansion functions as well.

@ENDNODE
@NODE FAQ_NOSCROLL "How to avoid cursor movements on scrolling?"
@TOC FAQ

How do I avoid that the cursor changes its position when I scroll the
window?


One of the ViNCEd concepts is to keep the cursor always visible on the
screen since you should know where you're typing. But whatever:


@{B}Solution:@{UB}

Turn on the "XTerm/CON: cursor mode" flag on the
@{"first editor page" link SETVNC_EDIT_1} of the preferences editor
@{"SetVNC" link SetVNCToc}, then save your changes.

@ENDNODE
@NODE FAQ_NOPOSITION "I don't want to be able to set the cursor with the mouse"
@TOC FAQ
I don't want to be able to set the cursor position with the mouse keys.


Some folks ask really strange questions, do they? (-: They DO NOT want to be
able to do something.... But anyways:


@{B}Solution:@{UB}

Turn on the "XTerm/CON: cursor mode" and the "Rigid XTerm cursor" flags on
the @{"first editor page" link SETVNC_EDIT_1} of the preferences editor
@{"SetVNC" link SetVNCToc}, then save your changes.

@ENDNODE
@NODE FAQ_NOPROMPT "I don't want to be able to move the cursor into the prompt"
@TOC FAQ
I don't want to be able to move the cursor into the prompt.


General comment about this one is the same
@{"as above" link FAQ_NOPOSITION}. I don't get it.
But since I was nagged to death:


@{B}Solution:@{UB}

Turn on the @{"Don't scroll into the border" link Fl_SCROLLBORDERS} flag on
the @{"first editor page" link SETVNC_EDIT_1} of the preferences editor
@{"SetVNC" link SetVNCToc}, then save your changes.

@ENDNODE
@NODE FAQ_MESS "ViNCEd messes up my output"
@TOC FAQ
ViNCEd messes up my output, as for example the dump of the "lha" program and
others.


@{B}Solution:@{UB}

Some of the preferences flags @{B}ARE NOT@{UB} compatible to shell usage,
these are marked as such in this guide. Do not play with settings you do not
understand, check this guide first. Especially, amongst the flags you
shouldn't set are the following:

@{CODE}
"VT-220 compatibility mode"
"Destructive DEL and BS"
"Insertion mode for DOS output"
"Notify DOS about Paste"
@{BODY}

All of them are found on the @{"second system page" link SETVNC_SYSTEM_2},
do not play with these.

@ENDNODE
@NODE FAQ_TAB "The TAB expansion does not work!"
@TOC FAQ
The TAB expansion does not work!


@{B}Solution:@{UB}

Grumpf! Yes, it does! It might work a bit different to what you expect,
however. But this is more or less a matter of the correct configuration. Did
you try the @{"TAB expansion tutorial" link TabExpand} first?

@ENDNODE
@NODE FAQ_SETVNCPREFS "SetVNC doesn't save the preferences."
@TOC FAQ
SetVNC doesn't save the preferences.


@{B}Solution:@{UB}

Yes, it does. However, @{B}it does not@{UB} change the preferences of the
windows already open. It is not possible nor desirable to change the
settings of windows already open since these settings are now under the
control of the programs running in these windows. However, the new settings
will be used for all windows opened after the new settings have been saved.

@ENDNODE
@NODE FAQ_VT220 "How to setup ViNCEd as a VT-220 terminal?"
@TOC FAQ
How to setup ViNCEd as a VT-220 terminal?


@{B}Solution:@{UB}

The VT-220 flag in the preferences editor alone is not enough. It's usually
required to set some more flags. Here's my selection:
@{CODE}

CSI >?26h       to send the ^C to ^F keys rather than to execute them.

CSI >?19l       to break the lines at the right window edge.

CSI >?15h       to enable seven bit answer back messages required
                by most termcap settings.

CSI >?13l       to disable scrolling into the display buffer.

CSI >?2h        to enable the VT-220 interpretation of the CSI
                sequences as well as the emulation of some VT-xxx
                illnesses.

@{BODY}
That's about it. To enable all at once, the following command could be used:
@{CODE}

echo "*E[>?26;>?15;>?2h*E[>?19;>?13l"

@{BODY}
For details what all this does, check
@{"the list of CSI sequences" link CsiList}.

@ENDNODE
@NODE FAQ_SSH "Is it possible to run a ssh in ViNCEd?"
@TOC FAQ
Is it possible to run a "ssh" (secure shell) in ViNCEd?


@{B}Solution:@{UB}

Yes, it is. You need some kind of a "TCP/IP" stack for your Amiga, as for
example Miami, the "ixemul" archive release 47.3 or better, including the
"ixemul.library" and "ixnet.library", and the "ssh" archive, of course.
Make sure all components are installed correctly, and check whether "ixnet"
support is enabled by the "IxPrefs" program. Furthermore, the "ssh" must
be in the command search path. Then place the following script in "S:runssh"
which will keep care of the necessary steps:

@{CODE}
setenv TERM vt220
stack 204800
echo "*E[>?26;>?15;>?2;>?11h*E[>?19;>?13l"
ssh -l <your user name here> -x <name of the remote machine>
@{BODY}

A remote login is now as easy as running this script from the shell.


The "echo" command above sets ViNCEd into strict VT-220 mode and enables
furthermore the "Emacs" editor mode which might come handy.

@ENDNODE
@NODE FAQ_ICONIFY "I don't like the iconification gadget image"
@TOC FAQ
I don't like the iconification gadget image.


@{B}Solution:@{UB}

There's a @{"documented way" link Boopsis} to replace it. For example, try
the "VisualPrefs" program which will allow you to reconfigure it. The ViNCEd
style is adapted from the unix "Mwm" window manager style I work all the day
with, that's why. This archive comes, too, with the tool button image, the
standalone class for the iconification and related gadgets in the window
title. Probably, try to put the file Extras/toolbutton.image to
SYS:Classes/Images.

@ENDNODE
@NODE FAQ_TERM "For terminal usage, ^C isn't sent over the stream."
@TOC FAQ
When using ViNCEd as a terminal driver,
@{FG Background}@{BG Text}Control C@{FG Text}@{BG Background} is never
transmitted to the terminal at the other side.


@{B}Solution:@{UB}

The problem is what to do with a ^C signal at all. The Amiga standard is to
abort programs, even if that program has turned the console into the "RAW"
mode, and not to deliver a ^C at all. The same problem appears for Unix, but
there's a system call available that controls the delivery of these special
keys, namely ioctl(). The Amiga Os doesn't support this technique, but
ViNCEd does: The following control sequence will turn off the signalling and
will deliver all control characters literally:


CSI >?26h               (see @{"the list of CSI sequences" link CsiList})


The following command in the shell will do that for you:


echo "*E[>?26h"

@ENDNODE
@NODE FAQ_SCROLLER "How to turn off the horizontal scroller in the window?"
@TOC FAQ
How to turn off the horizontal scroller in the window?


@{B}Solution:@{UB}

Check the @{"third window page" link SETVNC_WINDOW_3} of the
@{"SetVNC" link SetVNCToc} preferences program.

@ENDNODE
@NODE FAQ_BORDER "How to avoid that ViNCEd prints text into the right window border?"
@TOC FAQ
How to avoid that ViNCEd prints text into the right window border?


@{B}Solution:@{UB}

You can tell ViNCEd to break lines at the right window edge, check the
@{"first system page" link SETVNC_SYSTEM_1} of the preferences editor.
ViNCEd will @{B}NOT@{UB}, however, reformat the output in case the window
gets resized. This has certain reasons:


First, ViNCEd operates line-oriented, not paragraph-oriented. Breaking a
line at the right border breaks it there, and there are then two lines, not
one.


Second, this reformatting algorithm would be tremendously complicated.
There is quite a difference between a pure line editor as CON: and a full
screen editor as ViNCEd. I have to consider quite a lot of more cases than
CON: which can just re-print its buffer in this case. The same does not hold
for ViNCEd.


There are certain options and CSI sequences that define a scrolling region
and address absolute character positions on the screen. These CSI sequences
would be unuseful and their settings would become invalid in case the window
gets resized. After all, I doubt there is a way of reformatting the window
input AND staying compatible to the VT-220 standard. I've thought quite a
lot about this problem, but the current answer is "No". The current ViNCEd
version behaves quite a lot like the unix XTerm, and for good reasons.

@ENDNODE
@NODE FAQ_GUIDE "I can't invoke the online guide!"
@TOC FAQ
I can't invoke the online guide!


@{B}Solution:@{UB}

You didn't use the installer script that setup all variables correctly, or
changed your configuration or erased the icon of the guide. You should check
whether:


- The "Get Help" system macro on the
@{"third system page" link SETVNC_SYSTEM_3} is setup correctly. It should
say:
@{CODE}
"SetVNC Help\\r"
@{BODY}

- The position of the online guide is setup correctly. You can correct it
with the @{"SetVNC program" link SetVNCToc} on the
@{"first system page" link SETVNC_SYSTEM_1}, or by editing the
environment variable
@{CODE}

ENV:VNCGuide.Path

@{BODY}
by hand using an editor of your choice. It contains just the complete path
of the guide as text file.


- The icon (".info file") of the ViNCEd guide is available, i.e. a file
named "ViNCEd.guide.info".


- The default tool of this icon is setup correctly. Check this by selecting
the icon with the mouse, use then the "Info" menu item from the workbench.
The "default tool" should contain the complete path of a program that is
able to display "Amiga Guide" files, for example "Multiview".

SetVNC loads, if requested, this program and runs it to display the online
help.

@ENDNODE
@NODE FAQ_NOICON "I don't want to keep the icon of the online help"
@TOC FAQ
I don't want to keep the icon of the online help.


@{B}Solution:@{UB}

If you erase the icon of the ViNCEd.guide, SetVNC will no longer be able to
detect the default tool used to display the guide, so SetVNC can't be used
to invoke the guide at all. However, since the help itself is requested by
the "Get help" system macro on the
@{"third system page" link SETVNC_SYSTEM_3} of @{"SetVNC" link SetVNCToc},
you might want to adjust this macro to load the guide browser directly. For
example, you could enter a command like
@{CODE}

"Run >NIL: <NIL: Sys:Utilities/Multiview HELP:ViNCEd.guide >NIL: <NIL:"

@{BODY}
to launch MultiView in background.

@ENDNODE
@NODE FAQ_ICONICON "Customizing the iconification icon does not work"
@TOC FAQ
The icon I specified as iconification of the shell does not work.


@{B}Solution:@{UB}

The icon path given at the @{"fourth system page" link SETVNC_SYSTEM_4} must
be the complete, absolute path to the icon. For example, to use the
standard shell icon, specify:
@{CODE}

SYS:System/Shell

@{BODY}

@ENDNODE
@NODE FAQ_EXECMATCH "The TAB expansion doesn't match files"
@TOC FAQ
The TAB expansion doesn't match files if the "Executables" priority is set
to -128.


@{B}Solution:@{UB}

ViNCEd regards a file as "Executable" as soon as its "e" protection bit is
set. However, this bit is "traditionally" set for most files in the Amiga
filing system, hence most "files" will actually match the "Executables"
category and not "Files".

@ENDNODE
@NODE FAQ_NOICONIFY "Iconification doesn't work any more"
@TOC FAQ
Iconification doesn't work any more. What's wrong?


@{B}Solution:@{UB}

You run a program that requested the location of the "intuition window" in
which ViNCEd outputs its text, and this program did not return the
information properly. This means, since ViNCEd doesn't know whether this
entity is still required or not, it can't close the window to iconify it
without risking a crash by the program probably still using it.


The standard CON: handler has, by the way, the same problem: A window opened
with the @{"AUTO" link Op_AUTO} @{"window path" link OpenPath} argument
looses this ability as soon as the window is requested from outside.


To be able to iconify the window again, you've to release the window pointer
manually by running the command
@{"SetVNC FreePointer" link Ca_Freepointer}.

This command un-does the effect of exactly one allocation of the window.

For example, each invokation of the "More" utility must be matched by one
and only one call to "SetVNC Freepointer". The "More"
@{"script file" link Scripts} supplied in this package does this
automatically for you and should be used instead of running "More" directly.


The "ixemul.library" and all programs using "ixemul" are rather worse in
this matter. They do not only request the window pointer once per session,
but once per line read from or printed to the window, which means that a
huge number of allocations accumulate. A single "SetVNC FreePointer" is
truly not enough to cancel all these, but a
@{"SetVNC FreePointer All" link Ca_Freepointer} might do the job.


To big HOWEVERS:

- First, the "SetVNC FreePointer" command is not completely safe in the
sense that there's no guarantee that really no program is still using the
window pointer when this command is invoked. Running this command in the
wrong situation may cause crashes.

- Second, even "SetVNC FreePointer All" won't help with the ixemul "pdksh"
simply because this shell will print its prompt after having run the
command, and will therefore request another window pointer just after you've
released it. Urgh.
@ENDNODE
@NODE FAQ_NOTABREQUESTER "I do not get a TAB requester anymore"

Under AmigaOs 3.2 or better, the shell does TAB expansion itself, bypassing
ViNCEd. As the shell is designed to work over the network, or serial links,
it has no idea about windows, intuition and graphical user interfaces
whatsoever. As such, it does not provide requesters either.


However, you can enforce to disable this mechanism of the shell, and leave
TAB expansion to ViNCEd again. For that, set the following shell variable:

@{CODE}
set simpleshell on
@{BODY}


To make this a permanent change, paste the above line into S:Shell-Startup.
Note, however, that the ViNCEd TAB expansion is about to be phased out in
future releases.

@ENDNODE


@REMARK Misc Nodes
@NODE Thanks "Thank you folks! Credits page"
@TOC Main
Special thanks goes to HiSoft for DevPac 2.0 and to the Software -
Distillery for the linker BLink.


Thanks to Ernst Besser for continuously testing this proggy over years, and
thanks to Oliver Spaniol for lots of useful remarks.


Thanks to Goran Mitrovic for reporting various bugs in 3.17 and some useful
remarks. Not all have found their way to ViNCEd yet, but I'm working on it.


Thanks to Rodja Adolph for his useful remarks about the ViNCEd requesters.
Here they are, Rodja. Hope you like them...


Thanks for Albert Bertilsson for the great idea to let ViNCEd create its own
screens. This has been added to 3.20, Albert! Thanks to Christopher Naas for
reporting a bug in the SetVNC program, which has been removed in the 3.09
release, and again for an enforcer hint of 3.20, which has been removed as
well. To bad that I don't have a MMU. What a luck that Christopher is out
there to report the hits... (-;


Special thanks goes to Nick "NLS" Sardelianos. Most of the ideas new to
version 3.30 are up to him, and life will be definitely harder while he's
busy with military service. Thanks a lot, Nick! You considered such a lot of
options that I was unable to complete the 3.30 in time, and even now some
are missing, even though the 3.60 is getting very close....


Thanks to Aristotelis Grammatikakis, another guy with a lot of useful ideas.


Thanks to Georgia Pristo, for sending DW and reporting a problem with it -
plus more useful remarks.


Thanks to Steve Clark and Miles Willmek for additional ideas new
ViNCEd 3.40.


Thanks to all beta testers that helped me to find bugs! It has taken a while
to complete the 3.30 release, but has taken even longer without your work!


Thanks to Christopher Perver, Jochen Koob, Eric "Parsec" Spåre and Bernardo
Innocenti for additional ideas for the 3.41 release and bug reports.


Thanks again to Bernardo Innocenti for continuously "annoying" me about the
scroller gadgets until I finally updated the input handler. Thanks to Stefan
Sommerfeld for some other hints, especially for the gadget refresh. You may
now disable paths from searching - here's your will, even though I don't
like it. Why don't people accept new ideas and want still this old KingKong
behavour? Maybe for the same reason why they don't by PCs... :)


Thanks to Kevin A. Brown for additional ideas I added to the 3.50 release,
and to Martin Gierich for his comments, his support and his fine "PatchWord"
debugging tool I used for beta-testing. Thanks to Frederic Steinfels for the
idea with the colored cursor I was finally able to implement.


Thanks goes to Holger Jakob for reporting quite a lot of minor bugs of the
3.50 that are now removed. Special thanks goes to Timo Kaikumaa for allowing
redistribution of his UnixDirs program in the ViNCEd archive.


Thanks again to Bernie (Bernardo) for giving me the hint about the XTerm
block marking bug.


Thanks to Marcus Ekelund for reporting a serious bug in the V39 and for the
hard work translating ViNCEd to swedish. Cool job, Marcus!


Thanks to Massimo Tantignone for supporting customized ViNCEd gadgets
by his "VisualPrefs" program and for a very helpful conversation. If you
want to know more details about this customization or want to use these
gadgets by yourself, consider the "Boopsis_Readme" file in the "Include"
drawer.


Thanks again to Holger Jakob for reporting the AFS problem. I hope the
ViNCEd workaround for this AFS bug works now.


Thanks again to Frederic Jacquet and Adam 'DC1' Polkosnik for reporting
(both) the compatibility problem with "FALLBACK". That's fixed now in the
3.55.


Thanks to Peter Mattsson for the idea to open the window pre-iconified (so,
not to open the window at all.... :-)


I changed the limit of the review buffer from 1024 to 4096 lines, just to
please Marc Espie and his buffer requirements.


Thanks to Arto Huusko for ideas and improvements for the window "Maximize"
and "Minimize" functions, Amiga+ and Amiga-. These have been reworked quite
a lot.


Thanks to Wez Furlong for testing ViNCEd with the "VIM" editor; quite some
bug fixes in the ViNCEd CSI parser and line manager are due to his tests.
Furthermore, using the extended colors instead of bold and one of the scroll
modes are due to him.


A really big "thank you" to Walter Doerwald for testing the beta-releases of
ViNCEd for quite a while and for detecting lots of bugs in the early betas.
Would have been harder without your help.


Thanks again to Massimo Tantignone for providing the stand-alone toolbutton
image class, and for allowing me to distribute it together with ViNCEd.


Thanks to Andreas Mixich for the "PLAIN" window path argument idea.
Implemented! Thanks, too, for detecting a bug in the TAB expansion routine.


Thanks to Rüdiger Kuhlmann for reporting various bugs of the early 3.6x
releases, many VT-xxx incompatibilities I wasn't aware of, and other things.


Thanks to Frédéric Delacroix for his french translation and to Damir Arh for
his slovenian version of ViNCEd. Further thank goes to Samppa Rönkä for the
finnish translation and the ATO, and Magnus Holmgreen, for organization.


Thanks goes to Grant McDorman for reporting some additional bugs in the
VT-220 emulation that have been fixed by now.


The italian translation was written by Francesco Leoni and proof-read by
Francesco Mancuso, thank you for your support, folks!


Thanks to Constantinos Nicolakakis for reporting a problem of the 3.68 this
is now fixed.


Thanks again to Rüdiger Kuhlmann for reporting various bugs, and for
updating the ixemul library to support window iconification correctly.


Thanks to Tomasz Wiszkowski for converting the C style header files to
AmigaE include files and for providing a polish localization for ViNCEd.



A lot of thanks goes to the Os 3.9 translation teams of the ATO. This
project would have been impossible without your work:


The Italian translation team:

Stefano Guidetti, Marco De Vitis, Maurizio Lotauro and Andrea Monni,
updated by Luca Longone in 2022.


as well as the original translation, which was done by

Francesco Mancuso and Francesco Celli.



The Spanish translation was done by:

Alfredo Soro and Ezequiel Partid (proofreading)



Translation for the Nederlands performed by:

Dirk Harlaar



The Danish translation team:

Niels Bache, Ole Friis and Jacob Laursen.




The swedish translator - a new entry on the list after so many years:


Thank goes to Pär Boberg for fiding a couple of bugs and tackling the
swedish (Svenska) locale, and bringing it up to date. Unfortuantely,
the Os 3.9 locale sources were lost. Thanks, Pär, for bringing this
back to life.



Finally, thanks to all the beta testers for their time and for reporting
bugs (and hitting me for fixing them...).


Sorry to all the folks who reported bugs and I forgot to write your names
down. Ooops! You're still somewhere in my EMail, but that's about 50MB of
EMail I had to dig thru. Urgh! Uhm, just contact me again so I can add you
here.


        Thomas


@ENDNODE
@NODE Story "Version information"
@TOC Main
Now, that's quite a lot. ViNCEd is an old program, almost as old as ConMan
and much older than KingKong!


1.06    First working release. Named VNC "VeryNewCon". Not all control
sequences are parsed, some workaround for console.device. Finished in 1990.

1.12    and less: Many problems with cursor positioning and smart refresh
windows.

1.18    Line compressor completely rewritten.

1.24    Workbench 2.04 came out. Problems with scrolling under 2.0, still no
block operations.

1.25    First working 2.04, works very safe and stays unchanged for a long
time.

1.28    Last 1.xx release.

2.00    Almost everything rewritten. VNC gets now a library instead of a
resource.

2.01    Removed massive problems with block operations "Cut" "Copy" "Paste"

2.02    First working 2.0 release. Still somewhat beta (beta than nothing)

2.04    Problems with "Ed" and block operations. Internal Hook

2.05    Converting macros to the menu items did not work.

2.07    Marking of the line end was ugly.

2.08    Removed a lot of 1.xx trash.

2.09    Workaround for console.device bug implemented, Form Feed corrected
magic Help key.

2.10    Improved the LibInit procedure with useful alerts (-:

2.11    Removed ScreenToFront bug, new AutoSize SetVNC.

2.12    ConClip OpenCount, smart mount, NOICONS bug removed.

2.13    Menus get the right font, SetVNC keeps track of the title bar,
removed again some 1.xx trash.

2.14    Added FindCNWindow(), now used in SetVNC

2.15    Priority of semaphores corrected, menu size adjusted for tiny fonts.

2.16    Added Ctrl+Cursor keys.

2.17    Menu functions now BOOL instead of void.

2.18    DOS commands now send thru owner instead global port. Lot of updates
necessary, removed several bugs (sigh!). Break and owner handling now more
dynamic, workaround for "more" (close event expected without request).


2.19    Again, handling of the close gadget in raw mode updated.

2.20    Removed bug in erasing complete lines and bug in prop gadget
procedures.


2.21    Scroller get disabled; added another workaround: If the DOS moves
the cursor, user inputs are valid starting from this cursor position. This
simplifies the input of tables, and works somehow like the screen editor of
the Atari 800 XL.


2.22    Scroller disabling now much better, again corrected owner handling.


2.23    Lot of problems with owners, gofer does not work (WaitDosPacket is
broken). Rewrote owner system, private hash list for owners. Several days of
work. Found bug in rexxsyslib (WaitDosPacket).


2.24    And again owner problems with programs that do not open own streams.
Sigh. Corrected read & write. Will this stuff work now?


2.25    I knew it: Corrected owner handling once again. Should not make
problems again, but who knows? Again removed some obsolete procedures of
release 1.xx beta testing.


2.26    Added FilterInput, HandleKeys updated, and Hook procedure.
HandleKeys modified for TABHook. OwnerSemaphore added.


2.27    VNCClip.supervisor added for iff clips. ConClip is now obsolete.
Had lot of trouble with the library, found some bugs, esp. with memory
problems. vnc.library modified again, removed another (old?) bug in internal
Copy/Paste. TABHook stack enlarged, VNC needs at least 4000 bytes, esp. if
you run it with a debugger.


2.28    Trouble with ActivateWindow under Kick 1.2/1.3. Does not seem to
work better due to a bug in the 1.x libs. Again updated the TABHook to make
it working with a NULL lock (Now version 1.01). Forgot to remove option from
Makefile, which leaded to illegal hunk linkage.


2.30    Support for locale.library. Prefs are now loaded by the supervisor,
added OldOs flag. Removed bug in KillSuper, and unnecessary BSS segments.
BuildMenuStructs bug removed, can only seen with "MagicMenus". Again
problems with the f*cky owners, removed bug in AClose. When will this sh*t
work finally?


2.31    Minimal changes in the lib, new hook for AppWindow. Window size
depends now on the text overscan. But completely rewrote SetVNC (2.11). Help
now by AmigaGuide, own localization, TABHook program is now obsolete and
integrated into SetVNC. New feature: VNC is now an AppWindow (icons
welcome).


2.32    Added ALT open option, removed bugs in the parsing of double quotes.
(Leftover from 1.xx?) VNCNewWindow now own structure. LibInit and LibRemove
remain now in forbidden state, all asynchronous processes are done by the
supervisor. Failed to close timer device. This release works pretty well
now.


2.33    Removed minor bug in FindCNWindow. Could return TRUE if window was
not a VNC window. Caused a crash of SetVNC if called thru a AUX: window.
Calculation of cursor position wrong due to rounding errors of divisions.


2.34    Concealed mode handling updated - UserType/UserPenPair can't be
controlled from DOS any more - you have to use the structure, like it
should. SetVNC's TABHook unstands now double quotes and pathes with spaces.
Support for directory assigns added.


2.34/2  No new VNC release, but added the double TAB requester to the
TABHook code in SetVNC, which is now in release 2.15.


2.35    Support for NewLook menus of workbench 3.0 added, and removed two
tiny bugs. The compatibility workaround to console.device had an illegal
pointer, and another in the main code which only occurred if the blitter was
too slow. Added support for negative width and height in the open path,
window flags are now allowed in every position, to make ARexx working. Sort
of dump to place flags there, but want to stay compatible, so this is really
not my problem. Rewrote routine to start AmigaGuide, had trouble with
MultiView (needed PROGDIR:). I hate this program, it is very likely to
crash, esp. with animations. Removed another bug in the DOS module:
WAIT/AUTO windows that never opened actually got never closed.


2.36    Scrolling got faster, scrolled only used bitplanes like CON: in 3.1.
Lucky not too much trouble. Again removed a problem with window activation
under 1.2/1.3 OS.


2.37    The pattern of the inactive cursor is now static and no longer in
the TmpRas. This prevents some misprints while scrolling of obscured window
parts. Updated the edit buffer hack for table entering, parse position gets
updated if one erases or adds characters.


2.38    And again trouble with owners. Action_SetPort refused to accept a
port which it could not find a owner for. Starting with this release, the
official owner who opened the window gets this port. Not nice, but what to
do? The problem is, that you may share streams in AmigaOs.


2.39    Internal beta

2.40    Added rebuild delay.

2.41    Trouble with rebuild delay and "more", added scroll delay. Last 2.xx
release.


3.00    Finally started working with 3.xx. Rewrote complete parts of code,
esp. owner handling. This was too messy anyhow. Added REAL job control to
replace this mess. The TABHook gets now an integral part of the library,
called thru a vector. Added button gadgets, and nice tiny arrows at the
scrollers. Added VNCFiler.supervisor, displays requester. Removed multi
directory assign support, this should be part of the DOS and not of every
program. Will write a patch later on. The job control thru Ctrl-Z looks
really like a bad hack, but works astonishingly stable.


3.01    Added a lot of CSI sequences I found in XTerm, xwinshell, VT-220 and
much more. Still a bug in the TAB expansion, does not find the right
argument in the command line. I really thought I tested this... Added a
workaround for a bug in csh, sends an illegal CSI sequence and expects the
right answer...


3.02    Added support for borders. A lot of testing must be done, and all
the scrolling procedures must be rewritten.


3.03    Found a bug in one of the line insertion routines. I fix this one
now for the 3rd (4th,5th ?) time and it still does not work. Ugly.


3.10    Thought an iconify gadget could be a neat idea and added it. Lots of
work! Found a bug in the shutdown procedure of the VNCFiler. sigh!
Completely rewrote SetVNC, old code was a mess after five years of fixing.


3.12    Again some bugs in iconification. Added Job control to SetVNC,
really forgot I had to.


3.13    Help menu item did not work, and SetVNC did not save the guide path.
I though this worked, but...  Added "fork" script and the ability to suspend
owners, and removed a bug from Foreground and Background lib functions.
Forgot to count the NUL.


3.14    Job control in SetVNC updated, using now "other" for hard cases.
Probably should add some more options. Foreground and Background library
functions now got flags, too good I hadn't made this public. Added again two
hacks for compatibility with "Ed". It sends illegal CSI sequences not
compatible with VT-220 and XTerm. Removed crashing "Ed", leaves port with
unanswered Read request, I have to flush this manually. Thought I had this
trouble once before in one of the 2.xx releases and removed the patch cause
it looks so ugly. Updated testing of foreign menus. I wonder why intuition
did not crash?


3.15    Thought with 3.xx the owner handling finally works. Proved again
that I was wrong! ARRGHH! Fixing the "Ed"-problem added another bug.
Really silly, but I think THIS TIME I really made it... (hopefully).


3.16    Tiny bug removed from the window closing procedure. Switching the
window to RAW: mode canceled the AUTO and WAIT state completely and made it
impossible to close such a window. Removed some bugs in job control: Can't
send ARexx to background, crashed when disabling a stopped process and some
more. Found a bug in a "correction" of a cursor movement procedure. Sigh.
Fixed another bug: Graphic mask was calculated wrong if a single character
has to be marked in an empty line.


3.17    TabHook expansions are now sorted by type: Devices prior directories
prior files. Thanks, Olli, for the tip! The fix was quite easy and done in
five minutes.


3.18    Fixed a tiny bug in the Prefs correction routine. An empty macro
does no longer end the parsing of macros, but is accepted as a valid entry.
Found a tiny bug in the MatchFirst() function and added a workaround. Fixed
a bug in the SetVNC program that might cause a DeadLock on few machines.
Replaced the arrow gadgets and scrollers with Boopsi images, if available.
ViNCEd looks now O.K. with the new 3D look. Tested with SysIHack, SysI2,MCP,
Urouhack and works. However, no standard iconify gadget yet. Removed some
compatibility hacks for the console.device, since it does not properly
ignore unknown command sequences. Iconify gadget is no longer installed if
there's not enough room in the title bar. Fixed two additional bugs in the
Prefs correction procedure, and removed the creation of a lock to the window
on invocation of a macro. Added an additional check in SetVNC to prevent a
crash if a GadgetUp message from a non-SetVNC gadget is received. The prefs
flags did not set the gadget properties correctly on installation of the
prefs. Sigh!


3.19    Fixed a lot of bugs in the block operations with borders activated.
Looks like I forgot these to update in 3.00! Fixed another tiny bug in the
line compressor code. I added a "have to think about it" mark to it in 3.00,
but I never did. Sigh! Added two options for file requesters and a lot of
support stuff in the dos interface module. Had a lot of trouble to avoid
deadlocks between the VNCFiler and the dos handler and finally found some
use of the pr_WaitPkt pointer. Added a new cursor control mode, XTerm mode,
since some users requested it. Removed a bug in the set border routine that
might cause a harmless guru - ViNCEd waits now until intuition resized the
window. This works only in 2.00 and up, using a delay for 1.xx. Removed an
unnecessary flicker in this routine as well. Added some options to the menu,
and removed some never used. Made the "Smart Close" even smarter.


3.20    Added support for private screens which can be build on request, and
fixed a bug that caused SetVNC to crash if no vnc.library was present. Fixed
one bug in the guide about the WINDOW path argument.


3.21 to 3.23    These have been beta-releases. They were never available
thru AmiNet. One enforcer hit while scrolling should be gone now. The open
path argument parsing was a bit buggy and caused compatibility problems with
various programs. The "Next Screen to Front" menu item caused hangs with
some additional software. The ConMan "L" option was broken and turned on the
seven bit mode accidentally. The TAB expansion routine was a bit buggy with
expansion of an empty string, and expanded wrongly if the cursor was placed
behind the string. The ordering of the "ICONIFY" open path argument was
relevant. The ViNCEd TAB expansion requester did not allow to enter
directories. The Boopsi routines were buggy and wasted CPU time. Cursor
position selection with the mouse locked the RAW window emulation. As you
see, a lot of bugs have been found.


3.30    The new final release. New stuff added to this and the previous beta
releases: Window @{"title" link TITLE} control codes, new @{"CSI sequences" link CSILIST},
a better ViNCEd expansion @{"requester" link TABExpand}, better custom
@{"screen support" link OPENPath} by more open path arguments,
@{"icon drop" link ShellMode} qualifiers, default screen mode and font
support. A lot of bugs have been removed that I added to the beta releases.
The incompatibilities with DW, MWM and other programs are gone - I hope
completely. A flag was added to search only the most useful part of the path
in @{"TAB expanding" link TABExpand} file names, plus some other features.
Added the "KEEP" path option, updated the dynamic memory manager - faster
and uses less memory now. The guide location is now kept in an environment
variable as well.


3.31    Improved the ViNCEd requester once more. There's now no reason to
use the standard requester any more. Added a hack to allow VirusWorkshop to
check the ViNCEd archive without trouble - manual installation is now no
longer possible, due to the encoding of SetVNC. Be warned!


3.32    The BOOPSI scrollers got not updated if the number of visible lines
changed. This bug was hidden by another bug in earlier releases. Sigh.


3.33    Internal beta: Found another bug leftover from 2.xx in the line
compressor. The settings menu item "Expand with TAB" did not work properly.
Added the private CSI sequence "CSI SPC s" for CON: compatibility and ANSI
colors. Enhanced the window sizing algorithm to make smaller windows
possible. Added asynchronous type-ahead, more flags to control the
prop-gadgets, better scrolling, hard cursor scrolling stop, path keyboard
control sequences, more flags for TAB expansion, shrunk the minimal size of
a window and added another check for the window size, updated jump
scrolling, changed the order of the buttons. Added numerical key pad
cursor control. Again a lot of work was done!


3.40    Removed an enforcer hit of the 3.33beta2 and one duplicate entry in
the library functions. Removed another tiny bug in the boopsi handling.


3.41    The "ESC c" control sequence reset the ANSI mode to the settings
stored in the prefs, not to the mode set in the window title - removed. The
set render command for color nine did not work. Keypad-mode and Alt-movement
conflicted. Added CSI sequences and flags to the prefs to set the ANSI
coloring to something different than default. The complete color addressing
has changed a bit. As a side effect, screen colors set with CSI V WILL
re-appear if the window gets re-opened after an iconification. The old 3.40
dropped these colors (unlike what it should do). Fixed another bug with gfx
boards: The color of marked blocks was different at marking and re-printing
time, due to the uncertain behavour of the COMPLEMENT drawing mode for gfx
boards. If the screen mode is set to CHUNKY, ViNCEd does no longer try to
speedup the block marks with COMPLEMENT drawing, but reprints them. This
might be a bit slower, though. Removed a bug in the raster mask calculation
routine that might have caused graphics trash for marked and scrolled line
feeds. Added a flag to keep the bottom of the window always aligned to the
bottommost line in the display buffer. Added a flag to ignore icon ".info"
files in the TAB expansion unless you ask for them explicitly. The
TAB-Expansion cursor placement policy changed a bit, I think to the better.
Added a flag to exchange Shift+ALT Del/BS with ALT Del/BS. ViNCEd installs
now a no-op backfill layer hook if possible, hence giving a faster and
lesser flickering refresh. Added another "Edit" and "Shell" page to SetVNC
to keep the new flags introduced to 3.41. Added the "NumL" key function.


3.42    Removed a bug in the gadget refresh. Forgot to handle this correctly
if the prefs get updated. Inserted additional explicit gadget refreshes. The
ViNCEd input handler reads now mouse move events if enough CPU power is
available, resulting in much smoother scrolling. Fixed a tiny feature of the
WaitForChar() function. It did not operate like it should if an EOF signal
is pending. Fixed! The guide contained a bug :) The explanation why TAB
expansion in kshells did not work was wrong. Sigh. Removed a problem from
one of the refresh routines that failed to operate with the no-op backfill
hook introduced in 3.41. Added the "harder soft reset" with the Shift
key hold down.


3.43    The CloseScreen routine for public screens was broken - ViNCEd was
from time to time unable to close its own public screen. Added the "Jump to
Next Screen" menu item and a flag to disable the C: path searching at all.
The TAB expansion flags parsing was a bit messed up. Everything worked, but
the flags had an interpretation different from what the guide said. This is
fixed now. The font loader was buggy - called the ASCII string to binary
converter with a wrong argument. Fixed.


3.44    This one was a public beta release. I rewrote the clipboard handling
completely, added the colored cursor and the TAB expansion. Another new
feature are the buffer I/O related functions in the project menu.


3.45    Another public beta. Removed quite a lot of bugs of the 3.44, and
just another two bugs left over from 3.43: The line allocation routine had a
major problem (urgh!) and the color arbitration logic was somehow messed up.


3.50    Final checks: Added another string to the localization, removed a
bug in the sizing of the scrollers (problems with MCP now fixed). Removed a
bug in the 1.3 support procedure. Changed the prefs style saving/loading
that seemed to be unclear to certain people, added another flag to disable
ViNCEd's feature to lock the window on a mouse click. VNC: is now a legal
path except for the antique 1.2 and 1.3 versions of the Os due to a bug
that used to be in the Mount command.


3.51    The history search is now case-insensitive, I guess it's more useful
this way. Made also some minor changes in these routines. Another change is
that a wrapped-around in the TAB expansion list inserts now a blank
argument, to inform you about what has happened. Fixed a bug in the XTerm
mode support - the arrow gadgets near the scrollbar did not work like they
should. Softlinks are now supported by the TAB expansion logic. Removed a
bug in the window deactivation and in the block marking procedure. ViNCEd
tries now to abort a running ExAll() call in the TAB expansion. Removed some
mess in the insertion routine threatment of the marked line end. Removed a
bug in the block marking routine that caused sometimes a line to be inserted
on top of the screen. Removed a bug in the color arbitration routine that
allowed identical colors for complemented colors. Updated a part of the TAB
expansion routine - it corrects now the case of the device and directory
names.


3.52    Removed a bug in the TAB expansion that refused to work with "/" and
":" directories. Added the "RIGIDCURSOR" flag. Removed a bug I added by
accident to the 3.51 and another refresh related feature. Scrolling while
marking the text was impossible before, fixed.


3.53    Added the duplicates history flag, changed the lock management when
dragging blocks. Added forward/backward arrows in the Prefs editor and the
IfVNC shell argument. The window gets now activated if an icon gets dropped
on top of it. Changed again the TAB expansion a bit: If a unique device or
directory is found, the double TAB requester will directly go into it.
Changed the full screen refresh a bit, I hope to the better. Should be more
effective now. Fixed a bug in the Boopsi-Iconify support - VisualPrefs works
fine now and added even more Boopsi-fication support. Added a workaround for
a serious bug in the V39 ExAll/ExAllEnd() routines which supports ExAllEnd()
for V37, too! Renamed the "iconifyimageclass" to "tbiclass". Check the
"Boopsis_Readme" in the "Include" directory.


3.54    Updated the ExAll() workaround because it conflicted with a bug in
AFS. The replacement code for the buggy V39 ExAll() ROM code was actually
taken from SetPatch, but it turned out that this implementation caused
problems with AFS; the reason is a bug in the AFS Examine() and ExNext()
handling - sigh. Thanks, Holger, for reporting. Rewrote the communications
routines between the TABHook and the handler process. The old implementation
was a strange mixture of synchronous and asynchronous message passing that
caused a lot of problems. The new implementation is a lot less messy.


3.55    ViNCEd can now be mounted as RAW console handler. A "SetVNC Mount
Override as RAW" will work fine now. Mountlist users might set the "Startup"
argument to "1" to get a raw window. Added the "ICONIFIED" window flag.
Changed the default from "NOFALLBACK" to "FALLBACK" to prevent problems with
certain programs. Added the "NOFALLBACK" option. Removed two minor bugs in
the window open routine (which is by far too big anyways due to the mess of
"optional options"...) Added another cursor shape that is used when the
output is locked, used by ^S.


3.56    Added the ^R and ^B keyboard commands, fixed a bug in the "ViNCEd
TAB expansion" requester, added "*" as possible screen name to refer to the
frontmost public screen. Added a kludge to make the ARexx command LINES()
working. (Messy, messy!) The history functions work now a bit different.
They don't longer move the cursor any more. Might be useful for ^R.


3.57    ViNCEd ignored multiassigns to the command directory C:. ViNCEd
locks now the layer to get the window dimensions. The "Close Window" RAW
event is no longer included if you open a ViNCEd window in RAW: mode. The
ACTION_SET_FILE_SIZE packet returns now the proper return value (-1 instead
of 0), the mn_ReplyPort field of the packets send to ViNCEd is no longer
trashed. Improved parts of the packet handling code on the way. Added
another bunch of packets, for example AREXX compatible ACTION_DROP. ViNCEd
does no longer use fh_Arg2 for identification and leaves that field blank.
ACTION_SET_COMMENT can be used to set the window title now, just like
ConMan (Try 'Filenote CONSOLE: "A nice feature"'). Removed two bugs in the
suspend (^Z) feature, one minor, one serious... Urgh!


3.58    Removed another bug in the TAB expansion requester - forgot to save
back one register. This might have caused crashes in certain situations.
Changed the format of the version string slightly, to avoid problems. ViNCEd
will again install itself as an AppWindow in public screens, to allow icon
drop into the window if started from DOpus.


3.59    Removed a bug in one of the TAB expansion routines that caused a
conflict with SnoopDos.


3.59a   A release that was never published. It just increased the stack size
of the TAB expansion to avoid conflicts with certain patches.


3.60    Uhoh, writing all changes down would really break this chapter. So,
for short: New Features: ASCII preferences, configurable keyboard,
configurable TAB expansion functions (six or 24, up to how you count),
including a set of priorities and flags for each function. More CSI
sequences, more flags. Huh, lots of bug fixes of bugs in the 3.59 version,
as for example errors in the line manager, the character insertion routine,
the block marking routine, misinterpretation of some CSI sequences. More
options on the window path, added window default title in the preferences,
fixed bugs in the interpretation of printed backspace, added more control
sequences for the window title, the location of the preferences file was
changed, bugs in the icon drop routine. Included a new and reworked guide
(this one), included a FAQ, a new index. Most of the nodes have been
rewritten, one of the reasons for the more than half a year of delay.


3.61    Added more support for Massimo's standalone toolbutton image class.
ViNCEd will now try to open the "titlebar.image" and use this if it is
available. This image class will customize ViNCEd's macro buttons as well as
the iconfication gadget in the title bar. The class itself IS NOT required
if you're running VisualPrefs anyhow. More on how this works in Massimo's
docs. Added the "PLAIN" window path argument, idea by Andreas Mixich;
thanks!


3.62    Fixed a bug in the TAB expansion routine that used the wrong
definitions, thanks again to Andreas Mixich. Changed the Ctrl-C break logic
a bit, it looks now like the original CON: method, even though that doesn't
make me happy. Fixed a possible bug in the SetVNC program that might have
crashed if the guide file is shut down. Added "Save To" and "Load From"
gadgets to the new second "About" page of SetVNC.


3.63    All keyboard sequences use now really the seven bit variant ESC
[ instead of CSI if the seven bit mode is enabled. "Toggle ESC" does no
longer answer the ViNCEd "Toggle ESC" sequence in raw mode, but produces a
literal ESC 0x1B in the output stream. However, in order to simplify the
parser of additional programs, the ENGLISH mode will always send complete
CSI or ESC sequences, therefore a program will hear "Toggle ESC", "Insert
ESC" or "Insert CSI" keyboard sequences directly in the ENGLISH mode. ViNCEd
does now keep a separate flag whether a line was broken on the right window
edge or not and will not insert a line feed if these lines are copied to the
clipboard. The sequences reported for ^C thru ^F were incorrect in RAW mode
with the "direct report" flag enabled, fixed. The line wrapping algorithm
for VT-xxx was broken. CSI E and CSI F did not take arguments. Cursor
movement ignored scroll lock and word wrap disable. Backspace wrapped around
in VT-220 mode. ICONIFIED open path flag did not work due to a "bug fix" in
one of the beta versions. Added a new flag >?15h to restrict reported
sequences to 7 bit modes. Thanks goes for a lot of that to Rüdiger! Great!
Updated, too, the SetVNC once again. This time, the second keyboard page was
reworked to be able to browse the keyboard bindings made so far. To see the
current keyboard binding, go to the second page, select a function from the
list and use the "« Prev Key" and "Next Key »" gadgets to see all keyboard
sequences bound to the selected function. Incremented the SetVNC version to
V41, for consitency with the main library.


3.64    Fixed only a minor glinch with the scroll lock flag and gadget
activation. Thanks to Holger Jackob for digging this out. Except that, and
including the up-to-date locale sources, nothing needs to be changed.


3.65    Directories of MS-DOS type filing systems are no longer cached
because CrossDos doesn't update the volume date correctly. Included the
NamedConsoleHandler which offers a workaround for a feature in the pre-3.0
Os. Ctrl-Z works now for Os 2.x, too, provided this handler is installed.
Added the "BACK" window open path option, lowered the the minimal timing
values. Because again nobody seem to read this guide, the "Raw control" bit
CSI >? 26h defaults now to "on", i.e. all control characters are send
literally in RAW mode and are not executed. As an additional hack, ^C to ^F
execute always in CBM compatibility mode, indentically to what RAW: does.
This *does not* go for VT-220 mode. Added code for a window-restore
function, it is however not yet available in the menu, this will be done in
3.66. Added a special check in the startup code to avoid possible deadlocks
in case ViNCEd is started and ENV: is not yet mounted. The ^Q and ^G control
sequences were buggy and not sent correctly. ^Q sent erraneously a ^S and ^G
did always ring the bell and never sent any code. Argh! Fixed the
documentation, the "send window reports" sequence is actually "CSI 0 SPC q",
not "CSI 0 q". This doesn't make any difference for ViNCEd, but the
console.device recognizes only the former sequence, not the later. Thanks to
Gunther Nikl for reporting. Added the "CSI >?23l" sequence that disables
the emulation of a RAW: bug whose emulation added for completeness in 3.65.
Shudder! Included a finnish translation, thank goes to Samppa Rönkä.


3.66    Added the "Restore Window" menu item. Fixed the broken "Insert CSI"
and "Insert ESC" sequences of 3.65. Added the italian translation by
Francesco Leoni and Francesco Mancuso, thank you! Added mouse-wheel support
for serial mice, the wheel scrolls the window up and down.


3.67    Added the %l and %o window title command to insert the state of the
NumLock and Overwrite qualifier. ViNCEd will now try to adjust its icons
correctly if some other program hacked more than the system default icons
into its title ("PowerWindows"). The shortcuts of the ViNCEd windows can now
be localized. Fixed a bug in the TAB expansion cache handling of
multiassigns. Added a workaround for a bug in VIM.


3.68    ViNCEd will now switch back to the system default font in case it is
opened on a screen with a proportional font; this mimicks the CON:
behaiviour. Thanks Raphael! ViNCEd will no longer try to resize a window to
make its contents visible. If the window is too tiny, no output will be
shown. This is again identically to the CON: behaivour; however, unlike for
CON:, the cursor movement sequences remain working as ViNCEd emulates a tiny
1x1 window if required. The guru 0x1e080001 is now obsolete. Fixed a bug in
the tool button allocation, used the wrong font for estimating the remaining
size of the window title. Fixed! Added the %w and %W screen title commands.
ViNCEd removes now the cursor if a "set border" command is sent. Since
nobody seems to read this guide, ViNCEd drops now a trailing ".info" in the
icon name for iconification. Due to an oversight, the colored cursor and the
ANSI colors did not work at the same time. Ouch! The version string in
SetVNC wasn't correct. Fixed a bug in the character overwrite routine...
again! Fixed a hit of SetVNC when inserting more buttons.


3.69    The color of the dots in the default cursor could have been wrong.
Fixed! The calculation of the window height in the window open routine was
wrong by as much as one pixel and therefore failed. Re-enabled the automatic
resizing of the window because this makes indeed some sense.
Thanks Constantinos! The SetVNC "Load From" and "Save To" functions did not
work as expected, and did not show an error requester in case they failed.
Urgh!


3.69.1  The SetVNC color selector did not work on hicolor or true-color
screens, fixed. SetVNC allocates a hardware sprite in case no free pen is
available. Unfortunately, the Os sprite allocation function of the V39
graphics library (and propably that of V40, too) seems to have problems to
allocate a hardware sprite in case the intuition mouse pointer is in AGA
hires mode. The result is unpredictable: The Os manages to remap the hires
pointer to lores from time to time, of course loosing precision; sometimes
it does not and leaves a corrupt sprite and a hires sprite to SetVNC, unlike
desired. There is currently no way of allocating a sprite in a given mode
without causing this problem, so there is unfortunately no fix. To work
around this problem, give the workbench more colors.


3.70    Lots of housekeeping work. Removed all obsolete Os 1.x handling
code. The code does no longer try to use arp if the V37 dos.library is not
available. I will now use EasyRequester() instead of the obsolete
AutoRequest(). Menu construction will use gadtools routines now. File
requester requires asl now and will no longer fall back to arp. ViNCEd
requires now V37 boopsis and will no longer be able to build its own gadgets
in case boopsis are not available. A lot of fallback code to V33 releases
has been removed. Finally. As a result of all this work, the library shrunk
in size even though new features have been included. Rewrote the startup
code completely. The pre 3.70 code was more adapted to the V33 ramlib
mechanism and tried to work around some ramlib features which are no longer
an issue. It therefore might have run into some race conditions that have
been removed for the new code. As a side effect, the "GlobVec" entry of the
mount list should be set to -2. (For the experts: Yes, ViNCEd knows how to
handle the race conditions caused by this. Don't worry...) Added multiple
"screen" handling which is owner-specific. Hence, a ViNCEd window is now
able to hold more than just "one buffer". The contents of the ViNCEd
"screens" can be exchanged by a single CSI sequence, as in XTerm. Useful for
terminals. (Typically used by programs like "elm" or "emacs") Added mouse
tracking support, mainly for "VIM". ViNCEd is now able to support X10 mouse
button messages, XTerm and XTerm2 mouse tracking commands. XTerm
"interactive" mouse tracking is not supported due to some limitations the
intuition world sets. The documentation does not yet cover this feature
fully, sorry. Added a keyboard function to iconify the window. The old
SetVNC should already be able to handle this, it is flexible enough. Fixed a
tiny bug in the preferences handling; the default preferences location used
to be the old instead of the new location. Fixed a bug in ESCc, reset
handling. ESCc did not reset the cursor rendering CSI0p. Removed the
obsolete "CHUNKYPIXEL" preferences flag. ViNCEd was and still is smart
enough to detect chunky screens itself, this flag was in fact never
required. Added the "NCURSESFIX" flag to SetVNC and the preferences
structure. This flag controls some messy details of the "word wrap" function
and is now pre-selectable by the preferences function. Updated the ViNCEd
guide to include the modifications. Updated the SetVNC localization (german
only) to include the new flags.


3.71    The TAB expansion did not handle BCPL escape sequences correctly.
It failed to insert and interpret file and pattern names containing both
blank spaces and double quotes because it forgot to escape the double quotes
in the file names. Removed the "intuition delay" timing value both from the
SetVNC program and the vnc.library. This timing value is no longer
needed and will be no longer written to the preferences.


3.72    Fixed a very minor bug in one of the block mark routines which
caused a sub-optimal refresh and hence more flicker than absolutely
necessary. It must have been there for years, but did nothing bad at all.
CSI H (set cursor) did not truncate the cursor position correctly, fixed.
The CSI sequence parser did not handle embedded control characters
correctly. It still doesn't, but at least embedded ESC, CAN and SUB
characters are respected. Embedded BS does not work, in the same way that it
doesn't for the native Amiga console. Call it either a compatibility
feature, or my lazyness. The TAB expansion will now correctly quote file
names containing semicolons or greater or less than signs. The minimal
window size for "CSI t" was computed incorrectly, possibly yielding to
problems if the window was resized beyond the minimal size afterwards.


3.73    The list of TAB expansions is now alphabetically sorted instead
sorted in directory order. A bug in the "SetVNC HELP" function has been
fixed which might have trashed memory due to a lost pointer. Five new
"query" CSI sequences of the CSI n family have been added on request. CSI S
and CSI T did not respect the "do not insert into the border" setting,
namely the "CSI >?13l" flag. Fixed. The "ENQ" (ASCII 05) control character
is now supported. Handling of "OSC" sequences was debugged and made more
ANSI conformal. The ESC sequences "ESC SPN L", "ESC SPN M" and "ESC SPN N"
are now supported. "CSI G" and "CSI `" (character position absolute) are now
supported. "CSI >c" returns now the proper VNC version and revision. "CSI d"
is now supported. "CSI m" (set graphics rendering) supports now the modes 90
and up for the extended 16 color support. CSI "62;np is now supported
correctly. "CSI >?62n" is new and inquiries the active font. "CSI >?64n"
reports the screen title, "CSI >?65n" reports the window position, "CSI
>?66n" returns the window size. The documentation of the CSI sequences was
reworked and contains now more unsupported CSI/ESC/OSC sequences. OSC
sequences were erraneously listed under "ESC" sequences. CSI ?47h was
erraneously documented as "CSI ?47n", but worked correctly already. Because
I was permanently nagged, the "Don't scroll into the border" flag now
inhibits cursor movement into the prompt and other output as well. Rather
senseless, IMHO.


3.74    Forgot a left-over breakpoint in the 3.73 that caused a crash if no
debugger was installed. Yikes! Included a new version StringSnip that sorts
the entries alphabetically. Changing the icon title if the window was in
iconified state did not work, fixed. The window title computation routine is
now less picky about the state of the shell when converting %N or %S and
similar arguments. This should avoid unnecessary delays in the window title
refresh. Thanks to Tomasz Wiszkowsk for providing the AmigaE includes and
for a polish localization! Added the "Emacs" mode which is enabled by the
CSI sequence "CSI >?11h". This is quite useful if you run a "ssh" in a
ViNCEd window. It will "morally speaking" turn the Alt key into the "Meta"
key of Emacs. Setting the left or top rendering border to zero by means of
"CSI 0x" or "CSI 0y" did not work. Fixed. ViNCEd did not respect the
extended colors in case the "CSI >?14h" flag was turned on. Extended colors
have then been reserved for bold instead. 3.74 will now swap normal to
extended and extended to normal to present bold characters. SetVNC still
used the old "AutoRequest", replaced by "EasyRequestArgs" now. Note that
this requires V37 and up, as documented for 3.7x releases. Found vertical
cursor movement in VT-220 mode was somewhat broken. Origin mode made CSI A
and CSI B scrolling, which is wrong, and CSI E, CSI F and Reverse Index
never scrolled, even though they should. Fixed.


3.75    I'm using now OpenWindowTagList() instead of OpenWindow(). Maybe MCP
is in better mood then not to hack my window structures. ViNCEd does now no
longer insert the dummy gadget into the window border if it really doesn't
have to. This might help to work around the broken MCP window border hack.
This does not mean that this problem won't bite back sometimes. There are,
in fact, situations where this gadget is required, for example if "NOSIZE"
is selected. Then I can't do anything against MCP except blaiming it as a
blundering hack. If this story continues, I will write an automatic deletion
code for MCP. (-; HA! I replaced the default iconification image by
something which looks more what people seem to prefer. This is now also a
pure Boopsi class and a look-alike to Massimos Boopsi class. I hope you
appreciate the work. Enhanced the double TAB handling again (oh no, not yet
another feature). First, the double TAB delay time is now selectable and is
under control of the timing page. Second, if this time is set to zero, the
TAB requester will always pop up after the second TAB. ViNCEd still
allocates two boopsi images per arrow. The reason is that the sysiclass
boopsi comes with a specific tag item to select the raised/recessed state. I
read this as an indicator that not all implementations of the sysiclass can
handle raised/recessed states automatically. The V40 sysiclass should do
however. Since this causes no additional drawback, I will keep it like this.
SetVNC: If the guide lacks an icon, the browser defaults now to MultiView.
SetVNC does now no longer try to allocate a sprite for showing an additional
color if openend on a non-native screen. Causes only trouble, and there is
no hardware sprite anyhow. SetVNC prints now RGB values as ranges from 0
to 255 similar to the preferences "Palette" tool. Please report whether this
is better or worse. SetVNC allows now adjustment of the double TAB delay
time with the special value of zero. Fixed an Enforcer hit in the argument
parser.


3.76    ^J (insert CSI) did not work very well with the TAB expansion, due
to two bugs or oversights in the code. Should be fixed now, even though the
fix was quite tough. The "KeyCursorNRight" primitive did not work as
expected in case line break at the right window border was turned on and the
flag "don't scroll into the border" was turned on simultaneously. This was a
new bug introduced in 42.74. The window open code is now about 100% faster
simply by not sending a reset "ESCc" to the console.device. Changed the menu
item "Hide" to "Unmark". Added again new features. Feature number one is
that the TAB expansion can be told now to ignore the data behind the cursor
in the sense that this data will not contribute to the pattern. This
improves the usefulness of the TAB expansion by about 1% and required one
additional TAB expansion flag and one additional TAB control page of SetVNC
(there are now seven Shell pages) decreasing the useabilty of the
configuration by about 20%. It also means I have to re-organize the guide
and have to build a new locale for the new strings. Added another new
feature. Due to common request, the TAB expansion may now list its results
on the console instead of using the ASL requester. This can be found on the
fourth shell page as the other new flag. Be warned! This feature was a
nightmare to implement and it really breaks with various issues of good
style. First of all, it breaks the input mask of programs which is
undesirable. Secondly, it messes with data structures of the main task it
shouldn't mess with. It required the introduction of one additional DOS
packet and various long testing. The problem with this feature is that it
is rather complex in its nature and possible side effects it may have.
SetVNC: The color selection increments now in steps of one unit instead of
steps of 16 units. Included the "Easy Setup" flag. You find it on the
second "About" page. Please check wether the selection of flags is
convenient for the beginner.


42.77: Border computation was partially wrong, it did not take the border
protection zone into account, leading to partial border trashing on CSI x.
Macro button expansion did not keep track of the keyboard lock correctly and
hence might have locked the output in situations where it should have been
unlocked. SetVNC 41.45: The first System page forbid the user to exit if the
guide location was incorrect. Note that this is intentional, but I
nevertheless changed the behaivour.


42.78: The window contents re-arrangement on a window resize was partially
wrong for some setups. This was due to a register trashing in one of the
low-level routines. *Outch* In case iconficiation is forbidden, the second
press on the iconification gadget will restore the original window position
and size.


42.79: The calculation of the iconification image size wasn't always
optimal. It now closely reassembles the same style and size as the intuition
code. SetVNC 41.46: Due to an oversight (a trashed register) "SetVNC Help"
could have crashed in case the guide file came with a ".info".


42.80: The default preferences still listed Amiga-H instead of Amiga-U for
"unmark". Similary, the name of the keyboard function was still wrong.
Fixed the wrong layout of the left border of the build-in iconification
image. The color choice for the leftmost line of the "selected" image was
wrong. Improved the gagdet layout for bitmaps of depth one, i.e. if only two
pens are available. Removed the old Mwm style iconification image
completely. This means that no iconification gadget can be build in case
allocating the new boopsi failed. Added a new feature: Double clicking on a
word captures the complete word in a block. Requires more testing. Added a
new CSI sequence. CSI ?46h turns on logging. All printed data will be
written over the serial port at 9600 baud, 8 bit, one stop bit.
Alternatively, you may capture this data with Sashimi. SetVNC 41.47: Strange
enough, the argument parser enforcer hit reappeared in 41.45. Fixed again.


42.81: Fixed a crash of the buffer IO module that was caused by a register
trash in the IO support routines. The VNC requester layout routine removes
now a terminating LF in the requester body to make the requesters looking a
bit more fancy.


42.94: After 18 years of silence, this is a re-release of ViNCEd under
my own copyright, and ViNCEd is again freeware. This version improves the
handling of the "medium mode" such that it is fully compatible with the Os
3.2 (v47) version of the shell. TAB expansion is then fully done by the
shell, bypassing ViNCEd. ViNCEd changes now its cursor shape for the
shell-driven TAB expansion, and sends a ^E to the shell to abort the
expansion. Also, ViNCEd uses now the intuition v47 sysiclass for
iconification if this gadget is present.


42.95: This release resolves one of the "open ends" of ViCNEd. In case
the "automatic line breaking at the right border" was selected, ViNCEd
broke the lines as requested, but did not re-compute line-breaking when the
window was resized. While a lot of preparation work was done to make this
possible, the actual re-formatting algorithm was missing, and was finally
included. Note that formatting only applies to printed output, not to user
input, which continues to scroll.


42.96: When mounted, ViNCEd now automatically fixes its stack size
to at least 4096 bytes required by the core. This avoids
problems if ViNCEd is used as CON: replacement and the CON:
stack size is not fixed by SetPatch as it should.


42.97: When ViNCEd becomes active before the ENV: assign is made, ViNCEd
did not become aware of preferences changes and hence never adapted its
settings if changes were made through SetVNC. It now re-attempts to 
register notification events every time a ViNCEd window is openend.


42.98: If ViNCEd became active before ENV:  and LOCALE:  were setup,
the localization wasn't updated for new windows even after ENV: became 
mounted. ViNCEd now also pulls all new system preferences once it 
becomes aware that the preferences system becomes active.

Also, Pär Boberg updated the Svenska locale and provided a swedish
installer script.


42.99: The ViNCEd "mount override" function to replace CON: and RAW: did not
work correctly in combination with the ViNCEd Boot Shim of Os 3.2 and broke
the RAW: handler instead of replacing it by ViNCEd. This was fixed in 3.99.


42.100: When the VNC clip supervisor restarted some of its services, it
invalidly accessed one of its internal variables as LONG rather than BYTE,
causing an address fault on the 68000. Otherwise, the access was harmless.
This was fixed in release 3.100.


42.101: ViNCEd now delays loading the icon and workbench libraries, and
only opens them when they are already in memory. This avoids conflicts
during early startup if only one of the libraries is replaced by LoadModule.
While this is potentially a user error, it may be helpful to be
conservative. ViNCEd now re-attempts to open the libraries as soon as the
preferences become available, i.e. whenever ENV: is created and filled.


42.102: ViNCEd now also delays the allocation of the TmpRas and by that
avoids any allocation of Chipmem until absolutely needed. If ViNCEd
is used as boot console, the TmpRas memory blocked MuMove4K from
releasing all ChipMem below 32K, and thus blocked its operation.
Additionally, the memory management and garbadge collector of ViNCEd
is all new and should perform better. The dynamic line and buffer
structures require now 8 bytes less per line.
Also forgot to include the C prototypes for the vnc.library.


42.103: While there are not many observable changes, the internal structure
of ViNCEd changed a lot, in preparation for a future major release. From the
user perspective, the following things changed:

- The knob size of the horizontal scroll gadget is now computed from the
taken scroll space, and no longer from the maximum      available space.

- Also, the computation of the vertical knob size was incorrect in case a
scroll region was installed into the window by means of the CSI n;m r
sequence.

- Rewrapping of the window contents with installed scroll
region might have been off and might have positioned the cursor in the
wrong spot upon re-wrapping of the window contents.

- If cursor movement was restricted to the visible area, the cursor     could
not move at all in printed output. This now changed such that the cursor
can move in such areas, provided there is no user input. As soon as input
appears, cursor movement remains constrained to the input.

- Overriding the CON: mount damaged a dos.library semaphore because
dos.library creates a mis-aligned "fake" seglist for the ROM-resident
CON-Handler. Added a workaround, this should prevent system hangs.


Internal changes:

- ViNCed no longer relocates dedicated line pointers in its main structure
upon garbadge collection; instead, ViNCEd uses now a handle system with
stack-based handle allocation to ensure proper pointer relocation. This
would allow many more "floating" line pointer in future releases.

- The "word" structure no longer uses offsets from the left window edge to
indicate the position of a word. Instead, an offset from the end of the last
word is used. The entire line compaction/expansion was rewritten. This,
together with the previous choice, and the prop gadget change, would enable
arbitrary long lines in future releases of ViNCEd. Currently, the line
length is limited by about 250 characters.

- Handling of the scroll region was greatly simplified. Instead of moving
lines around on the "visible line list" upon insertion and deletion of
lines, the lines in the scroll region are now kept in two separate lists
which are not touched by the typical editor screen manipulations.

-As a side effect of these changes, the VNC main structure changed in some
places.


3.104: When marking an almost empty window with blank lines for the
clipboard, ViNCEd may have forgotten to mark the end-of-line of some of the
empty lines in the window. This was due to one bug in a low-level function
iterating over lines.

Thanks to Luca Longone, the italian catalog has been updated! Thank you for
your contribution!


3.106: The overlay manager of SetVNC had a very minor defect
that probably never affected its function, but let's have it fixed anyhow. 
When a block mark included blanks between words that were
compressed away, and the block mark did not start at the
beginning of the line, printing the gap between words did
not print the block mark correctly. This happened mostly
when scrolling.


3.107: The secondary result code of ACTION_SCREEN_MODE is now set correctly. 
See the RKRM Dos for details.



Read also the @{"credits" link THANKS} section of this guide, to find out
who is responsible for reporting the bugs (-;


@ENDNODE
@NODE Future "Future Plans with ViNCEd"
@TOC Main
No, the story isn't over yet. Here's a collection of future plans with
ViNCEd and related:


@{B}Plans for 4.00@{UB}:

- Complete rewrite in C

- Rework the ViNCEd concept. Start with a VT-220 "widget" (boopsi) for the
CSI parser and the editor features. On top of that a "vinced.device", on top
of that a "ViNCEd-Handler", on top of that "Vinchy", the ViNCEd shell.


@ENDNODE
@NODE Bugs "Bug notes and reports, how to contact the author"
@TOC Main
What, do you expect ViNCEd is bug free? Gee, to give you an impression how
big this thing is:


The assembler source (!) of ViNCEd and SetVNC is about 2.4 MB in size, not
counting the includes, this guide, the Makefiles, the Agenda, the includes,
the autodocs, the fd-files, the installer script and the "Extras". Do you
think I'm crazy to write this in assembly language? Guess you're right....


How to report me in case of a bug?


Please include the following information:


o) Your name and an address how to contact you. EMail preferred.


o) The version of ViNCEd you're using.


o) The version of the Kickstart and Workbench you're using.


o) Other patches active at that time.


o) How to reproduce the bug.


o) If possible, run the Enforcer. Configure it in a way such that the stack
of the crashing/buggy procedure gets dumped, too. The more lines, the
better. This stack dump helps usually quite a lot.


o) Run the SegTracker, and MungWall, and PatchWork; then try to reproduce
the bug. Send me the output of all these programs in case of a crash/bug.


o) Include a copy of the ViNCEd settings active at the time the crash
happened. They can be usually found in ENV:ViNCEd.prefs. It's a plain ASCII
file.


o) In case this crash/bug happened in relation to another program and this
program or a demo version of this program is freely available, include
information where to get it.


Ship all these information to @{"my address" link Me}.

Thanks for your help!

___________________________________________________________________________


So, here are some features of ViNCEd I haven't been able to reproduce on my
machine and that haven't been fixed for that reason. In case you know
anything specific about these, please lemme know:



Icon drop support seems to make trouble for some people. If you open a
ViNCEd window before the workbench is open, ViNCEd won't be able to install
its icon drop feature into that window. However, all windows opened AFTER
the workbench pops up *should* provide icon drop, except the windows
already open before. This works fine here on my system, and I haven't been
able to reproduce the problem. You may re-enable icon drop support by
restarting the "TABHook" with the CSI-sequences CSI >?12l CSI >?12h.



There seems to be a problem with the MudPad math program. This program is no
longer available and hence I haven't been able to reproduce this bug.
However, this problem might be related to the ViNCEd settings. You should
not set the @{"Inhibit Horizontal Scrolling" link FL_NOPRINTSCROLL} flag
when running programs in RAW mode, or should at least enable the
@{"Line break at right border" link FL_SMALLDISPLAY} as well if you must use
this flag. Not following these rules might cause the cursor leave the
viewable part of the window without causing a scroll.



ViNCEd seem to cause crashes if it gets iconified while some output is in
progress. Type "dir dh0: all", then iconify the window. Causes either a
mungwall hit, or a crash/hang. Does not happen on my system, tried with
various configurations without success. Analyzed the critical code several
times without finding anything suspicious. If anybody knows how to reproduce
this, please let me know. Possibly some strange hack that is active?
(Might be related to some old versions of ModePro, should be fixed with
later releases.)



ViNCEd seems to cause a mungwall hit if the window gets iconified on a non-
native screen. The mungwall hit is in the intuition DisposeObject() routine
(the precise address depends on the ROM version) which seems to deallocate
zero bytes of storage. I stepped thru the parts of ViNCEd that allocate and
release boopsis, without finding anything suspicious and without being able
to reproduce this bug. Probably a CyberGfx problem? Probably the same
ModePro bug as above?



ViNCEd seems somehow to interact with the AmiIRC program and ARexx scripts
for AmiIRC. Using ViNCEd and AmiIRC together seems to break some arexx
scripts, even though no ViNCEd window has been opened at that time. This
problem is still a mystery for me. I can neither reproduce it, nor have any
idea what the reason for this could be. Would be interesting if the ARexx
patch included in the full distribution - which fixes an internal ARexx
message queuing problem - can correct this bug. This might be, too, a timing
problem of various "hacked" and critical ARexx scripts.


@ENDNODE
@NODE Boopsis "The tbiclass Boopsi Interface"
@TOC ProgToc
ViNCEd uses the system "Boopsis" wherever possible; these can be replaced by
a "SysIHack" style program like "VisualPrefs". However, since not all
gadgets required by ViNCEd are available as public gadget classes, an
interface has been worked out together with Massimo Tantignone, the author
of VisualPrefs, to allow replacement of the remaining ViNCEd gadgets. This
interface works thru a custom gadget class, named "tbiclass", short for
"tool button image class". ViNCEd will first try to allocate boopsis of this
class and falls back to its own gadgets in case this class is not available.


The "tool button image class" is either provided by a stand-alone boopsi
which was written by Massimo Tantignone and is included with his friendly
permission in this distribution, or is installed and maintained by the
VisualPrefs program of the same author. Hence, if you're running VisualPrefs
anyhow, there's no need to install this image class.



If you want to write a "GUI improver" software....

____________________________________________________________________________

...you should supply a public "Boopsi Classes" called
"tbiclass". The class should be a subclass of the ordinary "image" 
class and will be allocated by ViNCEd for the iconify gadget and 
the "title bar" gadgets. The image class should come in at least
two "flavours", determinated with the "SYSIA_Which" tag. This tag
is defined in "intuition/imageclass.h".


Details about the iconify image flavour of the "tbiclass"

____________________________________________________________________________

This image subclass is used to render the iconify gadget in ViNCEd and
other windows.

You receive the following information thru the standard tag items:


SYSIA_Which     with a tag value of 104, defining the "iconify flavour".


o) Width & height of the image to create. These values will be the
dimensions of the "depth arrangement" gadgets in the window. You may well
ignore these parameters as long as the specified dimensions differ by the
returned dimensions by a reasonable amount - meaning: screen sized gadgets
won't work, but everything that fits in the titlebar should. ViNCEd tries to
adjust its GUI accordingly to make enough room for your image.


o) The DrawInfo of the screen the window is to be created on. You should use
it to choose the correct pens for your image.


ViNCEd will allocate only ONE instance of this boopsi class and use it for
both, the regular and the hilited image of the iconify gadget. Make sure
your boopsi class is smart enough to render itself accordingly, you receive
all necessary information thru the standard boopsi "message".


You WILL NOT receive a recessed/raised flag of the image to create. As I
said, your boopsi class is expected to be smart enough.


To be compatible to an intuition "feature", ViNCEd expects that the LeftEdge
of your returned image is set to "-1", hence, the image is shifted by one
pixel to the left relatively to the gadget. This sounds a bit strange, but
intuition treads the standard system images in quite the same way. The reason
for this displacement of the image is to keep the left black image border out
of the sensitive area of the gadget. This dark border appears later on to be
the apparent right border of the title bar.



Details about the button flavour of the "tbiclass"

____________________________________________________________________________

This image subclass is used to render the "titlebar buttons" of ViNCEd 
windows.

You receive the following tags:


SYSIA_Which     with a tag value of 106, defining the "button flavour".


o) Width & height of the image to create. You may well ignore the height
parameter as long as you make sure your image will be the same size as the
title bar of the window. You ABSOLUTELY MUST obey the width parameter, ViNCEd
relies on the correct value set in the boopsi returned.


o) The DrawInfo of the screen for rendering informations.


You WILL NOT receive a recessed/raised flag for the image to create. As above,
ViNCEd expects that your image class is smart enough to render itself
accordingly, all necessary data can be received from intuition. 


ViNCEd will allocate only ONE instance of this boopsi per button, and will
use it for both, the gadget image and the hilite image - the pointer goes
to the "GadgetRender" and "SelectRender" fields of the gadgets.


Expect that parts of your images will be obscured by text, the contents of
the button.


To be compatible with a feature of intuition, ViNCEd expects that the image
is shifted to the left by one pixel, i.e. the LeftEdge entry of the image
structure must be set to -1. See above for details.




If you write your own application and need an iconify gadget or a title bar
button...

____________________________________________________________________________

First, provide your own standard gadget imagery. Make sure your program
works on a plain system, without any "GUI improver" software. If you want
your gadgets to get standard images, try the following to get a standard
iconify gadget:


Allocate a boopsi of the public "tbiclass" class, 
provide the following tags:


SYSIA_Which     with a tag value of 104, defining the "iconify flavour".


o) Width & height, and the DrawInfo of the screen your window is located on.


If this allocation fails, fall back to your own image. 


If it works:

Check the width and the height of the returned image. They might be different
from your specifications in order to give a "better look". Adjust your GUI
accordingly, make some room for this image. Fill the pointer you received
in the "GadgetRender" and "SelectRender" fields of the gadget structure
and specify alternate images as gadget rendering mechanisms. MAKE SURE
YOU ADJUST THE GADGET SIZE to reflect the dimensions of the image!


To be compatible to an intuition feature, the image you receive will be 
shifted to one pixel to the left. DO NOT ALTER the image structure you
received, it isn't yours! Move the gadget instead if you need to do so!
Read the paragraph above for more details.



If you need a standard button in your title bar:

Allocate a boopsi of the "tbiclass", provide the following tags:


SYSIA_Which     with a tag value of 106, defining the "button flavour".


o) Width & height of the button you need. The "width" can be as big as you
like, but the height should be the height of the title bar of the window. If
the window is not yet open, specify a reasonable value, it will be adjusted
for you. DrawInfo of the screen your window is located on. THIS TAG is
ABSOLUTELY NEEDED!


You receive either NULL if the class isn't available. Fall back to your own
image or border if you get this as result. If you don't get NULL, you're
holding one instance of an image-like boopsi. It's width is guaranteed to
be the width you specified, but the height might differ to adjust the image
in the title bar. Set the "GadgetRender" and "SelectRender" fields of an
intuition gadget to this pointer and specify images as regular and selected
rendering of the gadget. MAKE SURE YOU ADJUST THE GADGET HEIGHT to reflect
possible changes.


To be compatible with an intuition feature, this image will be shifted
leftwards by one pixel. This will move the 3D-look border of it out of
the gadget activation region and is an intuition feature. Please DO NOT
adjust the image structure yourself, it isn't yours. Move the gadget
instead if you have to.


For further questions, contact @{"me" link Me}.

@ENDNODE
@NODE INDEX "Index"
@TOC Main
@{CODE}

        A...

        @{"Abort Expansion (Keyboard Function)" link KF_ABORT_EXPANSION}
        @{"About info files and requesters" link REQFILTERS}
        @{"About Page" link SETVNC_ABOUT}
        @{"Add ViNCEd matches to the requester (TAB Setting)" link EXPAND_VNCREQUESTER}
        @{"Address, my" link ME}
        @{"All history settings at once" link HISTORY_SETTINGS}
        @{"All TAB expansion settings at once" link TAB_SETTINGS}
        @{"ALT Argument" link OP_ALT}
        @{"ALT_AMBIGREQ (Prefs Setting)" link FL_ALT_AMBIGREQ}
        @{"ALT_ASSIGN_PRI (Prefs Setting)" link FL_ALT_ASSIGN_PRI}
        @{"ALT_COMMAND_PRI (Prefs Setting)" link FL_ALT_COMMAND_PRI}
        @{"ALT_DEVICE_PRI (Prefs Setting)" link FL_ALT_DEVICE_PRI}
        @{"ALT_DIRECTORY_PRI (Prefs Setting)" link FL_ALT_DIRECTORY_PRI}
        @{"ALT_DOUBLEREQ (Prefs Setting)" link FL_ALT_DOUBLEREQ}
        @{"ALT_EXEC_PRI (Prefs Setting)" link FL_ALT_EXEC_PRI}
        @{"ALT_FILE_PRI (Prefs Setting)" link FL_ALT_FILE_PRI}
        @{"ALT_FULLEXPAND (Prefs Setting)" link FL_ALT_FULLEXPAND}
        @{"ALT_INFO_PRI (Prefs Setting)" link FL_ALT_INFO_PRI}
        @{"ALT_INTOCONSOLE (Prefs Setting)" link Fl_ALT_INTOCONSOLE}
        @{"ALT_PARTIALPAT (Prefs Setting)" link Fl_ALT_PARTIALPAT}
        @{"ALT_PATH_PRI (Prefs Setting)" link FL_ALT_PATH_PRI}
        @{"ALT_RESIDENT_PRI (Prefs Setting)" link FL_ALT_RESIDENT_PRI}
        @{"ALT_SCRIPT_PRI (Prefs Setting)" link FL_ALT_SCRIPT_PRI}
        @{"ALT_VNCREQUESTER (Prefs Setting)" link FL_ALT_VNCREQUESTER}
        @{"ALT_VOLUME_PRI (Prefs Setting)" link FL_ALT_VOLUME_PRI}
        @{"ANSI Argument" link OP_ANSI}
        @{"ANSI Colors" link ANSICOLORS}
        @{"ANSI Colors as Default/ANSIMODE (Prefs Flag)" link FL_ANSIMODE}
        @{"Assigns priority (TAB Setting)" link EXPAND_ASSIGN_PRI}
        @{"AUTO Argument" link OP_AUTO}
        @{"Auto Indent Mode/AUTOINDENT (Prefs Flag)" link FL_AUTOINDENT}

        B...

        @{"BACK Argument" link OP_BACK}
        @{"BACKDROP Argument" link OP_BACKDROP}
        @{"BACKGROUND/S (SetVNC argument)" link CA_BACKGROUND}
        @{"Binding a keyboard function?" link KEYBIND}
        @{"Blinking Cursor/BLINKING (Prefs Flag)" link FL_BLINKING}
        @{"Block Operations" link BLOCKOPS}
        @{"Book references" link REFERENCES}
        @{"Boopsi Interface" link BOOPSIS}
        @{"Break functions of ViNCEd" link BREAK}
        @{"Bug notes and reports, how to contact the author" link BUGS}
        @{"BUTTONMACRO (Prefs Setting)" link FL_BUTTONMACRO}
        @{"BUTTONS Argument" link OP_BUTTONS}
        @{"BUTTONTITLE (Prefs Setting)" link FL_BUTTONTITLE}

        C...

        @{"Cached directories/CACHESIZE (Prefs Setting)" link FL_CACHESIZE}
        @{"Call Macro to Close Window/SMARTCLOSE (Prefs Flag)" link FL_SMARTCLOSE}
        @{"CHUNKY Argument" link OP_CHUNKY}
        @{"Clear Screen (Keyboard Function)" link KF_CLEAR_SCREEN}
        @{"CLOSE Argument" link OP_CLOSE}
        @{"Ctrl Z key in the Shell mode" link CTRLZ}
        @{"Color Setup/COLOR (Prefs Setting)" link FL_COLOR}
        @{"COLS Argument" link OP_COLS}
        @{"Command history" link HISTORY}
        @{"Command (C:) priority, relative (TAB Setting)" link EXPAND_COMMAND_PRI}
        @{"Command search directory, how to change?" link TAB_CHANGECMDDIR}
        @{"Compatibility notes" link COMPATIBILITY}
        @{"Compatibility notes for the experts" link PROG_COMPATIBILITY}
        @{"Component, what is?" link COMPONENT}
        @{"ConMan B Argument" link OP_BSUPERBITMAP}
        @{"ConMan S Argument" link OP_SUSERSCREEN}
        @{"ConMan style single character options" link OP_CONMANOPTIONS}
        @{"ConMan W Argument" link OP_WUSERWINDOW}
        @{"Console Modes" link CONSOLEMODES}
        @{"Control characters" link CTRLLIST}
        @{"Control pages of SetVNC" link PAGESTOC}
        @{"Control sequences that return results." link SENDBACKCSI}
        @{"Control sequences the keyboard parser sends and receives" link KEYBOARDLIST}
        @{"Control sequences you might receive" link RECEIVECSI}
        @{"Copy (Keyboard Function)" link KF_COPY}
        @{"Copy Quiet (Keyboard Function)" link KF_COPY_QUIET}
        @{"CSI and ESC sequences" link CSIESC}
        @{"CSI sequences" link CSILIST}
        @{"Cursor Blink Speed/BLINKSPEED (Prefs Setting)" link FL_BLINKSPEED}
        @{"Cursor Color Setup/CURSOR COLOR (Prefs Setting)" link FL_CURSORCOLOR}
        @{"Cursor Down keyboard (Keyboard Function)" link KF_CURSOR_DOWN}
        @{"Cursor Left (Keyboard Function)" link KF_CURSOR_LEFT}
        @{"Cursor Right (Keyboard Function)" link KF_CURSOR_RIGHT}
        @{"Cursor Up keyboard (Keyboard Function)" link KF_CURSOR_UP}
        @{"Cut (Keyboard Function)" link KF_CUT}
        @{"Cut Component Bkwds (Keyboard Function)" link KF_CUT_COMPONENT_BKWDS}
        @{"Cut Component Fwds (Keyboard Function)" link KF_CUT_COMPONENT_FWDS}
        @{"Cut End of Line (Keyboard Function)" link KF_CUT_END_OF_LINE}
        @{"Cut Full Line (Keyboard Function)" link KF_CUT_FULL_LINE}
        @{"Cut Inputs (Keyboard Function)" link KF_CUT_INPUTS}
        @{"Cut Start of Line (Keyboard Function)" link KF_CUT_START_OF_LINE}
        @{"Cut Word Bkwds (Keyboard Function)" link KF_CUT_WORD_BKWDS}
        @{"Cut Words Fwds (Keyboard Function)" link KF_CUT_WORD_FWDS}

        D...

        @{"Default path/DEFAULT_PATH (Prefs Setting)" link FL_DEFAULT_PATH}
        @{"Delete Backwards (Keyboard Function)" link KF_DELETE_BACKWARDS}
        @{"Delete Component Bkwds (Keyboard Function)" link KF_DELETE_COMPONENT_BKWDS}
        @{"Delete Component Fwds (Keyboard Function)" link KF_DELETE_COMPONENT_FWDS}
        @{"Delete End of Display (Keyboard Function)" link KF_DELETE_END_OF_DISPLAY}
        @{"Delete End of Line (Keyboard Function)" link KF_DELETE_END_OF_LINE}
        @{"Delete Forwards (Keyboard Function)" link KF_DELETE_FORWARDS}
        @{"Delete Full Line (Keyboard Function)" link KF_DELETE_FULL_LINE}
        @{"Delete Inputs (Keyboard Function)" link KF_DELETE_INPUTS}
        @{"Delete Start of Line (Keyboard Function)" link KF_DELETE_START_OF_LINE}
        @{"Delete Word Bkwds (Keyboard Function)" link KF_DELETE_WORD_BKWDS}
        @{"Delete Word Fwds (Keyboard Function)" link KF_DELETE_WORD_FWDS}
        @{"DEPTH Argument" link OP_DEPTH}
        @{"Destructive DEL and BS/DOSERASE (Prefs Flag)" link FL_DOSERASE}
        @{"Details about Job Control" link JOBCTRL}
        @{"Devices priority (TAB Setting)" link EXPAND_DEVICE_PRI}
        @{"DEV_AMBIGREQ (Prefs Setting)" link FL_DEV_AMBIGREQ}
        @{"DEV_ASSIGN_PRI (Prefs Setting)" link FL_DEV_ASSIGN_PRI}
        @{"DEV_COMMAND_PRI (Prefs Setting)" link FL_DEV_COMMAND_PRI}
        @{"DEV_DEVICE_PRI (Prefs Setting)" link FL_DEV_DEVICE_PRI}
        @{"DEV_DIRECTORY_PRI (Prefs Setting)" link FL_DEV_DIRECTORY_PRI}
        @{"DEV_DOUBLEREQ (Prefs Setting)" link FL_DEV_DOUBLEREQ}
        @{"DEV_EXEC_PRI (Prefs Setting)" link FL_DEV_EXEC_PRI}
        @{"DEV_FILE_PRI (Prefs Setting)" link FL_DEV_FILE_PRI}
        @{"DEV_FULLEXPAND (Prefs Setting)" link FL_DEV_FULLEXPAND}
        @{"DEV_INFO_PRI (Prefs Setting)" link FL_DEV_INFO_PRI}
        @{"DEV_INTOCONSOLE (Prefs Setting)" link Fl_DEV_INTOCONSOLE}
        @{"DEV_PARTIALPAT (Prefs Setting)" link Fl_DEV_PARTIALPAT}
        @{"DEV_PATH_PRI (Prefs Setting)" link FL_DEV_PATH_PRI}
        @{"DEV_RESIDENT_PRI (Prefs Setting)" link FL_DEV_RESIDENT_PRI}
        @{"DEV_SCRIPT_PRI (Prefs Setting)" link FL_DEV_SCRIPT_PRI}
        @{"DEV_VNCREQUESTER (Prefs Setting)" link FL_DEV_VNCREQUESTER}
        @{"DEV_VOLUME_PRI (Prefs Setting)" link FL_DEV_VOLUME_PRI}
        @{"Directories priority (TAB Setting)" link EXPAND_DIRECTORY_PRI}
        @{"DIR_AMBIGREQ (Prefs Setting)" link FL_DIR_AMBIGREQ}
        @{"DIR_ASSIGN_PRI (Prefs Setting)" link FL_DIR_ASSIGN_PRI}
        @{"DIR_COMMAND_PRI (Prefs Setting)" link FL_DIR_COMMAND_PRI}
        @{"DIR_DEVICE_PRI (Prefs Setting)" link FL_DIR_DEVICE_PRI}
        @{"DIR_DIRECTORY_PRI (Prefs Setting)" link FL_DIR_DIRECTORY_PRI}
        @{"DIR_DOUBLEREQ (Prefs Setting)" link FL_DIR_DOUBLEREQ}
        @{"DIR_EXEC_PRI (Prefs Setting)" link FL_DIR_EXEC_PRI}
        @{"DIR_FILE_PRI (Prefs Setting)" link FL_DIR_FILE_PRI}
        @{"DIR_FULLEXPAND (Prefs Setting)" link FL_DIR_FULLEXPAND}
        @{"DIR_INFO_PRI (Prefs Setting)" link FL_DIR_INFO_PRI}
        @{"DIR_INTOCONSOLE (Prefs Setting)" link Fl_DIR_INTOCONSOLE}
        @{"DIR_PARTIALPAT (Prefs Setting)" link Fl_DIR_PARTIALPAT}
        @{"DIR_PATH_PRI (Prefs Setting)" link FL_DIR_PATH_PRI}
        @{"DIR_RESIDENT_PRI (Prefs Setting)" link FL_DIR_RESIDENT_PRI}
        @{"DIR_SCRIPT_PRI (Prefs Setting)" link FL_DIR_SCRIPT_PRI}
        @{"DIR_VNCREQUESTER (Prefs Setting)" link FL_DIR_VNCREQUESTER}
        @{"DIR_VOLUME_PRI (Prefs Setting)" link FL_DIR_VOLUME_PRI}
        @{"Disable BS at Start of Line/NOBSSTART (Prefs Flag)" link FL_NOBSSTART}
        @{"Disable Horizontal Scroller/DISABLEPROPX (Prefs Flag)" link FL_DISABLEPROPX}
        @{"Disable Horizontal Scroller/DISABLEPROPY (Prefs Flag)" link FL_DISABLEPROPY}
        @{"Disable Middle Mouse Button/DISABLEMMB (Prefs Flag)" link FL_DISABLEMMB}
        @{"DISABLESCROLL (Prefs Flag)" link FL_DISABLESCROLL}
        @{"DISABLEWRAP (Prefs Flag)" link FL_DISABLEWRAP}
        @{"Display Beep (Keyboard Function)" link KF_DISPLAY_BEEP}
        @{"DOS packets list" link PACKETLIST}
        @{"Do not match characters behind cursor (TAB Setting)" link EXPAND_PARTIALPAT}
        @{"Do not Place File Requester/DONTPLACEREQUESTER (Prefs Flag)" link FL_DONTPLACEREQUESTER}
        @{"Don't Add Close Gadget by Default/NODEFAULTCLOSE (Prefs Flag)" link FL_NODEFAULTCLOSE}
        @{"Don't Add Iconify Gadget by Default/FORBIDICONIFY (Prefs Flag)" link FL_FORBIDICONIFY}
        @{"Don't scroll into the border (Prefs Flag)" link FL_SCROLLBORDERS}
        @{"Don't send EOF until everybody waits/CLOSEQUEUE (Prefs Flag)" link FL_CLOSEQUEUE}
        @{"Don't Write Printed Text into Clipboard/CUTUSER (Prefs Flag)" link FL_CUTUSER}
        @{"Double-Tab requester, how to turn off?" link TAB_NODOUBLETAB}
        @{"Double TAB Requester (TAB Setting)" link EXPAND_DOUBLEREQ}
        @{"Double TAB time interval" link Fl_DOUBLETABTIME}
        @{"DRAG Argument" link OP_DRAG}

        E...

        @{"Edit Menu" link EDITMENU}
        @{"Edit Page 1" link SETVNC_EDIT_1}
        @{"Edit Page 2" link SETVNC_EDIT_2}
        @{"Edit Page 3" link SETVNC_EDIT_3}
        @{"Edit Page 4" link SETVNC_EDIT_4}
        @{"Enable Close Requester/CLOSEREQ (Prefs Flag)" link FL_CLOSEREQ}
        @{"Enable Scrollers in RAW Mode/RAWSCROLLERS (Prefs Flag)" link FL_RAWSCROLLERS}
        @{"End (Keyboard Function)" link KF_END}
        @{"ESC and CSI sequences" link CSIESC}
        @{"ESC sequences" link ESCLIST}
        @{"Exclude assignments, how to?" link TAB_EXCLUDEASSIGNS}
        @{"Exclude directories, how to?" link TAB_EXCLUDEDIRS}
        @{"Exclude icon files, how to?" link TAB_EXCLUDEICONS}
        @{"Executables priority (TAB Setting)" link EXPAND_EXEC_PRI}
        @{"Expand Alt (Keyboard Function)" link KF_EXPAND_ALT}
        @{"Expand Alt Bkwds (Keyboard Function)" link KF_EXPAND_ALT_BKWDS}
        @{"Expand Backwards (Keyboard Function)" link KF_EXPAND_BACKWARDS}
        @{"Expand Devices (Keyboard Function)" link KF_EXPAND_DEVICES}
        @{"Expand Devs Bkwds (Keyboard Function)" link KF_EXPAND_DEVS_BKWDS}
        @{"Expand Dirs (Keyboard Function)" link KF_EXPAND_DIRS}
        @{"Expand Dirs Bkwds (Keyboard Function)" link KF_EXPAND_DIRS_BKWDS}
        @{"Expand Icons (Keyboard Function)" link KF_EXPAND_ICONS}
        @{"Expand Icons Bkwds (Keyboard Function)" link KF_EXPAND_ICONS_BKWDS}
        @{"Expand Path (Keyboard Function)" link KF_EXPAND_PATH}
        @{"Expand Short (Keyboard Function)" link KF_EXPAND_SHORT}
        @{"Expand Short Bkwds (Keyboard Function)" link KF_EXPAND_SHORT_BKWDS}
        @{"Extended Colors Instead of Bold/BOLDEXTCOLORS (Pref Flag)" link FL_BOLDEXTCOLORS}

        F...

        @{"FALLBACK Argument" link OP_FALLBACK}
        @{"File priority (TAB Setting)" link EXPAND_FILE_PRI}
        @{"First TAB expands fully (TAB Setting)" link EXPAND_FULLEXPAND}
        @{"FONT Argument" link OP_FONT}
        @{"Font/DEFAULT_FONT (Prefs Setting)" link FL_DEFAULT_FONT}
        @{"FOREGROUND/K (OTHER/S CLI/N)" link CA_FOREGROUND}
        @{"Fork New Shell (Keyboard Function)" link KF_FORK_NEW_SHELL}
        @{"Fork new shell/RUN_NEW_SHELL (Prefs Setting)" link FL_RUN_NEW_SHELL}
        @{"Format of the Preferences File" link PREFSFORMAT}
        @{"Form Feed (Keyboard Function)" link KF_FORM_FEED}
        @{"FREEPOINTER/K (ALL/S) (SetVNC argument)" link CA_FREEPOINTER}
        @{"Frequently asked questions" link FAQ}
        @{"Full Reset (Keyboard Function)" link KF_FULL_RESET}
        @{"Future Plans with ViNCEd" link FUTURE}

        G...

        @{"Gadgets in the Window" link GADGETS}
        @{"Generate EOF (Keyboard Function)" link KF_GENERATE_EOF}
        @{"GET/K (SCREEN HISTORY) (SetVNC argument)" link CA_GET}
        @{"Goodies of the SetVNC program" link SETVNCGOODIES}
        @{"Goodies of ViNCEd" link GOODIES}
        @{"Graphical Interface of SetVNC" link SETVNCGUI}
        @{"Gurus thrown by ViNCEd" link GURUS}

        H...

        @{"Half Screen Down (Keyboard Function)" link KF_HALF_SCREEN_DOWN}
        @{"Half Screen Left (Keyboard Function)" link KF_HALF_SCREEN_LEFT}
        @{"Half Screen Right (Keyboard Function)" link KF_HALF_SCREEN_RIGHT}
        @{"Half Screen Up (Keyboard Function)" link KF_HALF_SCREEN_UP}
        @{"Height Argument" link OP_HEIGHT}
        @{"Height/REQ_HEIGHT (Prefs Setting)" link FL_REQ_HEIGHT}
        @{"Help (Keyboard Function)" link KF_HELP}
        @{"HELP/S (SetVNC argument)" link CA_HELP}
        @{"Hide (Keyboard Function)" link KF_HIDE}
        @{"History Buffer" link HISTORY}
        @{"History Buffer Wraps Around/WRAP (Prefs Flag)" link FL_WRAP}
        @{"History Down (Keyboard Function)" link KF_HISTORY_DOWN}
        @{"History lines/BUFFERSIZE (Prefs Setting)" link FL_BUFFERSIZE}
        @{"History settings at once" link HISTORY_SETTINGS}
        @{"History Up (Keyboard Function)" link KF_HISTORY_UP}
        @{"Home (Keyboard Function)" link KF_HOME}
        @{"How to avoid the refinement?" link TAB_NOREFINEMENT}
        @{"How to change the command search directory?" link TAB_CHANGECMDDIR}
        @{"How to exclude assignments?" link TAB_EXCLUDEASSIGNS}
        @{"How to exclude directories?" link TAB_EXCLUDEDIRS}
        @{"How to exclude icon files?" link TAB_EXCLUDEICONS}
        @{"How to install ViNCEd" link INSTALL}
        @{"How to turn off the Double-Tab requester?" link TAB_NODOUBLETAB}
        @{"How to use standard requesters?" link TAB_NOVNCREQ}

        I...

        @{"Icon (.info) priority (TAB Setting)" link EXPAND_INFO_PRI}
        @{"Icon drop in the Shell mode" link ICONDROP}
        @{"Icon Path/ICON_PATH (Prefs Setting)" link FL_ICON_PATH}
        @{"Icon Title/ICON_TITLE (Prefs Setting)" link FL_ICON_TITLE}
        @{"ICONIFIED Option" link OP_ICONIFIED}
        @{"ICONIFY Argument" link OP_ICONIFY}
        @{"Iconify (Keyboard Function)" link Kf_Iconify}
        @{"IFVNC/S (SetVNC argument)" link CA_IFVNC}
        @{"Implicit Copy after Text Marking/AUTOCOPY (Prefs Flag)" link FL_AUTOCOPY}
        @{"INACTIVE Argument" link OP_INACTIVE}
        @{"Info files and requesters" link REQFILTERS}
        @{"Inserting spaces" link TAB_NOTFORDIRS}
        @{"Install ViNCEd" link INSTALL}
        @{"INF_AMBIGREQ (Prefs Setting)" link FL_INF_AMBIGREQ}
        @{"INF_ASSIGN_PRI (Prefs Setting)" link FL_INF_ASSIGN_PRI}
        @{"INF_COMMAND_PRI (Prefs Setting)" link FL_INF_COMMAND_PRI}
        @{"INF_DEVICE_PRI (Prefs Setting)" link FL_INF_DEVICE_PRI}
        @{"INF_DIRECTORY_PRI (Prefs Setting)" link FL_INF_DIRECTORY_PRI}
        @{"INF_DOUBLEREQ (Prefs Setting)" link FL_INF_DOUBLEREQ}
        @{"INF_EXEC_PRI (Prefs Setting)" link FL_INF_EXEC_PRI}
        @{"INF_FILE_PRI (Prefs Setting)" link FL_INF_FILE_PRI}
        @{"INF_FULLEXPAND (Prefs Setting)" link FL_INF_FULLEXPAND}
        @{"INF_INFO_PRI (Prefs Setting)" link FL_INF_INFO_PRI}
        @{"INF_INTOCONSOLE (Prefs Setting)" link Fl_INF_INTOCONSOLE}
        @{"INF_PARTIALPAT (Prefs Setting)" link Fl_INF_PARTIALPAT}
        @{"INF_PATH_PRI (Prefs Setting)" link FL_INF_PATH_PRI}
        @{"INF_RESIDENT_PRI (Prefs Setting)" link FL_INF_RESIDENT_PRI}
        @{"INF_SCRIPT_PRI (Prefs Setting)" link FL_INF_SCRIPT_PRI}
        @{"INF_VNCREQUESTER (Prefs Setting)" link FL_INF_VNCREQUESTER}
        @{"INF_VOLUME_PRI (Prefs Setting)" link FL_INF_VOLUME_PRI}
        @{"Inhibit Horiz. Scrolling by DOS Output/NOPRINTSCROLL (Prefs Flag)" link FL_NOPRINTSCROLL}
        @{"Insert CSI (Keyboard Function)" link KF_INSERT_CSI}
        @{"Insert ESC (Keyboard Function)" link KF_INSERT_ESC}
        @{"Insert ^J (Keyboard Function)" link KF_INSERT_CTRL_J}
        @{"Insertion Mode for DOS Output/DOSINSERT (Prefs Flag)" link FL_DOSINSERT}
        @{"Inverse ANSI Coloring/ANSIREVERSE (Prefs Flag)" link FL_ANSIREVERSE}
        @{"Invisible Type Ahead/TYPEAHEAD (Prefs Flag)" link FL_TYPEAHEAD}

        J...

        @{"Job Control details" link JOBCTRL}
        @{"Job Control related arguments of SetVNC" link SETVNCJOBS}

        K...

        @{"KEEP Argument" link OP_KEEP}
        @{"Keep Bottom of Window Adjusted/SCROLLTOBOTTOM (Prefs Flag)" link FL_SCROLLTOBOTTOM}
        @{"Keep Duplicates in the History/KEEPDOUBLES (Prefs Flag)" link FL_KEEPDOUBLES}
        @{"Keyboard - how to type?" link KEYBOARD}
        @{"Keyboard Functions" link KEYFUNCLIST}
        @{"Keyboard function, what is?" link KEYFUNCTION}
        @{"Keyboard Page 1" link SETVNC_KEYBOARD_1}
        @{"Keyboard Page 2" link SETVNC_KEYBOARD_2}


        L...

        @{"Left Edge/REQ_LEFTEDGE (Prefs Setting)" link FL_REQ_LEFTEDGE}
        @{"LeftEdge Argument" link OP_LEFTEDGE}
        @{"Licence" link LICENCE}
        @{"Line Break at Right Border/SMALLDISPLAY (Prefs Flag)" link FL_SMALLDISPLAY}
        @{"Line Feed (Keyboard Function)" link KF_LINE_FEED}
        @{"List expansions on the console (TAB Setting)" link EXPAND_INTOCONSOLE}
        @{"List of all Keyboard Functions" link KEYFUNCLIST}
        @{"List of control characters." link CTRLLIST}
        @{"List of control sequences the keyboard parser sends and receives" link KEYBOARDLIST}
        @{"List of CSI sequences" link CSILIST}
        @{"List of ESC sequences" link ESCLIST}
        @{"List of OSC sequences" link OSCLIST}
        @{"List of Gurus thrown by ViNCEd" link GURUS}
        @{"List of understood DOS packets" link PACKETLIST}
        @{"LOAD/K (PREFS/S GLOBAL/S WINDOW/S DEFAULT/S LAST/S FROM) (SetVNC Argument)" link CA_LOAD}
        @{"Lower display size/LOWERSIZE (Prefs Setting)" link FL_LOWERSIZE}

        M...

        @{"MACRO (Prefs Setting)" link FL_MACRO}
        @{"Macros and Buttons" link MACROS}
        @{"Macros Menu" link MACROSMENU}
        @{"Macros Page 1 and 2" link SETVNC_MACROS}
        @{"Macros Page 3" link SETVNC_MACROS_3}
        @{"Menu" link MENU}
        @{"MENU Argument" link OP_MENU}
        @{"MODIFY/S (SetVNC argument)" link CA_MODIFY}
        @{"MONITOR Argument" link OP_MONITOR}
        @{"MONITOR/A (SetVNC argument)" link CA_MONITOR}
        @{"Monitor/MONITORID (Prefs Setting)" link FL_MONITORID}
        @{"MONITORID Argument" link OP_MONITORID}
        @{"MOUNT/K (OVERRIDE/S AS) (SetVNC argument)" link CA_MOUNT}
        @{"Mouse Tracking Information" link MouseTrack}
        @{"My address" link ME}

        N...

        @{"Name of the ViNCEd handler" link OP_NAME}
        @{"Name Only Qualifier/NAMEONLYQU (Prefs Setting)" link FL_NAMEONLYQU}
        @{"Next Component (Keyboard Function)" link KF_NEXT_COMPONENT}
        @{"Next Word (Keyboard Function)" link KF_NEXT_WORD}
        @{"No Insertion Into Border/SHORTSCREENINSERT (Prefs Flag)" link FL_SHORTSCREENINSERT}
        @{"NOANSI Argument" link OP_NOANSI}
        @{"NOBORDER Argument" link OP_NOBORDER}
        @{"NOBUTTONS Argument" link OP_NOBUTTONS}
        @{"NOCLOSE Argument" link OP_NOCLOSE}
        @{"NODEPTH Argument" link OP_NODEPTH}
        @{"NODRAG Argument" link OP_NODRAG}
        @{"NOFALLBACK Argument" link OP_NOFALLBACK}
        @{"NOICONIFY Option" link OP_NOICONIFY}
        @{"NOMENU Argument" link OP_NOMENU}
        @{"Non standard keys" link NONSTDKEY}
        @{"NOPROPX Argument" link OP_NOPROPX}
        @{"NOPROPY Argument" link OP_NOPROPY}
        @{"NOSHELL Argument" link OP_NOSHELL}
        @{"NOSIZE Argument" link OP_NOSIZE}
        @{"Notation of keyboard sequences in this manual" link KEYNOTATION}
        @{"Notify DOS About Paste/AUTOPASTE (Prefs Flag)" link FL_AUTOPASTE}
        @{"NOTITLEBAR Argument" link OP_NOTITLEBAR}
        @{"Numeric keypad cursor control/NUMPADMODE (Prefs Flag)" link FL_NUMPADMODE}
        @{"NumPad for Cursor" link NUMLOCK}

        O...

        @{"OLDLOOK Argument" link OP_OLDLOOK}
        @{"OSC Sequences" link OSCList}
        @{"Overview: What is ViNCEd about? And why this strange name?" link OVERVIEW}
        @{"Overwrite Mode" link OVERWRITE}
        @{"Overwrite Mode/OVERWRITE (Prefs Flag)" link FL_OVERWRITE}
        @{"Owner, what is?" link OWNERS}

        P...

        @{"Pages of SetVNC" link PAGESTOC}
        @{"Paste (Keyboard Function)" link KF_PASTE}
        @{"Path Only Qualifier/PATHONLYQU (Prefs Setting)" link FL_PATHONLYQU}
        @{"Path priority, relative (TAB Setting)" link EXPAND_PATH_PRI}
        @{"PLAIN Argument" link OP_PLAIN}
        @{"PLANAR Argument" link OP_PLANAR}
        @{"PREFS Argument" link OP_PREFS}
        @{"PREFS/S (SetVNC argument)" link CA_PREFS}
        @{"Prev Component (Keyboard Function)" link KF_PREV_COMPONENT}
        @{"Prev Word (Keyboard Function)" link KF_PREV_WORD}
        @{"Prevent Accidental Window Closing/SAFERCLOSE (Prefs Flag)" link FL_SAFERCLOSE}
        @{"Programmer's Manual" link PROGTOC}
        @{"Project Menu" link PROJECTMENU}
        @{"PROPX Argument" link OP_PROPX}
        @{"PROPY Argument" link OP_PROPY}
        @{"PUT/K (SCREEN HISTORY) (SetVNC argument)" link CA_PUT}

        Q...

        @{"QUIET (SetVNC argument)" link CA_QUIET}
        @{"Quit Program/QUIT_PROGRAM (Prefs Setting)" link FL_QUIT_PROGRAM}

        R...

        @{"Rebuild Delay/REBUILDDELAY (Prefs Flag)" link FL_REBUILDDELAY}
        @{"Rebuild Delay/REBUILDTIME (Prefs Setting)" link FL_REBUILDTIME}
        @{"Requester if expansion is ambiguous (TAB Setting)" link EXPAND_AMBIGREQ}
        @{"References" link REFERENCES}
        @{"Refinement, how to avoid ?" link TAB_NOREFINEMENT}
        @{"Refinement, what is?" link REFINEMENT}
        @{"Reset (Keyboard Function)" link KF_RESET}
        @{"RESET/S (SetVNC argument)" link CA_RESET}
        @{"Residents priority (TAB Setting)" link EXPAND_RESIDENT_PRI}
        @{"Resume (Keyboard Function)" link KF_RESUME}
        @{"Window Buffers" link BUFFERS}
        @{"Rewind History (Keyboard Function)" link KF_REWIND_HISTORY}
        @{"Rigid XTerm Cursor/RIGIDCURSOR (Prefs Flag)" link FL_RIGIDCURSOR}
        @{"ROWLOCK (Prefs Flag)" link FL_ROWLOCK}
        @{"ROWS Argument" link OP_ROWS}

        S...

        @{"SAVE/K (NOICONS/S PREFS/S GLOBAL/S WINDOW/S TO) (SetVNC argument)" link CA_SAVE}
        @{"SCREEN Argument" link OP_SCREEN}
        @{"Scripts priority (TAB Setting)" link EXPAND_SCRIPT_PRI}
        @{"Scripts contained in this package" link SCRIPTS}
        @{"Scroll Down (Keyboard Function)" link KF_SCROLL_DOWN}
        @{"Scroll Half Screen Down (Keyboard Function)" link KF_SCROLL_HALF_SCREEN_DOWN}
        @{"Scroll Half Screen Up (Keyboard Function)" link KF_SCROLL_HALF_SCREEN_UP}
        @{"Scroll to Cursor (Keyboard Function)" link KF_SCROLL_TO_CURSOR}
        @{"Scroll Up (Keyboard Function)" link KF_SCROLL_UP}
        @{"SDEPTH Argument" link OP_SDEPTH}
        @{"Search History Downwards (Keyboard Function)" link KF_SEARCH_HISTORY_DOWNWARDS}
        @{"Search History Upwards (Keyboard Function)" link KF_SEARCH_HISTORY_UPWARDS}
        @{"Search Partial Downwards (Keyboard Function)" link KF_SEARCH_PARTIAL_DOWNWARDS}
        @{"Search Partial Upwards (Keyboard Function)" link KF_SEARCH_PARTIAL_UPWARDS}
        @{"Select All (Keyboard Function)" link KF_SELECT_ALL}
        @{"Send Complete Line (Keyboard Function)" link KF_SEND_COMPLETE_LINE}
        @{"Send Inputs (Keyboard Function)" link KF_SEND_INPUTS}
        @{"Send ^C (Keyboard Function)" link KF_SEND_CTRL_C}
        @{"Send ^C to All (Keyboard Function)" link KF_SEND_CTRL_C_TO_ALL}
        @{"Send ^D (Keyboard Function)" link KF_SEND_CTRL_D}
        @{"Send ^D to All (Keyboard Function)" link KF_SEND_CTRL_D_TO_ALL}
        @{"Send ^E (Keyboard Function)" link KF_SEND_CTRL_E}
        @{"Send ^E to All (Keyboard Function)" link KF_SEND_CTRL_E_TO_ALL}
        @{"Send ^F (Keyboard Function)" link KF_SEND_CTRL_F}
        @{"Send ^F to All (Keyboard Function)" link KF_SEND_CTRL_F_TO_ALL}
        @{"Sequences that return results." link SENDBACKCSI}
        @{"Sequences you might receive" link RECEIVECSI}
        @{"Settings Menu" link SETTINGSMENU}
        @{"SETCONSOLE/S" link CA_SETCONSOLE}
        @{"SetVNC Buffer I/O functions" link SETVNCIO}
        @{"SetVNC Tool" link SETVNCTOC}
        @{"SFONT Argument" link OP_SFONT}
        @{"Shell and Workbench Operation of SetVNC" link SETVNCARGS}
        @{"SHELL Argument" link OP_SHELL}
        @{"Shell Arguments of the SetVNC program" link SETVNCSHELLARGS}
        @{"Shell Mode" link SHELLMODE}
        @{"Shell Page 1" link SETVNC_SHELL_1}
        @{"Shell Page 2" link SETVNC_SHELL_2}
        @{"Shell Page 3" link SETVNC_SHELL_3}
        @{"Shell Page 4" link SETVNC_SHELL_4}
        @{"Shell Page 5" link SETVNC_SHELL_5}
        @{"Shell Page 6" link SETVNC_SHELL_6}
        @{"Shell Page 7" link SETVNC_SHELL_7}
        @{"Side mark: Inserting spaces" link TAB_NOTFORDIRS}
        @{"SIMPLE Argument" link OP_SIMPLE}
        @{"SIZE Argument" link OP_SIZE}
        @{"SMART Argument" link OP_SMART}
        @{"Split Line (Keyboard Function)" link KF_SPLIT_LINE}
        @{"SRT_AMBIGREQ (Prefs Setting)" link FL_SRT_AMBIGREQ}
        @{"SRT_ASSIGN_PRI (Prefs Setting)" link FL_SRT_ASSIGN_PRI}
        @{"SRT_COMMAND_PRI (Prefs Setting)" link FL_SRT_COMMAND_PRI}
        @{"SRT_DEVICE_PRI (Prefs Setting)" link FL_SRT_DEVICE_PRI}
        @{"SRT_DIRECTORY_PRI (Prefs Setting)" link FL_SRT_DIRECTORY_PRI}
        @{"SRT_DOUBLEREQ (Prefs Setting)" link FL_SRT_DOUBLEREQ}
        @{"SRT_EXEC_PRI (Prefs Setting)" link FL_SRT_EXEC_PRI}
        @{"SRT_FILE_PRI (Prefs Setting)" link FL_SRT_FILE_PRI}
        @{"SRT_FULLEXPAND (Prefs Setting)" link FL_SRT_FULLEXPAND}
        @{"SRT_INFO_PRI (Prefs Setting)" link FL_SRT_INFO_PRI}
        @{"SRT_INTOCONSOLE (Prefs Setting)" link Fl_SRT_INTOCONSOLE}
        @{"SRT_PARTIALPAT (Prefs Setting)" link Fl_SRT_PARTIALPAT}
        @{"SRT_PATH_PRI (Prefs Setting)" link FL_SRT_PATH_PRI}
        @{"SRT_RESIDENT_PRI (Prefs Setting)" link FL_SRT_RESIDENT_PRI}
        @{"SRT_SCRIPT_PRI (Prefs Setting)" link FL_SRT_SCRIPT_PRI}
        @{"SRT_VNCREQUESTER (Prefs Setting)" link FL_SRT_VNCREQUESTER}
        @{"SRT_VOLUME_PRI (Prefs Setting)" link FL_SRT_VOLUME_PRI}
        @{"Standard CR Insertion at Start of Line/CRINSERT (Prefs Flag)" link FL_CRINSERT}
        @{"Standard requesters, how to use?" link TAB_NOVNCREQ}
        @{"STITLE Argument" link OP_STITLE}
        @{"Suspend (Keyboard Function)" link KF_SUSPEND}
        @{"SYSTEMMACRO (Prefs Setting)" link FL_SYSTEMMACRO}
        @{"System Page 1" link SETVNC_SYSTEM_1}
        @{"System Page 2" link SETVNC_SYSTEM_2}
        @{"System Page 3" link SETVNC_SYSTEM_3}
        @{"System Page 4" link SETVNC_SYSTEM_4}



        T...

        @{"TAB expansion settings at once" link TAB_SETTINGS}
        @{"TAB Backwards (Keyboard Function)" link KF_TAB_BACKWARDS}
        @{"TAB expansion in the Shell mode" link TABEXPAND}
        @{"TAB Forwards (Keyboard Function)" link KF_TAB_FORWARDS}
        @{"TAB_AMBIGREQ (Prefs Setting)" link FL_TAB_AMBIGREQ}
        @{"TAB_ASSIGN_PRI (Prefs Setting)" link FL_TAB_ASSIGN_PRI}
        @{"TAB_COMMAND_PRI (Prefs Setting)" link FL_TAB_COMMAND_PRI}
        @{"TAB_DEVICE_PRI (Prefs Setting)" link FL_TAB_DEVICE_PRI}
        @{"TAB_DIRECTORY_PRI (Prefs Setting)" link FL_TAB_DIRECTORY_PRI}
        @{"TAB_DOUBLEREQ (Prefs Setting)" link FL_TAB_DOUBLEREQ}
        @{"TAB_EXEC_PRI (Prefs Setting)" link FL_TAB_EXEC_PRI}
        @{"TAB_FILE_PRI (Prefs Setting)" link FL_TAB_FILE_PRI}
        @{"TAB_FULLEXPAND (Prefs Setting)" link FL_TAB_FULLEXPAND}
        @{"TAB_INFO_PRI (Prefs Setting)" link FL_TAB_INFO_PRI}
        @{"TAB_INTOCONSOLE (Prefs Setting)" link Fl_TAB_INTOCONSOLE}
        @{"TAB_PARTIALPAT (Prefs Setting)" link Fl_TAB_PARTIALPAT}
        @{"TAB_PATH_PRI (Prefs Setting)" link FL_TAB_PATH_PRI}
        @{"TAB_RESIDENT_PRI (Prefs Setting)" link FL_TAB_RESIDENT_PRI}
        @{"TAB_SCRIPT_PRI (Prefs Setting)" link FL_TAB_SCRIPT_PRI}
        @{"TAB_VNCREQUESTER (Prefs Setting)" link FL_TAB_VNCREQUESTER}
        @{"TAB_VOLUME_PRI (Prefs Setting)" link FL_TAB_VOLUME_PRI}
        @{"tbiclass Boopsi Interface" link BOOPSIS}
        @{"Template, what is?" link TEMPLATE}
        @{"Thank you folks! Credits page" link THANKS}
        @{"Timing Page 1" link SETVNC_TIMING_1}
        @{"THOR-Software Licence" link LICENCE}
        @{"TITLEBAR Argument" link OP_TITLEBAR}
        @{"To Bottom of Screen (Keyboard Function)" link KF_TO_BOTTOM_OF_SCREEN}
        @{"To Left Border (Keyboard Function)" link KF_TO_LEFT_BORDER}
        @{"To Right Border (Keyboard Function)" link KF_TO_RIGHT_BORDER}
        @{"To Top of Screen (Keyboard Function)" link KF_TO_TOP_OF_SCREEN}
        @{"Toggle ESC (Keyboard Function)" link KF_TOGGLE_ESC}
        @{"Toggle NumLock (Keyboard Function)" link KF_TOGGLE_NUMLOCK}
        @{"Toggle Overwrite (Keyboard Function)" link KF_TOGGLE_OVERWRITE}
        @{"Toggle Pause (Keyboard Function)" link KF_TOGGLE_PAUSE}
        @{"Top Edge/REQ_TOPEDGE (Prefs Setting)" link FL_REQ_TOPEDGE}
        @{"TopEdge Argument" link OP_TOPEDGE}
        @{"Turn off the Double-Tab requester, how to?" link TAB_NODOUBLETAB}


        U...

        @{"Underline Cursor/UNDERLINE (Prefs Flag)" link FL_UNDERLINE}
        @{"Unrestricted Cursor Movement/DOSCURSOR (Prefs Flag)" link FL_DOSCURSOR}
        @{"Unsupported control characters" link UNCTRLLIST}
        @{"Unsupported CSI sequences" link UNCSILIST}
        @{"Unsupported ESC sequences" link UNESCLIST}
        @{"Unsupported OSC sequences" link UNOSCLIST}
        @{"Upper display size/UPPERSIZE (Prefs Setting)" link FL_UPPERSIZE}
        @{"Use Shell Mode by Default/SHELLMODE (Prefs Flag)" link FL_SHELLMODE}
        @{"User's Guide" link USERTOC}

        V...

        @{"Version information" link STORY}
        @{"Vertical scroll threshold/SCROLLTIME (Prefs Setting)" link FL_SCROLLTIME}
        @{"ViNCEd goodies" link GOODIES}
        @{"ViNCEd Guide" link MAIN}
        @{"ViNCEd Menu" link MENU}
        @{"ViNCEd owner, what is?" link OWNERS}
        @{"Volumes priority (TAB Setting)" link EXPAND_VOLUME_PRI}
        @{"VT-220 Compatibility Mode/VTMODE (Prefs Flag)" link FL_VTMODE}

        W...

        @{"WAIT Argument" link OP_WAIT}
        @{"What about a requester if not unique?" link TAB_AMBIGREQ}
        @{"Width Argument" link OP_WIDTH}
        @{"Width/REQ_WIDTH (Prefs Setting)" link FL_REQ_WIDTH}
        @{"WINDOW Argument" link OP_WINDOW}
        @{"Window Buffers" link BUFFERS}
        @{"Window Page 1" link SETVNC_WINDOW_1}
        @{"Window Page 2" link SETVNC_WINDOW_2}
        @{"Window Page 3" link SETVNC_WINDOW_3}
        @{"Window Path" link OPENPATH}
        @{"Window Title" link TITLE}
        @{"Word, what is?" link WORD}
        @{"Word wrap workaround/NCURSESFIX (Prefs Flags)" link Fl_NCURSESFIX}
        @{"Workbench ToolTypes of the SetVNC program" link SETVNCTOOLTYPES}

        X...

        @{"XTerm/CON: Cursor Mode/XTERMCURSOR (Prefs Flag)" link FL_XTERMCURSOR}

        Y...

        @{"Yank buffer" link YANK}
        @{"Yank (Keyboard Function)" link KF_YANK}


@{BODY}
@ENDNODE

@REMARK End



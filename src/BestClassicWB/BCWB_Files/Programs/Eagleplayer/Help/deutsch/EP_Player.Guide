@Database Player_Deutsch.Guide
@$VER: Eagleplayer Player_Deutsch.Guide V2.02 (01-Jul-1998)
@author "Eagleeye & Buggs of DEFECT"
@index Index
@wordwrap

@node "Main" "Keine Dokumentation verfügbar"

 Für diesen @{"Player" link "Einleitung zu den Playern"} ist keine Hilfe verfügbar.

Maxtrax
Profiteam-Soundfactory
Stonetracker

@endnode

@node "Index" "Index"

	Index der Eagleplayer-Dokumentation der EP_Player.guide


	@{"Index der Hauptdokumentation" Alink "EP_Main.Guide/Index"}
	@{"Index der Enginedokumentation" Alink "EP_Engine.Guide/Index"}
	@{"Index der Programmierungsdokumentation" Alink "EP_Programmierung.Guide/Index"}



	@{"Player-Inhaltsverzeichnis" link "Die Player"}
	@{"Einleitung zu den Playern" link "Einleitung"}
	@{"Informationen zu den einzelnen Playern" link "Informationen zu den einzelnen Playern"}
	@{"Programmierung von externen Playern" Alink "EP_Programmierung.Guide/Main"}
	@{"Fehler in den Playern" link "Fehler in den Playern"}
	@{"Entfernte Player" link "Entfernte Player"}

	@{"AC1D-DC1A-Packer" link "AC1D-DC1A-Packer"}
	@{"Action Amics" link "Action Amics"}
	@{"Activision Pro" link "Activision Pro"}
	@{"ADPCM" link "ADPCM"}
	@{"AIFF" link "AIFF"}
	@{"Amos Music Bank" link "Amos Music Bank"}
	@{"AProSys" link "AProSys"}
	@{"Art of Noise" link "Art of Noise"}
	@{"Audio Sculpture" link "Audio Sculpture"}
	@{"BFB Master" link "BFB Master"}
	@{"Benn Daglish" link "Benn Daglish"}
	@{"Chiptracker" link "Chiptracker"}
	@{"Customplay" link "Customplay"}
	@{"Datatype" link "Datatype"}
	@{"David Hanney" link "David Hanney"}
	@{"David Whittaker" link "David Whittaker"}
	@{"Deltamusic 1.0" link "Deltamusic 1.0"}
	@{"Deltamusic 2.0" link "Deltamusic 2.0"}
	@{"DigiBooster" link "DigiBooster"}
	@{"Digital Illusions" link "Digital Illusions"}
	@{"Digital Mugician" link "Digital Mugician"}
	@{"Digital Mugician II" link "Digital Mugician"}
	@{"DSS" link "DSS"}
	@{"EMS" link "EMS"}
	@{"Eureka-Packer" link "Eureka-Packer"}
	@{"Face the Music" link "Face the Music"}
	@{"FastTracker II" link "FastTracker II"}
	@{"FC-M Packer" link "FC-M Packer"}
	@{"Fred" link "Fred"}
	@{"Future Composer 1.3" link "Future Composer 1.3"}
	@{"Future Composer 1.4" link "Future Composer 1.4"}
	@{"Fuzzac Packer" link "Fuzzac Packer"}
	@{"Game Music Creator" link "Game Music Creator"}
	@{"GlueMon" link "GlueMon"}
	@{"GMOD" link "GMOD"}
	@{"Heatseeker MC1.0" link "Heatseeker MC1.0"}
	@{"Hippel" link "Hippel"}
	@{"Hippel-COSO" link "Hippel-COSO"}
	@{"Hippel_7V" link "Hippel_7V"}
	@{"IFF 8SVX" link "IFF 8SVX"}
	@{"IFF-SMUS" link "IFF-SMUS"}
	@{"In Stereo 1.0" link "In Stereo 1.0"}
	@{"In Stereo 2.0" link "In Stereo 2.0"}
	@{"J.C. Brooke" link "J.C.Brooke"}
	@{"Jamcracker" link "Jamcracker"}
	@{"Jason Page" link "Jason Page"}
	@{"Kefrens Sound Machine" link "Kefrens Sound Machine"}
	@{"Kript" link "Kript"}
	@{"Laxity-Player" link "Laxity-Player"}
	@{"LME" link "LME"}
	@{"Magnetic Fields" link "Magnetic Fields"}
	@{"Major Tom 2.01" link "Major Tom 2.01"}
	@{"Mark II" link "Mark II"}
	@{"Mark Cooksey" link "Mark Cooksey"}
	@{"Maxtrax" link "Maxtrax"}
	@{"MCMD" link "MCMD"}
	@{"MED" link "MED"}
	@{"Moduleprotector" link "Moduleprotector"}
	@{"M. Grouleff" link "M. Grouleff"}
	@{"MPEG Audio" link "MPEG Audio"}
	@{"M.O.N." link "M.O.N."}
	@{"Music Assembler" link "Music Assembler"}
	@{"Musicline" link "MusiclineEditor"}
	@{"MusicMaker 4" link "MusicMaker4"}
	@{"MusicMaker 8" link "MusicMaker8"}
	@{"Noisepacker 2.x" link "Noisepacker 2.x"}
	@{"Noisepacker 3.x" link "Noisepacker 3.x"}
	@{"Noiserunner" link "Noiserunner"}
	@{"Noisetracker Compressed" link "Noisetracker Compressed"}
	@{"OctaMED" link "OctaMED"}
	@{"Oktalyzer" link "Oktalyzer"}
	@{"Old Soundtracker" link "OldSoundtracker"}
	@{"PlayAY" link "PlayAY"}
	@{"PlaySID" link "PlaySID"}
	@{"Polkarunner" link "Polkarunner"}
	@{"Powermusic" link "Powermusic"}
	@{"Profiteam-Soundfactory" link "Profiteam-Soundfactory"}
	@{"Promizer 0.1" link "Promizer 0.1"}
	@{"Promizer 1.x" link "Promizer 1.x"}
	@{"Promizer 2.0" link "Promizer 2.0"}
	@{"Promizer 4.0" link "Promizer 4.0"}
	@{"Propacker_1.0" link "Propacker_1.0"}
	@{"Propacker 1.0" link "Propacker 1.0"}
	@{"Propacker 2.1" link "Propacker 2.1"}
	@{"Propacker 3.0" link "Propacker 3.0"}
	@{"Prorunner 1.0" link "Prorunner 1.0"}
	@{"Prorunner 2.0" link "Prorunner 2.0"}
	@{"Protracker" link "Protracker"}
	@{"PS3M" link "PS3M"}
	@{"PSA" link "PSA"}
	@{"Pumatracker 1.0" link "Pumatracker 1.0"}
	@{"QuadraComposer" link "IFF EMOD"}
	@{"RIFF Wave" link "Riff wave"}
	@{"Rob Hubbard" link "Rob Hubbard"}
	@{"Rob Hubbard 2" link "Rob Hubbard 2"}
	@{"Ron Klaren" link "Ron Klaren"}
	@{"Scumm" link "Scumm"}
	@{"Sean Connolly" link "Sean Connolly"}
	@{"SidMON 1.0" link "SidMON 1.0"}
	@{"SidMON 2.0" link "SidMON 2.0"}
	@{"Skyt-Packer" link "Skyt-Packer"}
	@{"SonicArranger" link "SonicArranger"}
	@{"SoundControl" link "SoundControl"}
	@{"SoundFX 1.3" link "SoundFX 1.3"}
	@{"SoundFX 2.0" link "SoundFX 2.0"}
	@{"SoundMaster" link "SoundMaster"}
	@{"SoundMon" link "SoundMon"}
	@{"SoundMon 2.2" link "SoundMon 2.2"}
	@{"Soundtracker 2.6" link "Soundtracker 2.6"}
	@{"Soundtracker Pro 3.0" link "Soundtracker Pro 3.0"}
	@{"Soundtracker Pro II" link "Soundtracker Pro II"}
	@{"Startrekker" link "Startrekker"}
	@{"Startrekker Packer" link "Startrekker Packer"}
	@{"StoneTracker" link "StoneTracker"}
	@{"Synth 4.0" link "Synth 4.0"}
	@{"Syntracker" link "Syntracker"}
	@{"TFMX" link "TFMX"}
	@{"Tim Follin II" link "Tim Follin II"}
	@{"THX" link "THX"}
	@{"TME" link "TME"}
	@{"The Player" link "The Player"}
	@{"TrackerPacker 1" link "TrackerPacker 1"}
	@{"TrackerPacker 2" link "TrackerPacker 2"}
	@{"TrackerPacker 3" link "TrackerPacker 3"}
	@{"Tronic" link "Tronic"}
	@{"Unic-Tracker" link "Unic-Tracker"}
	@{"Unic-Tracker 2" link "Unic-Tracker 2"}
	@{"Vectordean" link "Vectordean"}
	@{"VSS" link "VSS"}
	@{"Wantonpacker" link "Wantonpacker"}
	@{"Wizard of Sound" link "Wizard of Sound"}
	@{"XANN-Packer" link "XANN-Packer"}
	@{"XMOD" link "XMOD"}


@endnode

@node "Die Player" "Die Player"



                     Die Player - Anleitung
                              zum
                          Eagleplayer





  Inhaltsverzeichnis:


	@{"Einleitung zu den Playern" link "Einleitung"}
	@{"Informationen zu den einzelnen Playern" link "Informationen zu den einzelnen Playern"}
	@{"Programmierung von externen Playern" Alink "EP_Programmierung.Guide/Main"}
	@{"Fehler in den Playern" link "Fehler in den Playern"}
	@{"Entfernte Player" link "Entfernte Player"}
@endnode

@node "Informationen zu den einzelnen Playern" "Informationen zu den einzelnen Playern"

In dieser Liste finden sie die Player, die vom Eagleplayer zur Zeit unterstützt werden.

	@{"AC1D-DC1A-Packer" link "AC1D-DC1A-Packer"}
	@{"Action Amics" link "Action Amics"}
	@{"Activision Pro" link "Activision Pro"}
	@{"ADPCM" link "ADPCM"}
	@{"AIFF" link "AIFF"}
	@{"Amos Music Bank" link "Amos Music Bank"}
	@{"AProSys" link "AProSys"}
	@{"Art of Noise" link "Art of Noise"}
	@{"Audio Sculpture" link "Audio Sculpture"}
	@{"BFB Master" link "BFB Master"}
	@{"Benn Daglish" link "Benn Daglish"}
	@{"Chiptracker" link "Chiptracker"}
	@{"Customplay" link "Customplay"}
	@{"Datatype" link "Datatype"}
	@{"David Hanney" link "David Hanney"}
	@{"David Whittaker" link "David Whittaker"}
	@{"Deltamusic 1.0" link "Deltamusic 1.0"}
	@{"Deltamusic 2.0" link "Deltamusic 2.0"}
	@{"DigiBooster" link "DigiBooster"}
	@{"Digital Illusions" link "Digital Illusions"}
	@{"Digital Mugician" link "Digital Mugician"}
	@{"Digital Mugician II" link "Digital Mugician"}
	@{"DSS" link "DSS"}
	@{"EMS" link "EMS"}
	@{"Eureka-Packer" link "Eureka-Packer"}
	@{"Face the Music" link "Face the Music"}
	@{"FastTracker II" link "FastTracker II"}
	@{"FC-M Packer" link "FC-M Packer"}
	@{"Fred" link "Fred"}
	@{"Future Composer 1.3" link "Future Composer 1.3"}
	@{"Future Composer 1.4" link "Future Composer 1.4"}
	@{"Fuzzac Packer" link "Fuzzac Packer"}
	@{"Game Music Creator" link "Game Music Creator"}
	@{"GlueMon" link "GlueMon"}
	@{"GMOD" link "GMOD"}
	@{"Heatseeker MC1.0" link "Heatseeker MC1.0"}
	@{"Hippel" link "Hippel"}
	@{"Hippel-COSO" link "Hippel-COSO"}
	@{"Hippel_7V" link "Hippel_7V"}
	@{"IFF 8SVX" link "IFF 8SVX"}
	@{"IFF-SMUS" link "IFF-SMUS"}
	@{"In Stereo 1.0" link "In Stereo 1.0"}
	@{"In Stereo 2.0" link "In Stereo 2.0"}
	@{"J.C. Brooke" link "J.C.Brooke"}
	@{"Jamcracker" link "Jamcracker"}
	@{"Jason Page" link "Jason Page"}
	@{"Kefrens Sound Machine" link "Kefrens Sound Machine"}
	@{"Kript" link "Kript"}
	@{"Laxity-Player" link "Laxity-Player"}
	@{"LME" link "LME"}
	@{"Magnetic Fields" link "Magnetic Fields"}
	@{"Major Tom 2.01" link "Major Tom 2.01"}
	@{"Mark II" link "Mark II"}
	@{"Mark Cooksey" link "Mark Cooksey"}
	@{"Maxtrax" link "Maxtrax"}
	@{"MCMD" link "MCMD"}
	@{"MED" link "MED"}
	@{"Moduleprotector" link "Moduleprotector"}
	@{"M. Grouleff" link "M. Grouleff"}
	@{"MPEG Audio" link "MPEG Audio"}
	@{"M.O.N." link "M.O.N."}
	@{"MTH" link "MTH"}
	@{"Music Assembler" link "Music Assembler"}
	@{"Musicline" link "MusiclineEditor"}
	@{"MusicMaker 4" link "MusicMaker4"}
	@{"MusicMaker 8" link "MusicMaker8"}
	@{"Noisepacker 2.x" link "Noisepacker 2.x"}
	@{"Noisepacker 3.x" link "Noisepacker 3.x"}
	@{"Noiserunner" link "Noiserunner"}
	@{"Noisetracker Compressed" link "Noisetracker Compressed"}
	@{"OctaMED" link "OctaMED"}
	@{"Oktalyzer" link "Oktalyzer"}
	@{"Old Soundtracker" link "OldSoundtracker"}
	@{"PlayAY" link "PlayAY"}
	@{"PlaySID" link "PlaySID"}
	@{"Polkarunner" link "Polkarunner"}
	@{"Powermusic" link "Powermusic"}
	@{"Profiteam-Soundfactory" link "Profiteam-Soundfactory"}
	@{"Promizer 0.1" link "Promizer 0.1"}
	@{"Promizer 1.x" link "Promizer 1.x"}
	@{"Promizer 2.0" link "Promizer 2.0"}
	@{"Promizer 4.0" link "Promizer 4.0"}
	@{"Propacker_1.0" link "Propacker_1.0"}
	@{"Propacker 1.0" link "Propacker 1.0"}
	@{"Propacker 2.1" link "Propacker 2.1"}
	@{"Propacker 3.0" link "Propacker 3.0"}
	@{"Prorunner 1.0" link "Prorunner 1.0"}
	@{"Prorunner 2.0" link "Prorunner 2.0"}
	@{"Protracker" link "Protracker"}
	@{"PS3M" link "PS3M"}
	@{"PSA" link "PSA"}
	@{"Pumatracker 1.0" link "Pumatracker 1.0"}
	@{"QuadraComposer" link "IFF EMOD"}
	@{"RIFF Wave" link "Riff wave"}
	@{"Rob Hubbard" link "Rob Hubbard"}
	@{"Rob Hubbard 2" link "Rob Hubbard 2"}
	@{"Ron Klaren" link "Ron Klaren"}
	@{"Scumm" link "Scumm"}
	@{"Sean Connolly" link "Sean Connolly"}
	@{"SidMON 1.0" link "SidMON 1.0"}
	@{"SidMON 2.0" link "SidMON 2.0"}
	@{"Skyt-Packer" link "Skyt-Packer"}
	@{"SonicArranger" link "SonicArranger"}
	@{"SoundControl" link "SoundControl"}
	@{"SoundFX 1.3" link "SoundFX 1.3"}
	@{"SoundFX 2.0" link "SoundFX 2.0"}
	@{"SoundMaster" link "SoundMaster"}
	@{"SoundMon" link "SoundMon"}
	@{"SoundMon 2.2" link "SoundMon 2.2"}
	@{"Soundtracker 2.6" link "Soundtracker 2.6"}
	@{"Soundtracker Pro 3.0" link "Soundtracker Pro 3.0"}
	@{"Soundtracker Pro II" link "Soundtracker Pro II"}
	@{"Startrekker" link "Startrekker"}
	@{"Startrekker Packer" link "Startrekker Packer"}
	@{"StoneTracker" link "StoneTracker"}
	@{"Synth 4.0" link "Synth 4.0"}
	@{"Syntracker" link "Syntracker"}
	@{"TFMX" link "TFMX"}
	@{"Tim Follin II" link "Tim Follin II"}
	@{"THX" link "THX"}
	@{"TME" link "TME"}
	@{"The Player" link "The Player"}
	@{"TrackerPacker 1" link "TrackerPacker 1"}
	@{"TrackerPacker 2" link "TrackerPacker 2"}
	@{"TrackerPacker 3" link "TrackerPacker 3"}
	@{"Tronic" link "Tronic"}
	@{"Unic-Tracker" link "Unic-Tracker"}
	@{"Unic-Tracker 2" link "Unic-Tracker 2"}
	@{"Vectordean" link "Vectordean"}
	@{"VSS" link "VSS"}
	@{"Wantonpacker" link "Wantonpacker"}
	@{"Wizard of Sound" link "Wizard of Sound"}
	@{"XANN-Packer" link "XANN-Packer"}
	@{"XMOD" link "XMOD"}


@Endnode


@node "Einleitung" "Einleitung zu den Playern"

                    Erläuterungen zu den von uns
            bisher an den Eagleplayer angepaßten Playern

                         © 1993-96 DEFECT 



Um ein Modul auf dem Computer abspielen zu können, braucht man eine Routine,
ein Computerprogramm, welches dieses Modul erkennt, die Werte (Noten,
Pattern, Instrumente) auswertet und an den Audioausgang ein ordentliches
Signal sendet. Diese Routinen, die speziell an den Eagleplayer angepaßt
werden müssen, heißen 'Player' oder auch Abspieler, Replayer, Replayrou-
tinen.

Bei den Playern gibt es grundsätzlich zwei Typen, die internen und die
externen Player. Die Internen befinden sich, logischerweise, im Eagleplayer
und können nicht gelöscht werden. Sie können erlaubt/gesperrt werden.

Die externen Player werden bei Bedarf geladen (Es sind meistens Player,
die nicht sehr gebräuchlich sind). Dies hat den Vorteil, daß Sie nur den
jeweils benötigten externen Abspieler für das gerade gespielte Soundmodul
laden müssen und dabei bis zu 1 MegaByte an Speicher sparen können.
Bei aktivierter @{"Playerbatch" alink "EP_Main.Guide/Playerbatch"} und/oder aktiviertem @{"Playerloader" alink "EP_Engine.Guide/Playerloader"} erkennt
der Eagleplayer automatisch den Typ des Moduls und lädt dann den benötigten
Player nach. Neben der Speicherersparnis kommt obendrein noch dazu, daß die
Ladezeit des Eagleplayers beim Start drastisch verringert wird.

Diese Player können, bei entsprechender Sachkenntnis selbst programmiert
werden. Die Anpassung dieser Player übernehmen @{"wir" Alink "EP_Main.Guide/Copyright"} von Defect oder
ansonsten zumeist uns befreundete Freaks (Computerhaie).

Wenn die Programmierung eines Players selbst durchführen möchten, lesen Sie
bitte dieses @{"Kapitel" ALink "EP_Programmierung.Guide/Programmierung externer Player"}.

Alle von uns bearbeiteten Player wurden mehrfach getestet. Es kann aber
durchaus passieren, daß einige Module, besonders jene mit eingebauter
Playroutine (wie z.B. @{"Hippel" link Hippel}), nicht spielen beziehungsweise einige Funktionen
des Eagleplayers gesperrt werden, die bei anderen Modulen dieses Soundsystems
benutzbar sind. Bei betroffenen Playern wird dies mit angegeben. Es ist bei 
solchen gut möglich, daß das Modul erkannt wird, aber nicht spielt, das System 
sogar abstürzt. Solche kritischen Player, bei denen sich die Playroutine von Modul
zu Modul ändert, sind zum Beispiel @{"Hippel" link Hippel} und @{"David Whittaker" link "David Whittaker"}.

Falls irgendwelche Probleme mit den Playern auftreten sollten, bitte die
@{"Fehlerbeschreibung" alink "EP_Main.guide/Fehlerbeschreibung"} genau formulieren und das problembehaftete Module
(wenn alle Module nicht funktionieren reichen 3) mit den Informationen über
das verwendete Amigasystem (Kickstartversion, Prozessor, Zusatzhardware wie
Grafik- und Soundkarten, Amigamodell) an uns schicken. Wir werden uns bemühen,
den Fehler zu beheben und senden dann als Dankeschön die neueste Playroutine
zurück.

Besitzen Sie eine Playroutine, die vom Eagleplayer noch nicht unterstützt
wird, senden Sie uns diese bitte mit Sourcecode und einigen Modulen zum Test
zu, wir werden versuchen diese anzupassen.

Wenn in den einzelnen Beschreibungen nicht weiter erwähnt, werden Lautstärke,
Balance und Songend in der  Regel unterstützt. Der Player nutzt dann auch
den internen Timer.




PS. Die Einstellungen @{"Playerbatch" Alink "EP_Main.Guide/Playerbatch"} und @{"Playerloader" ALINK "EP_Engine.Guide/Playerloader"} sind in der Grund-
    einstellung eingeschaltet.

@endnode

@node "AC1D-DC1A-Packer" "AC1D-DC1A-Packer"

 AC1D-DC1A-Packer

		@{"Protrackerpacker" link Protracker}. Format aus dem Anarchy-Demo
		"In the Kitchen"

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Action Amics" "Action Amics"

 ActionAmics

	        Gerippte PlayRoutine, wird u.a. in dem Game Dynablaster ver-
                wendet. Tempo-Bug sowie durch Enforcer endeckte Bugs wurden
                removed. ActionAmics nutzt Subsongs, nutzt Patternswitching
                und unterstützt Volume, Balance, Voices und Engines.
                Songende wird erkannt.

                ActionAmics ist 99% ein Verwandter von @{"SIDMon 2.0" Link "SIDMon 2.0"}.
@endnode

@node "Activision Pro" "Activision Pro"

 Activision Pro

	        Soundsystem, das vorwiegend in älteren Spielen verwendet
		wurde, auch bekannt unter dem Namen "Wartin Walker".
		Die PlayRoutine ist ein einziges Durcheinander (manchmal
		zwei hintereinander), mit vielen Loopschleifen und befindet
		sich zudem noch im Module.
		Activision Pro unterstützt Analyzer, Volume, Balance, meistens
		auch Songende (hängt vom Patternswitching ab).
		Die Playroutine hat Probleme auf höheren Prozessoren.

PS:	 Cache aus, sonst werden z.T. Noten verschluckt.
@endnode

@node "ADPCM" "ADPCM"

 ADPCM

		ADPCM ist ein Verfahren zur komprimierung von Samples, verwendet
                z.B. in den Zyxel Modems für den Voice-Mode. Die in diesem
                Player realisierte Version stammt von Christian Buchner. Es
                werden Eingangsdateien mit 2 Bit, sowie 3 Bit Auflösung
                unterstützt. Die dabei erreichbare Klangqualität kann sich
                auf jeden Fall mit der von 4 Bit Fibonacci-kodierten Samples
                messen. Da die Länge selbst von 7½ min. langen Dateien nicht
                über 4.5 MB hinausgeht, wurde darauf verzichtet, eine Routine
                zu implementieren, die die Dateien direkt von Festplatte
                abspielt.

		- Amplifierunterstützung
		- Moduleinfo
		- Spielzeitberechnung
@endnode

@node "AIFF" "AIFF"

 AIFF
                AIFF ist ein auf dem Apple Macintosh weitverbreitetes
                Sampleformat. Es werden Mono/Stereo Samples mit
                8 Bit und 16 Bit unterstützt.
                Der Player ist in der Lage, die Daten direkt in 16 Bit
                auszugeben, sofern ein entsprechender Amplifier aktiv
                ist (14 Bit Amplifier), ansonsten werden die Daten in
                8 Bit heruntergerechnet.
                Dateien mit einer Länge größer als etwa 400 kB werden
                direkt von der Festplatte abgespielt, das heißt, die 
                maximale Länge der Dateien kann problemlos größer als 
                der verfügbare Arbeitsspeicher sein. Dies ist besonders
                für den Fall von Vorteil, daß man sich die Samples direkt
                mittels eines entsprechenden SCSI CD-Roms von CD
                rippt. @{i}(oops, habe ich da etwas gesagt ??) @{ui}

		- Amplifierunterstützung
		- Moduleinfo
                - Spielzeitberechnung
@endnode

@node "Amos Music Bank" "Amos Music Bank"

 Amos Music Bank

		Das Abspielformat von AMOS-Basic. Der Konverter ist ein
		Basicprogramm in der genannten Sprache. Ein ziemlich kompli-
		zierter Algorithmus. Das Format ist intern in den
		Eagleplayer eingebaut und wird nach dem Laden des Moduls
		in @{"Protracker" Link "Protracker"} zurückkonvertiert.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Art of Noise" "Art of Noise"

 Art of Noise

		Art of Noise (kommerzieller Name: Chorus) ist ein Tracker
		von Bastian Spiegel (=Twice/Lego), der bis zu 8 Stimmen
		anbietet und besonders auf Chiptunes zugeschnitten wurde.
		Da die Replayroutine, die mir Bastian zuschickte, nur 4
		Stimmen unterstützte, habe ich die Erweiterung auf
		8 Stimmen kurzerhand selbst eingebaut.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo, inclusive der Extratexte einiger Module
@endnode

@node "Aprosys" "Aprosys"

 Aprosys

		Keine Dokumentation verfügbar.
@endnode

@node "Audio Sculpture" "Audio Sculpture"

 Audio Sculpture

		Der kommerzielle Nachfolger vom @{"Startrekker" Link "Startrekker"}. Der AM-Teil
		der Playroutine wurde kräftig erweitert. Die NT-Files haben
		allerdings die gleiche Länge wie beim ST1.3 (8336 Bytes).
		Unterscheiden kann man die beiden Soundsysteme an der Kennung
		im NT/AS-File. Bei AudioSculpture haben die früheren NT-Files
		die Kennung ".AS". Der Replayer ist intern in den Eagleplayer
		eingebaut und kann auch Songs laden.
		AudioSculpture unterstützt Songende, Patternumschaltung,
		Volume, Balance & Engineansteuerung.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Autorsuche
		- Songloading
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "BFB Master" "BFB Master"

 BFB Master
		Hierbei handelt es sich um einen Player, der die BFB Master.Library ansteuert.
		Da die Anpassung der einzelnen Sublibraries sehr mager ist und außerdem keinen
		Amplifiersupport bietet, ist dieser Player nur über den @{"Formatloader" alink "EP_Engine.Guide/Formatloader"} benutzbar,
		da sonst eventuell Module erkannt werden, für die es bessere Player gibt.
		Keine Volumeänderung !!! 
@endnode


@node "Benn Daglish" "Benn Daglish"

 Benn Daglish

		Keine Dokumentation verfügbar.
@endnode

@node "Chiptracker" "ChipTracker"

 ChipTracker

	        Eindeutig ein Noisetrackerformat, arbeitet mit internem
		Interrupt und unterstützt alle Noisetrackertypischen Fähig-
		keiten (Patternjump usw.).
		Das Teil wird überall nur Kris genannt, obwohl der Tracker,
		der diese Module erzeugt, ChipTracker heißt. Auch, wenn uns
		das immer keiner glauben will, wir wissen das einfach
		besser, schon daher, weil wir den Tracker selbst auf Platte
		haben.

		- Amplifierunterstützung
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
@endnode

@node "Customplay" "Customplay"

 Customplay

		Hier handelt es sich um ein Interface, um z.B. Songs, die
		auf absoluten Adressen liegen oder die keinen Soundsystem
		angehören abzuspielen. Dafür muß der Song entsprechend
		seinen Möglichkeiten angepaßt und ein Playerheader, wie bei
		einen externen Player, vorgesetzt werden.

		Eine Aussage über Anpassungen (Volume, Balance ...) ist
		nicht möglich, da es bei jedem Modul verschieden ist.

		- intern im Eagleplayer

 PS:	Custommodule sollten grundsätzlich mit Vorsicht genossen werden, da
	bei der Anpassung meistens nicht sehr genau gearbeitet wird und die
	Playroutinen selbst auch nicht immer fehlerfrei sind. Wir übernehmen
	keinerlei Garantie, daß Custom-Modules fehlerfrei arbeiten, da wir
	an den meisten sowieso nicht selbst schuld sind.

@endnode

@node "Datatype" "Datatype"

 Datatype

		Eine Schnittstelle zu den Audio-Datatypes der Workbench.
		Somit können also z.B. Samples abgespielt werden, für die
		direkt kein Eagleplayer verfügbar ist.
		Ist allerdings ein Player (z.B. @{"ADPCM" Link ADPCM}) für ein
                bestimmtes Format direkt vorhanden, dann wird dieser automatisch
                dem Datatype Abspieler vorgezogen, da das OS3.0/3.1 Datatypes 
                System lediglich 8 Bit Mono Ausgabe ermöglicht, wodurch bei
                vielen Samples ein erheblicher Anteil an Klangqualität verloren
                geht.

		Beispiele für Datatypes:
				@{"8SVX" link "IFF 8SVX"} (Dafür gibt's einen Eagleplayer!)
				@{"ADPCM" Link ADPCM} (Dafür gibt's einen Eagleplayer!)
				SUNAU
				@{"WAVE" link "RIFF WAVE"} (Dafür gibt's einen Eagleplayer!)
@endnode

@node "David Hanney" "David Hanney"

 David Hanney

		Keine Dokumentation verfügbar.
@endnode

@node "David Whittaker" "David Whittaker"

 David Whittaker

		Womöglich der erste Whittaker bei dem man Balance, Volume
		und Voices steuern kann. Wer Whittaker kennt, weiß daß bei
		fast jedem WH-Modul eine etwas andere PlayRoutine benutzt
		wird. Diese Playroutine wird bei InitPlayer umgebaut. Nicht
		funktionierende Module dieses Playertyps bitte umgehend an
		uns senden. Ein Bug in der Moduleinternen PlayRoutine, der
		bei zu kurzen Modulen auftritt, wird abgefangen !!!
		Mittlererweile funktioniert der Whittaker mit allen uns zur
		Verfügung stehenden Modulen, aber wir übernehmen keinerlei
		Garantie. Songende wird teilweise erkannt.
		Whittaker wurde vor allem in Spielen um 1987-88 verwendet.
		Man erkennt das Soundsystem am typischen Klang.

		Seit EP V2.00 wird der Whittakerplayer von marley/IFT ver-
		wendet, der um die Amplifierunterstützung erweitert wurde.

		- Amplifierunterstützung
		- Moduleinfo
@endnode

@node "Deltamusic 1.0" "Deltamusic 1.0"

 Deltamusic1.0

	        Von Delirium übernommen und kräftig erweitert z.B. Songend,
		Volume, Balance, Voices, Analyzer ...
		Mich wundert nur, daß bei Delta 2.0 nicht auch die
		Playroutine extern ist wie hier.

		- Amplifierunterstützung
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "Deltamusic 2.0" "Deltamusic 2.0"

 Deltamusic2.0

	        Die Playroutine ist im Modul. Das Soundsystem läuft sogar
		auf Kick2.0+ und ist sogar PD.
		Kritik: Für Synthetische Songs sind die Module zu lang.
		Deltamusic unterstützt Analyzer, Volume, Voices... .
		SongEnde wird erkannt.
        Hinweis:Delta-Module sollten nicht zu kurz gesaved werden, da der
		Player dann abzustürzen droht.


		- Amplifierunterstützung
@endnode

@node "DigiBooster" "DigiBooster"

 DigiBooster

		Digibooster ist ein Tracker aus Polen, der vor allen Dingen mit der
                Limitation des Protrackers auf maximal 4 Stimmen Schluß machen will
                und bis zu 8 Stimmen anbietet. Leider läuft der Digibooster immer noch
                auf einem Hardware-Screen und ist auf Systemen mit Grafikkarte
                praktisch wertlos. Der Player stammt von den Autoren selbst und 
                wurde noch nicht weiter überarbeitet.
              

@endnode

@node "Digital Illusions" "Digital Illusions"

 Digital Illusions

		Ein Protrackerpacker, der vor allem in den allseits
		bekannten Flipperspielen der gleichnamigen Firma ver-
		wendet wird (Pinball Dreams, Pinball Fantasies).

		- Amplifierunterstützung
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- intern im Eagleplayer
@endnode

@node "Digital Mugician" "Digital Mugician"

 Digital Mugician

		Soundsystem mit coolen Effekten, läuft sogar mit Kick 2.0+,
		ist aber der reinste Hardware-Hack (unterstützt nur df0 !!!).
		Die Playroutine wurde von Delirium übernommen, ich dürfte
		aber trotzdem alles alleine gemacht haben. Die Playroutine
		wurde um 500 Bytes gekürzt und ins Fastram verlagert. Die
		Anzahl der Subsongs kann jetzt berechnet werden und das
		Songende wird auch erkannt.
		Eine Längenberechnung sowie eine Subsongberechnung wurde
		ebenfalls integriert. Patternswitching ist ebenfalls möglich.
		In der registrierten Version können die Module sogar abgespeichert
		werden.
                Der Abspieler unterstützt auch die @{b}Digital Mugician II@{ub} Module.

		- Amplifierunterstützung
@endnode


@node "DSS" "DSS"

 DSS

		Digital Sound Studio, ein Soundtrackerclone als Beigabe zum
		GVP Soundsampler. Wenn einer sich nicht unbedingt einen
		Sampler kaufen will, lohnt sich das nicht, da der DSSTracker
		so gut wie keine SpecialFX unterstützt, Protracker ist da
		besser - und PD.
                Der Abspieler besitzt die für Protracker & Clones beim
                Eagleplayer üblichen Features.

		- Amplifierunterstützung
                - Moduleinfo
                - Patternscroll
                .
                .
                .
@endnode

@node "EMS" "EMS"

 EMS

		Eine französische Produktion, leider weiß ich über das Teil
		so gut wie gar nichts. Die Playroutine habe ich, genau wie
		mein einziges Modul, von Delirium bekommen. Allerdings gab`s
		eine Menge zu tun, da weder Lautstärkeregelung noch Songend
		usw. eingebaut waren und dabei ist die Playroutine doku-
		mentiert....

		- Amplifierunterstützung
@endnode

@node "Eureka-Packer" "Eureka-Packer"

 Eureka-Packer

		Soundpacker, der in verschiedenen Demos zu finden ist.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer

@endnode


@node "Face the Music" Face the Music"

 Face the Music

		Face the Music von Maxon, das bestklingende 8-Stimmen Musik-
		programm für Standard-Amigas, allerdings auch der
		schlechteste vorstellbare Support für Programmierer, keine
		Playroutine beim Original dabei und dazu noch ein absolut
		fies geschützter CLI/WB-Player. Es war eine Sauarbeit, das
		Teil als Player zum Laufen zu bringen, jedenfalls unter-
		stützt der Eagleplayer FTM-Player alles nötige, die interne
		Loadroutine des Players wurde entfernt, Module dürfen auch
		gepackt werden, die Allokierung der Audiokanäle erfolgt
		über den Eagleplayer und der Hack auf $70 wurde unter
		Schweißtriefen ausgebaut. Allerdings arbeitet das Teil
		immer noch mit eigenem Interrupt.
		Ein Saven des Moduls ist nur in der registrierten Version
		möglich.
@endnode


@node "FastTracker II" "FastTracker II"

 FastTracker II

		Ein Remake des legendären @{"Protracker" Link Protracker}-Clones Fasttracker.
                Bis zu 32 Stimmen werden unterstützt, sowie eine Menge neuer Spezialeffekte
                (z.B Ping-Pong-Loops). Momentan werden die Samples noch automatisch auf 8
                Bit heruntergerechnet, was sich in einer der nächsten Eagleplayerversionen
                durchaus ändern kann. Die Amiga-Replayroutine stammt von Jarno Paananen.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Autorsuche
@endnode


@node "FC-M Packer" "FC-M Packer"

 FC-M Packer

		Ein @{"Protrackerpacker" Link Protracker}.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode


@node "Fred" "Fred"

 Fred

		Und wieder ein Player, wo die Playroutine im Modul ist,
		(manche Leute lernen einfach nicht, daß sowas so etwas 
                nichts taugt)
		Bei mir unterstützt der Fred-Player Volume ...
		Eine Subsongrange wurde eingebaut.

		- Amplifierunterstützung
@endnode


@node "Future Composer 1.4" "Future Composer 1.4"

 Future Composer 1.4

	        Future Composer V1.0 bis V1.4 Player. Die Playroutine ist
		von Super Sero of Superions. Bevorzugt in Intros verwendet,
		wegen der Kürze der Module. Unterstützt werden Lautstärke,
		Balance, Songend, Stimmenein-und Ausschalten. Es wird der
		interne Interrupt des Eagleplayers verwendet.
		Hat irgendeiner eine Idee, wie man Hippel-Module in FC
		konvertiert?

		- Amplifierunterstützung
		- Save Modul		 (@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@node "Future Composer 1.3" "Future Composer 1.3"

 Future Composer 1.3

                Future Composer V1.0 bis V1.4 Player. Die Playroutine ist
                von Super Sero of Superions. Bevorzugt in älteren Intros
                verwendet, wegen der Kürze der Module. Unterstützt werden
                Lautstärke, Balance, Songend, Stimmenein-und Ausschalten.
                Es wird der interne Interrupt des Eagleplayers verwendet.

                Hat irgendeiner eine Idee, wie man Hippel-Module in FC
                konvertiert?

		- Amplifierunterstützung
		- Save Modul		 (@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "Fuzzac Packer" "Fuzzac Packer"

 Fuzzac Packer

		Ein @{"Protrackerpacker" link Protracker}.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode


@node "Game Music Creator" "Game Music Creator"

 Game Music Creator

		Ich weiß nicht so recht, was ich von diesem Programm halten
		soll, keiner arbeitet damit, dafür hatte die Playroutine
		dringend einige Optimierungen nötig. Sie arbeitet mit
		internem Interrupt. Das GMC-Modul wird intern in @{"Protracker" Link Protracker}
		kovertiert und dann mit diesem Replay abgespielt. GMC hat
		daher alle Protrackereigenschaften (Volume, Balance ...)
		Moduleinfo.

		- Amplifierunterstützung
		- PatternScroll
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "GlueMon" "GlueMon"

 GlueMon
 
		Über diese Soundsystem ist nichts weiter bekannt.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@node "GMOD" "GMOD"

 GMOD

		CustomPlayer des Multiplayer von Bryan Ford, angepaßt von Tik/Retire. Keine
		Analyzeransteuerung. Eventuell Lautstärkeeinstellung, hängt vom Modul ab.
@endnode


@node "Heatseeker MC1.0" Heatseeker MC1.0"

 Heatseeker MC1.0

		Ein @{"Protrackerpacker" Link Protracker}.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer

@endnode


@node "Hippel" "Hippel"

 Hippel

		Wieder ein Soundsystem, daß die Playroutine im Modul hat und
		in dieser Art wohl auch das Bescheuerste. Da unterscheidet
		sich wirklich jede Playroutine von der anderen.
		Der Hippel-Umbau testet z.Z. die Playroutine des Moduls auf
		27 Sub-Routinen, die umgebaut werden müssen, um Hippel
		analyzerfähig zu machen, ja ihr habt richtig gehört, Hippel
		ist analyzerfähig (Boah eh) :-) und Songend gibt`s als
		Zuschlag dazu (schabadabadu Mr. Feuerstein) !
		Ich bezweifle stark, daß das alle Subroutinen sind. Es gibt
		bestimmt irgendwo ein Hippel-Modul, daß nicht funktioniert.
		Hippel ist das Vorbild des Future-Composers !!!
		Man erkennt die Ähnlichkeit im Analyzer bei identischen
		Modulen.
		Hippel ist ein sehr altes Soundsystem. Es wurde wie Whittaker
		vorwiegend in den Jahren 1988-89 benutzt.
		Hippel hat Probleme auf dem A4000 !
		Hippel sollte jetzt jetzt besser auf schelleren Rechnern
		laufen.

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "Hippel-COSO" "Hippel-COSO"

 Hippel-Coso

	        Bei Hippel-Coso-Modulen handelt es sich um Hippelmodule ohne
		Playroutine und das Modul beginnt mit dem String "COSO". Der
		Player versucht ein Samplefile nachzuladen
		Es wurde der Delirium-Player verwendet. Die Playroutine liegt
		jetzt im FastMem. Incl. Songend

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "Hippel_7V" "Hippel_7V"

 Hippel 7V

		Hippel 7V ist ein Soundsystem von Jochen Hippel, welches bis
		zu 7 Stimmen abspielen kann. Der Player ist ziemlich lang-
		sam und uralt. Hippel 7V unterstützt Subsongs.

@endnode


@node "In Stereo 1.0" "In Stereo 1.0"

 In Stereo/Synth

	        Es handelt es sich um verwandte Soundsysteme. InStereo war
		der Vorgänger von Synth. Man kann InStereo-Module mit dem
		Synthreplayer abspielen. Um eventuelle Komplikationen zu
		vermeiden wurden aber zwei verschiedene Replayer verwendet.
		Es wurden einige Bugs in den Replayern ausgebaut. Die Player
		unterstützen ModuleInfo in folgender Form: Songname wird
		erkant, Autorname wird erkannt & eine Längenroutine ist auch
		eingebaut. Die Anzahl der Subsongs kann berechnet werden und
		Songenderkennung ist auch vorhanden.
		Die Playroutinen von Synth & InStereo wurden ins FastRAM
		verlagert.

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@node "Synth 4.0" "Synth 4.0"

 siehe @{"In Stereo 1.0" link "In Stereo 1.0"}

@endnode

@node "In Stereo 2.0" "In Stereo 2.0"

 In Stereo 2.0

		In Stereo 2.0 ist der Vorgänger des @{"SonicArrangers" link SonicArranger}. Das Haupt-
		programm sieht aus wie das vom SA. Die Module sind im Aufbau
		ähnlich, allerdings nicht kompatibel. In Stereo 2.0 wurde nie
		released.
@endnode

@node "IFF 8SVX" "IFF 8SVX"

 IFF 8SVX

                IFF 8SVX ist das auf dem Amiga gebräuchlichste
                Format für Samples. Der Abspieler unterstützt sowohl
                Mono- als auch Stereodateien, sowie Fibonacci-Delta
                gepackte Samples. Dateien mit einer Länge größer
                als etwa 200 kB werden direkt von der Festplatte
                abgespielt, das heißt, die maximale Länge der 
                Dateien kann problemlos größer als der verfügbare
                Arbeitsspeicher sein.

		- Amplifierunterstützung
		- Moduleinfo
                - Spielzeitberechnung
@endnode

@node "IFF-SMUS" "IFF-SMUS"

 IFF-SMUS

		Die Playroutine wurde von Delirium übernommen.
		SMUS-Files können jetzt gepackt werden, wenn SaveT: einge-
		schaltet ist. Weiterhin werden die Instrumente bei EXTLoad
		geladen und nicht bei InitPlayer, daraus folgt, man kann ein
		Modul laden, wenn das andere Modul noch spielt. SMUS
		unterstützt nun auch die Analyzer.

		- Amplifierunterstützung
@endnode

@node "Jamcracker" "Jamcracker"

 Jamcracker

	        Relativ selten gesehenes Soundformat mit übersichtlicher
		Playroutine, wird gern mit Synthsamples verwendet. Gegen-
		über dem Futurecomposer hat das Teil den Vorteil, daß es
		problemlos unter 2.0+ läuft (jedenfalls die mir bekannte
		Version von XGAG).

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Songende 
		- Patternscroll
		- Spielzeitberechnung
@endnode


@node "Jason Page" "Jason Page"

 Jason Page

		Endlich gibt es einen funktionieren Jason Page Player.
		Vielen Dank an Andy Silva & marley/IFT.
		Jason Page ist ein Soundformat, welches vor allem
		synthetische Instrumente verwendet und dabei noch er-
		staunlich gut klingt.
		Jason Page unterstützt Subsongs.

		* Amplifierunterstützung
@endnode

@node "J.C.Brooke" "J.C.Brooke"

 J.C.Brooke

		Ein sehr altes Soundformat, welches ähnlich wie @{"Whittaker" Link "David Whittaker"}
		klingt. Die Playroutine befindet sich mal wieder im Modul.
		Der Player unterstützt mal wieder nichts (Kommt ja auch
		nicht von DEFECT).

@endnode

@node "Kefrens Sound Machine" "Kefrens Sound Machine"

 Kefrens Sound Machine

		Der erste Soundtrackerpacker überhaupt, findet sich nur in
		uralten Kefrens Demos. Geschrieben von Razmo/Kefrens.
		Unterstützt kaum Effekte und hat 16 Samples.


		- Amplifierunterstützung
		- PatternScroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@Node "Kript" "Kript"

 Kript

		Hier handelt es sich um einen Protracker-Codierer, bei dem
		das Modul mit einem frei definierbarem Code verschlüsselt
		werden kann. Man kann das Modul nur noch an dem M.K. bei
		Offset $438 erkennen, da sonst jedes Byte jeden x-beliebigen
		Wert annehmen kann. Der Player würde daher auch jedes Pro-
		trackermodul mit dem Code 0 abspielen. Der Code kann über
		das Konfigurationsgadget im @{"Manager" ALink "EP_Engine.Guide/Manager"} eingestellt werden.
		Der Player ist standardmäßig ausgeschaltet, weil er wie
		erwähnt, @{"PT" Link "ProTracker"} erkennt und dies würde ziehmlich verwirren.

		- Amplifierunterstützung
		- PatternScroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Autorerkennung
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@Node "Laxity-Player" "Laxity-Player"

 Laxity-Player

		Ein geripptes Soundformat, von dem wir gerade mal ein
		Modul haben. Wer kann uns helfen.
		Das Format klingt sehr synthetisch.
		Auch bekannt als Powertracker.

@endnode

@node "LME" "LME"

 LME

		Gerippte Playroutine aus einem Customsong von Marley/Infect.
		Wurde eben mal schnell 'n Replayer draus gebastelt.
@endnode

@node "Magnetic Fields" "Magnetic Fields"

 Magnetic Fields

		Ein sehr guter Protrackerpacker. Sonst ist nichts weiter bekannt
		über dieses Soundsystem
@endnode

@node "Major Tom 2.01" "Major Tom 2.01"

 Major Tom 2.01

		Playroutine von marley/Infect übernommen und an den
		Eagleplayer angepaßt. Nur 2 Module vorhanden. Wer kann uns
		daß Programm zusenden? Der Player unterstützt jetzt Songende,
		Patternumschaltung, Moduleinfo & Analyzer.

		- Amplifierunterstützung
@endnode

@node "Mark II" "Mark II"

 Mark II

		Eine Soundsystem von Cachet. MII hat einen eigentümlichen
		Klang und ist in den Scopes echt lustig anzusehen.
		OldMark-II wurde ebenfalls implementiert. Songende wird
		erkannt.
		Volume,Balance ... Ok.

		- Amplifierunterstützung
@endnode

@node "Mark Cooksey" "Mark Cooksey"

 Mark Cooksey
 
		Über diese Soundsystem ist nichts weiter bekannt.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "Maxtrax" "Maxtrax"

 Maxtrax
		Keine Dokumentation verfügbar.

@endnode

@node "MCMD" "MCMD"

 MCMD

		Eine gerippte Playroutine (1 TestModule), die Ähnlichkeiten
		mit Hippel-Playroutinen hat. Auch das Module deutet darauf hin.
		Ich habe den Player trotzdem erstmal implementiert.
@endnode

@node "MED"

 MED

		Programm von Teijo Kinnunen, entstand wohl aus der Idee,
		einen Soundtracker unter DOS zu schaffen, kann Sound-
		trackerfiles laden und saven, in MED umgewandelte Sound-
		trackerfiles sind zudem kürzer. Dieser Player ist für
		MED und OctaMED 4-Stimmen Songs. MED hat eine ekelig lange
		Playroutine, die einen eigenen CIA-Interrupt einbindet.
		Der Player besitzt natürlich die Möglichkeiten von Lautstärke-
		und Balanceregelung, Stimmenein- und Ausschaltung, Analyzer-
		unterstützung sowie Patternscrolling.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Autorerkennung
@endnode


@node "Moduleprotector" "Moduleprotector"

 ModuleProtector

		Modulformat, das nichts so ähnlich sieht, wie dem @{"Propacker" link "Propacker 2.1"}
		V2.1, wenn auch die Patterns nicht gesplitted sind
		und die eine Playroutine das andere Modul nicht spielt.
		Verwendet wird das Format gern von LSD (Grapevine#7, Despdir
		Trackmo). Eine andere Variante haben wir im "Voice Attack II"
		Musikdemo gefunden. Die 3 Module haben exakt denselben Aufbau,
		sie lassen sich auch mit der hier genutzten Playroutine ab-
		spielen, haben aber teilweise andere Kommandos. Außerdem sind
		bei der dort verwendeten Playroutine so wenig Kommandos
		implementiert, daß ich fast behaupten möchte, es handele sich
		um Soundtracker2.3 oder so was.
		Die Checkroutine funktioniert halbwegs (jedenfalls mit den uns
		zur Verfügung stehenden Modulen). Da es aber so viele Varianten
		gibt, die sich nur in Details unterscheiden, die eine 100%-ige
		Erkennung ausschließen, sind Probleme durchaus möglich. :(-=-=
		Interner Interrupt benutzt...
		Es wird zur Zeit nur ein Mode unterstützt. Der Special-Mode
		ist noch nicht implementiert.
		Ein Saven des Moduls ist in der registrierten Version möglich.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode


@node "M. Grouleff" "M. Grouleff"

 Morton Grouleff

		Ein Soundsystem, das Module mit Playroutine im Modul
		speichert, die erstaunlich kurz ist. Es wurden alle
		eagleplayertypischen Anpassungen vorgenommen.
		Songende wird ebenfalls erkannt.
@endnode


@node "MPEG Audio" "MPEG Audio"

 MPEG Audio

		Dieser Player basiert auf der Nutzung der mpega.library von
		Stèphane Tavenard. (auf dem Aminet unter util/libs verfügbar)

		Es wird mindestens ein mit einem 68030 ausgestatteter Amiga
		vorausgesetzt, empfohlen: 68060. Weiterhin benötigt der Player
		einen Amplifier, der Streaming unterstützt (FastRam-Amplifier,
		8/14 Bit-Amplifier, Toccata-Amplifier), empfohlen: 14 Bit
		oder Toccata-Amplifier zum direkten Abspielen der 16 Bit Daten.

		Abgespielt werden Songs von MPEG-I Layer1 bis 3 und MPEG-II
		Layer 1 bis 3.

		Zur Einstellung existiert ein Konfigurationsfenster, verwenden
		Sie bitte den @{"Manager" alink "EP_Engine.guide/Manager"}.
		Optionen:
		 Buffer time: Einstellung der Größe des Zwischenspeichers
		 Priority:    Taskpriorität des Lade- und DekoderTasks
		 Qual:        Genauigkeit des Dekoders, je geringer desto schneller
		 Max. Freq:   Einstellungen für Abspielen mit herunterskalierter
		              Frequenz, für langsame Rechner Angabe von 11025 oder
		              22050 empfohlen
		 Mono:        Mono erzwingen, somit schnelleres Dekodieren

		Features:
		- Amplifierunterstützung
		- Moduleinfo (incl. MP3 Tag Info)
		- Spielzeitberechnung
		- schnelles Vor-Zurückschalten
		- Scopes
		- Pitch/Speed (!)
@endnode


@node "M.O.N." "M.O.N."

 M.O.N.

		MON heißt Maniacs-of-Noise Player. MON wurde z.B. in Unreal
		verwendet (teilweise auf festen Adr.), was normalerweise nicht
		der Fall ist. Bei MON ist die Playroutine im Modul.
		Sie wird beim Start umgebaut, so daß auch MON Analyzer, Volume,
		Balance und Voices-Regelung hat. Songende wird erkannt.
		MON hat teilweise Probleme auf Turbokarten.

		* @{b}Amplifierunterstützung@{ub}
		* Save Modul
@endnode


@node "Music Assembler" "Music Assembler"

 Musik Assembler

	        Bei MusicAssembler ist die Playroutine ebenfalls im Modul.
		Ich besitze ein Module von MA, welches rund 3K lang ist,
		erstaunlich oder (und das mit Playroutine) !
		Music-Assembler ist ebenfalls Analyzerfähig... .
		Songende wird teilweise erkannt.

		* Amplifierunterstützung
@endnode

@node "MusiclineEditor" "Musicline"

 Musicline

		Keine Dokumentation verfügbar.
@endnode

@node "MusicMaker4" "MusicMaker 4"

 Music-Maker 4

		Die Playroutine haben wir direct vom Autor bekommen. Vielen
		Dank an dieser Stelle. Die Eagleplayeranpassungen wurden
		vorgenommen. Soundsystem mit sehr gutem Klang, allerdings
		teilt sich ein Song in mehrere Dateien auf. Es muß das File
		mit der Endung "*.sdata" geladen werden. Alle Files müssen
		sich in einem Verzeichnis befinden.
		Die Playroutine ist MusicMaker V2.4 kompatibel.
@endnode

@node "MusicMaker8" "MusicMaker 8"

 Music-Maker 8

		Die Playroutine haben wir direct vom Autor bekommen. Vielen
		Dank an dieser Stelle. Die Eagleplayeranpassungen wurden
		vorgenommen. Soundsystem mit sehr gutem Klang, allerdings
		teilt sich ein Song in mehrere Dateien auf. Es muß das File
		mit der Endung "*.sdata" geladen werden. Alle Files müssen
		sich in einem Verzeichnis befinden.
		Die Playroutine ist MusicMaker V2.4 kompatibel.
@endnode

@node "Noisepacker 2.x" "Noisepacker 2.x"

 Noisepacker 2.x

	        Programm zum komprimieren von Noisetrackerfiles, effizienter
		als @{"Prorunner 2.0" Link "Prorunner 2.0"}, aber nur mit Noisetrackerunterstützung.
		Stammt von Twins of Phenomena, wird gern von Phenomena,
		Quartz, Andromeda und auch Anarchy genutzt. Der Player kann
		die tatsächliche Länge des Modules berechnen und die Anzahl
		der Patterns usw. bestimmen (nützlich für Leute, die per
		Hand rippen) -> Eagleplayerfunktion "About Modul" = [?]
		Es wird der interne Interrupt genutzt, die Erkennungsroutine
		ist so geschrieben worden, daß das Modul ruhig auch zu lang
		oder zu kurz sein kann. Das Modul wird intern in @{"Protracker" link "Protracker"}
		konvertiert.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Noisepacker 3.x" "Noisepacker 3.x"

 Noisepacker 3.x

	        Remake von @{"NP2" link "Noisepacker 2.x"}, mit eigenem Window, erheblich besserer
		Packrate, hängt sogar @{"Propacker 2.1" link "Propacker 2.1"} ab. Ansonsten siehe
		@{"Noisepacker 2" link "Noisepacker 2.x"}.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Noiserunner" "Noiserunner"

 NoiseRunner

	        Dieser Packer kommt von Chaos of Sanity. Der Player hat noch
		M.K.- Kennung drin, was jeden bisher erschienenen Player
		abkotzen läßt. Ich versteh sowieso nicht, warum immer noch
		Module geschützt werden. Wer Ahnung hat, kriegt die eh raus
		und plagt sich mit der Erstellung neuer Eagleplayer rum
		(Stimmts Turbo ?), und wer keine hat, versagt schon bei
		@{"Noisepackermodulen" link "Noisepacker 2.x"}.
		Doch zurück zur Playroutine: Genau wie beim @{"Prorunner 1.0" link "Prorunner 1.0"}
		werden die Module in @{"Protracker" link "Protracker"} konvertiert! Rest siehe
		dort.
		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.

		- Amplifierunterstützung
		- Save Modul				(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Noisetracker Compressed" "Noisetracker Compressed"

 Noisetracker Compressed

		Der United Forces Noisetracker in der Version 1.3 D, besitzt
		die Möglichkeit, Module in gepackter Form zu sichern. Für
		Leute, die noch mit Noisetracker arbeiten sollten,
		sicherlich eine sehr gute Alternative zum @{"Noisepacker" link "Noisepacker 2.x"}. Mit
		dem Eagleplayer genauso nutzbar wie jeder andere Tracker auch,
		nutzt internen Interrupt, übrigens recht gute Packrate.
		Bis jetzt werden die Module mit Playroutine im Modul noch
		nicht unterstützt, wird noch nachgereicht.
		Ein Saven des Moduls ist in der registrierten Version
		möglich.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "MTH" "MTH"

 MTH

		Playroutine von Turbo/Infect bekommen und angepaßt.
		Unterstützt Subsongs und die meisten Funktionen, die ein
		Eagleplayer haben muß.

		Wird neuerdings mit dem @{"Benn Daglish" link "Benn Daglish"} Player abgespielt.
@endnode

@node "OctaMED" "OctaMED"

 OctaMED

		Player für 5-8-Stimmige Octamedsongs. Da wir Betatester
		des OctaMED sind, haben wir die aktuellste Playroutine
		bereits angepaßt.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Patternscroll
		- Moduleinfo
		- Sampleinfo
@endnode

@node "Oktalyzer" "Oktalyzer"

 Oktalyzer

	        Urahn aller 8 Stimmigen Musikprogramme und genau so sieht
		auch die Playroutine aus. Es war mir aber möglich, einen
		CIA-Timer einzusetzen, so daß unter NTSC und in den Produc-
		tivity- und VGA-Modi die Abspielgeschwindigkeit trotzdem
		stimmt.
		Der Eagleplayer unterstützt neuerdings Songend, Module-
		info und Patternumschaltung, außerdem wurden die Probleme
		mit @{"Monoscope" alink "EP_Engine.guide/Scopes"}, @{"Stereoscope" alink "EP_Engine.guide/Scopes"} und @{"Quadrascope" alink "EP_Engine.guide/Scopes"} beseitigt.
		Ab V1.52 unterstützt der Oktalyzerplayer auch den Pattern-
		scroller und Module- sowie Sampleinfo.

		- Amplifierunterstützung
		- PatternScroll
		- Autorerkennung
		- Moduleinfo
		- Sampleinfo
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Spielzeitberechnung
@endnode

@node "OldSoundtracker" "Old Soundtracker"

 Old Soundtracker

		Playroutine für alte Soundtracker (16 Samples). Es wurde
		die Playroutine des D.O.C. Soundtracker 2.0 verwendet, die
		von der Unterstützung halbwegs kompatibel zu alten Modulen
		ist. Es ist durchaus möglich, daß es Probleme mit einigen
		Modulen aufgrund der verwendeten Kommmandos gibt, da jeder,
		der einen Tracker gecoded, geklaut oder gekloded hat, seine
		eigenen Kommandos benutzt hat. Da heutzutage sowieso keiner
		mehr damit arbeitet, wurde auf aufwendige Anpassungen
		verzichtet. Der Player ist intern im EaglePlayer und unter-
		stützt Songloading (auch gepackte Songs). Eine Einstellung
		des Default-InstrumentenPfads ist im @{"Manager" alink "EP_Engine.guide/Manager"} möglich.  Die Samples
		dürfen gepackt werden (Powerpacker, File Imploder, CrM, LH,
		XPK, Stc, Pack).

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Songloading
		- Autorerkennung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "IFF EMOD" "QuadraComposer"

 QuadraComposer

		Ein relativ neuer Remake des legendären @{"Protracker" link Protracker} mit
		schöner Dos-Oberfläche und wählbarem ScreenMode und
		vielen Windows.
		Das Soundformat wurde auf ein IFF typisches umgebaut. Der
		QC kann @{"Protrackersongs" link Protracker} laden.

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Autorerkennung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
@endnode

@node "RIFF WAVE" "RIFF WAVE"

 RIFF WAVE
                Wave oder WAV ist das auf den PCs meistverbreitete
                Sampleformat. Momentan werden nur ungepackte Wave
                Dateien im PCM Format (8 Bit und 16 Bit) unterstützt.
                Der Player ist in der Lage, die Daten direkt in 16 Bit
                auszugeben, sofern ein entsprechender Amplifier aktiv
                ist (14 Bit Amplifier), ansonsten werden die Daten in
                8 Bit heruntergerechnet. Dateien mit einer Länge 
                größer als etwa 200 kB werden direkt von der 
                Festplatte abgespielt, das heißt, die maximale
                Länge der Dateien kann problemlos größer als der
                verfügbare Arbeitsspeicher sein.

		- Amplifierunterstützung
		- Moduleinfo
                - Spielzeitberechnung
@endnode

@node "PlayAY" "PlayAY"

 PlayAY

		Hierbei handelt es sich um einen Abspieler von Spektrumsongs.
		Dieser wurde von Raxsoft geschrieben und von DEFECT an das
		Amplfiersystem angepaßt..

		- Amplifierunterstützung
@endnode

@node "PlaySID" "PlaySID"

 PlaySID

		Ein Player zum Abspielen von C64-Songs. Dabei wird der
		C64 emuliert (Wahnsinn!). Es gibt bereits mehrere tausend
		Module. Der Player unterstützt das alte und das neue
		'Format', falls man überhaupt von einem Format sprechen
		kann, da es ja wie gesagt ein Emulator ist und ein Sound-
		programm bzw. Packer.
		Der Eagleplayer-Playsid benutzt die Playsid.library NICHT,
		da diese keine Scopes supportet. Es handelt sich um einen
		disassemblierten PlaySID 2.x. Er hat sehr viele Enforcer
		Hits, glückerlicherweise nur Reads, so dass bei uns noch
                keine auf diesen Player zurueckzufuehrende Abstuerze zu
                verzeichnen waren.

		- Moduleinfo

@endnode

@node "Polkarunner" "Polkarunner"

 Polkarunner

		Ein @{"Protrackerpacker" link Protracker}.

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Powermusic" "Powermusic"

 Powermusic

		Ein Protrackerformat, bei dem die Samples für eine bessere
		Packrate umcodiert wurden. (nach dem selben Schema, wie bei
		der lh.library).

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Profiteam-Soundfactory" "Profiteam-Soundfactory"

 Profiteam-Soundfactory

		Über diese Soundsystem ist nichts weiter bekannt.

@endnode


@node "Promizer 0.1" "Promizer 0.1"

 Promizer 0.1

		Der @{"Protracker" link Protracker} Optimizer von Frank Hülsmann (Tech). Erste
		Version des Promizers. Playroutine noch nicht im Modul und
		keine Subsongs.
@endnode

@node "Promizer 1.x" "Promizer 1.x"

 Promizer 1.x

		Vom Promizer gibt es inzwischen so viele Versionen (verschieden
		1.x Versionen), daß man echt `n Krise beim Anpassen des Players
		bekommt. Denn jede Version hat eine etwas andere Playroutine
		und die will jedes mal angepaßt werden.
		Bei dieser Version sind Subsongs möglich, eine Subsongrange
		wurde eingebaut.
@endnode

@node "Promizer 2.0" "Promizer 2.0"

 Promizer 2.0

	        Aktuelle Version des Promizers. Keine Subsong-Unterstützung
		mehr. Wieso ????
		Alle Promizer unterstützen Patternswitching, Songend-
		erkennung, Volume, Balance, Voices & Engines.

		Die Version2.0 des Promizers wurde integriert, nachdem es
		auf Turborechnern diverse Probleme mit der Playroutine der
		Module gab.

		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Promizer 4.0" "Promizer 4.0"

 Promizer4.0

		Endlich mal wieder `n Promizer ohne Playoutine im Modul und
		mit Kennung, aber ziemlich viel von der @{"Prorunner 2.0" link "Prorunner 2.0"}-Play-
		routine abgekupfert, Modulformat vom @{"Propacker 2.1" link "Propacker 2.1"} ab-
		geguckt.


 Hinweis

		Promizer-Module findet man vor allem in TECH-Demos !!!
		(und neuerdings bestimmt auch bei Masque)
		99% rippbar !!!
@endnode

@node "Propacker_1.0" "Propacker_1.0"

 Propacker_1.0

		Wurde von Azatoth of Phenomena geschrieben, packt aüßerst
		mäßig, die Playroutine war selbstmodifizierend, hardware-
		hackend ohne Ende, einige Kommandos fehlen und obendrein
		will der Typ auch noch Geld dafür haben.

		Für den Eagleplayer wurde der zweite Interrupt entfernt,
		eine Modulinfofunktion eingebaut, die die korrekte Länge
		und Packeffizienz angeben kann und zudem die Tempofunktion
		implementiert,das heißt,auch Module wie "Condom Corruption"
		(Spaceballs) und "Blow ya Nose Now"(E.O.K.D.P.) arbeiten
		mit der korrekten Geschwindigkeit.

-------->       Aufgrund dessen, daß die Patterns hinter den Samples am
		Ende des Files liegen, toleriert die Erkennungsroutine keine
		zu kurzen Modules, weil ein Absturz sehr wahrscheinlich ist.
		Wenn das Modul also per Hand gerippt wird, lieber ein paar
		Bytes mehr saven, der Player gibt die richtige Länge an.

		Die Playroutine benutzt einen eigenen CIA-Timer

        Achtung: Der Packer ist in der Lage, doppelte oder ungenutzte
		 Patterns zu entfernen. Es ist also durchaus möglich, daß
		 plötzlich im "About Modul"-Modus eine andere Anzahl Patterns
		 angezeigt wird als die des ungepackten Modules und somit
		 auch eine andere Packrate und ursprügliche Länge.

        Achtung2:
		 Dieses Teil geistert auch noch unter den Namen "Strange-
		 player" und "Hannitracker" durch die Gegend, beide mit katas-
		  trophaler Checkroutine, die auf die oben beschriebenen Ge-
		 fahren keinerlei Rücksicht nimmt, nicht mal Lautstärke usw.,
		 peinlich ...

		 Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		 Eagleplayer.

		- Amplifierunterstützung
		- Moduleinfo
		- Sampleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Propacker 1.0" "Propacker 1.0"

 Propacker 1.0

		Wie PropackerVxx.1,nur die Patterns sind in je 4 Teile ge-
		splitted worden. Einzige Möglichkeit die beiden auseinander-
		zuhalten. Wird auch ab und zu benutzt. Die Erkennung ge-
		staltet sich ziemlich schwierig. Im Prizip erkenne ich dieses
		Teil nur, indem ich den Typ 1 (PropackerVxx.1) ausschließe.
		Wenn also die Patterns in Ordnung sind und es sich nicht um
		Typ 1 handelt,ist es für den Player Typ 2. Interner Interrupt
		wird benutzt.

		Alle Propacker unterstützen ab jetzt die Protracker Tempo Funktion !!


		- Amplifierunterstützung
		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer	(ab V1.50)
@endnode

@node "Propacker 2.1" "Propacker 2.1"

 Propacker 2.1

		Gute Alternative zum @{"Noisepacker 3.x" link "Noisepacker 3.x"}, packt nur wenig
		schlechter, unterstützt sogar alle Protrackerkommandos.
		Die Checkroutine wurde anfangs von Turbo of Infect über-
		nommen, allerdings komplett überarbeitet. :)-=-=
		Ist im Gegensatz zu den mit "Vxx" betitelten Pro??Packern
		relativ sicher zu erkennen.
		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "ProPacker 3.0" "Propacker 3.0"

 Propacker 3.0

		siehe @{"Propacker 2.1" link "Propacker 2.1"}, kleine aber feine Änderungen im Modul
		(andere Offsetangabe), nicht mit @{"PP2.1" link "Propacker 2.1"} abspielbar, deshalb
		eigener Player. Ich habe dieses Teil bis jetzt nur auf den
		Parasite-Musik-Disks gefunden und dort auch die Playroutine
		gerippt.
		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Prorunner 1.0" "Prorunner 1.0"

 Prorunner 1.0

		Von Cosmos of Sanity erschaffene Playroutine, die @{"Protracker" link "PRotracker"}-
		module konvertiert, um Geschwindigkeitsvorteile zu erbringen.
		Da ich den Prorunner bis vor kurzem noch nicht mein eigen
		nennen konnte, die aus "Wicked Sensation"(cooles Demo Jungs)
		gerippte Playroutine irgendwo nicht wollte, nachdem ich den
		2.Interrupt (CIAB) gekillt hatte, beging ich einfach den
		Frevel und baute einen Online-Dekodierer in meine Protracker-
		routine ein. Es läuft wunderbar, die Tempofunktion ist
		implementiert, Moduleinfo, Songend usw. usf. möglich, also
		wird das auch so bleiben, obwohl der Sinn des Prorunners
		dadurch total mißachtet wurde (in Bezug auf Speed). 
        Achtung: Bei "Creator" steht "Cosmos/Amiga Freelancers"
		 Die Prorunner Playroutine stammt auch von Cosmos, die
		 Freelancers haben insofern damit nichts zu tun, da aber bei
		 mir eine Protrackerroutine verwendet wurde, hielt ich es
		 für angebracht, die F. zu erwähnen (die ja sowieso Ursprung
		 alles Protrackermäßigen sind  :))-=O=

		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.


		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Autorerkennung
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Prorunner 2.0" "Prorunner 2.0"

 Prorunner 2.0

		Auch von Cosmos kommend, schlägt dieses Teil eigentlich
		mehrere Fliegen mit einer Klappe:
		1. Gibt es eine eindeutige Kennung
		2. Gibt es eine schnelle Playroutine
		3. Gibt es dazu einen komfortablen Eagleplayer
		4. Packt das Teil fast so gut wie @{"Noisepacker2" link "Noisepacker 2.x"}
		5. besitzt der Eagleplayer die Tempo-Funktion
		und 6. möchte ich jetzt von Cosmos die Werbekosten erstattet
		       kriegen :)-=-=
		
		Einen kleinen Wermutstropfen birgt allerdings der
		Prorunner2.0. Er ist in Zeiten von Req und Reqtools zu un-
		komfortabel und er hat einen bösen Bug: beim Packen des
		Moduls "Condom Corruption" von Spaceballs stürzt er ab.
		(In einer früheren Ausgabe der Player.dok hatte ich behauptet,
		er packe "ministry" von TSL nicht. Sorry, das war ein Bug von
		mir.)

		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Protracker" "Protracker"

 Protracker

		Was gibts hier noch zu sagen, DER Standard in sachen Musik,
		gern benutzt, überall gesehen und oft kopiert. Hier wird
		die Protracker1.1-Routine angewandt. Da nach meinen
		Informationen der von Cryptoburners vorgeschlagene Standard
		noch in der Diskussion befindlich ist, sollte diese Routine
		mit allen Protrackermodulen klarkommen.
		Der Protracker-Replayer ist intern im EaglePlayer und unter-
		stützt Songloading, auch gepackte Songs. Ein Pfad-Einstellung
		für Default-Instrumente ist ebenfalls möglich.Die Samples
		dürfen gepackt werden (Powerpacker,File Imploder,CrM,LH,XPK,
		Stc,Pack).
		Aus Zeitgründen wurde noch keine Unterscheidung zum Noise-
		tracker eingebaut, ich bin auch nicht so pingelig und habe
		bis jetzt auch noch keine Probleme mit Noisetrackermodulen
		gehabt, zumal die von Riffel als "intelligent" bezeichnete
		Unterscheidung zwischen NT/ST/ProT auch nicht 100%-ig ist
		und gelegentlich rumspinnt, scheint eher ein Gag zu sein,
		um die Playerzahl künstlich zu erhöhen ...
		Es wurden mehrere Bugs und sogar Enforcer-Hits in der
		original Playroutine entfernt. Die Songenderkennung läuft
		jetzt 100%.
		Alle internen Protracker-Packer werden mit dieser Playroutine
		abgespielt.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Autorerkennung
		- Songloading
		- intern im Eagleplayer
		- Spielzeitberechnung
@endnode

@node "PS3M" "PS3M"

 PS3M

		Dieser Player beinhaltet gleich mehrere Player gleichzeitig,
		da diese teilweise ein ähnliches Fileformat besitzen und ohne
		größere Probleme mit der gleichen Playroutine abgespielt
		werden können (MTM, Fasttracker, Taketracker und Startrekker8).
                Desweiteren ist hier noch der Abspieler für Screamtracker
                enthalten. Geschrieben wurde PS3M von Jarno Paananen.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})

@endnode

@node "PSA" "PSA"

 PSA

		Über diese Soundsystem ist nichts weiter bekannt.

		- Amplifierunterstützung
@endnode


@node "Pumatracker 1.0"

 Pumatracker1.0

		Remake des legendären @{"Futurecomposers" link "Future Composer"}, nicht 2.0 kompatibel,
		lädt aber dafür auch keine Futurecomposermodule, klingt
		dennoch überraschend gut (für diejenigen, die damit ein
		Modul hinkriegen sollten). Songende wird unterstützt.

		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Amplifierunterstützung

@endnode

@node "Rob Hubbard" "Rob Hubbard"

 Rob Hubbard

		Soundsystem mit Untersongs. Vorsicht: Es ist keine Subsong-
		range eingebaut, beim Weiterschalten besteht Absturzgefahr!
		Analyzer werden unterstützt.
@endnode

@node "Rob Hubbard 2" "Rob Hubbard 2"

 Rob Hubbard 2

		Über diese Soundsystem ist nichts weiter bekannt.

		* Amplifierunterstützung
@endnode

@node "Ron Klaren" "Ron Klaren"

 Ron Klaren

		Jawohl, der Eagleplayer unterstützt als erstes Programm
		seiner Klasse (oder als erstes überhaupt ?) die Ron Klaren
		Module inclusive Lautstärke, Voices, Balance, Analyzer,
		SongEnd. Außerdem entfernt der R.K. Player einige Hardware-
		hacks.

		Allerdings ist zum Abspielen dieser Module noch einiges
		nötig und Programmiererfahrungen sind unerläßlich, da die
		Module auf festen Adressen liegen und ein special Format
		verwendet wird. Unser Vorschlag ist es, das Module voll-
		ständig zu disassemblieren, so daß ALLE festen Adressen
		in Labels umgewandelt werden (auch die festen Adressen im
		Datenteil !!). Danach in den Assembler laden, den
		Eagleplayer.i includen und das Macro "KlarenHeader" an den
		Anfang des Moduls setzen.
		Das Modul muß unbedingt in den Chipmem geladen werden und
		darf nur eine Sektion besitzen! Als letztes wird das Modul
		als Objektfile abgespeichert.(Seka & ASM-One : WO für Write
		Object).

		- Amplifierunterstützung

		Ein Beispiel liegt als disassemblierter Sourcecode bei.
		Have Fun !

 Beispiel:
		        section		0,Code_C
		        Klarenheader	end-start ;die Zahl ist unbedingt nötig
						  ;und gibt die Modullänge als
						  ;Objektfile an. !! WICHTIG !!
		Start
		        <hier das disassemblierte Modul einfügen>
		End



 !!!! Achtung !!!
		Es dürfen keinerlei Änderungen im Module oder der Play-
		routine vorgenommen werden, da der Eagleplayer ansonsten
		in arge Bedrängnis kommt! Es müssen die original Hardware-
		hacks enthalten sein !!!


 Anmerkung:
		Die Ron Klaren Module beginnen mit mehreren festen Jumps,
		gefolgt von mehreren  move #xx,d0  bra xx - Befehlen, die
		ebenfalls nicht gelöscht werden dürfen. Sie dienen zur
		Subsongberechnung.

 Anmerkung II:	Da der RonKlaren-Standard von uns (DEFECT) entwickelt wurde
		und dieser Player hierfür von uns (DEFECT) entwickelt wurde
		erheben wir Anspruch auf das Copyright in diesem Player.
		Falls also jemand hippo drauf ist, erwarten wir, daß man
		dies akzeptiert, wenn schon man den RK-Player klaut.
@endnode


@node "Scumm" "Scumm"

 Scumm

		Keine Dokumentation verfügbar.

		- Amplifierunterstützung
@endnode

@node "Sean Connolly" "Sean Connolly"

 Sean Connolly

		Keine Dokumentation verfügbar.
@endnode


@node "SidMON 1.0" "SidMON 1.0"

 SIDMon 1.0

		Soundsystem von 1988, von R.v. Vliet, läuft nur unter
		Kick1.3, der reinste Hardwarehack, Playroutine im Modul.
		Sidmon unterstützt Analyzer..., Songende und NextPattern
		(unter Schweißtrifen eingebaut)
		Wenn der Umbau des Moduls nicht erfolgen kann, dann wird
		das Modul normal, wie in jedem anderem Player abgespielt.
		Die unmöglichen Funktionen (Volume...) werden dann gesperrt.

		Ab Eagleplayer V1.54 wird eine eigene Playroutine verwendet,
		die im Modul wird ignoriert.

		- Amplifierunterstützung
		- Moduleinfo
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})

@endnode

@node "SidMON 2.0" SidMON 2.0"

 SIDMon 2.0

		Sidmon II, ist MIDI-fähig und läuft nur unter Kick 1.3, ist
		mal wieder der reinste Hardwarehack und ist sehr gewöhnungs-
		bedürftig. Mit Sidmon II können allerdings sehr gute
		synthetische Songs erstellt werden. Die Module sind gegenüber
		dem Sidmon1.0 ohne Playroutine, was für unsereiner immer
		positiv ist. Auch die Kennung ist nicht zu übersehen. Der
		Player unterstützt Patternswitching, Songende sowie
		Lautstärke, Balance, Analyzer... , was will man mehr?
		Mehrere durch Enforcer entdeckte Fehler wurden beseitigt.

		- Amplifierunterstützung
		- Moduleinfo
		- Save Modul 			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "Skyt-Packer" "Skyt-Packer"

 Skyt-Packer
		Soundpacker, der in verschiedenen Demos zu finden ist.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode


@node "SonicArranger" "SonicArranger"

 SonicArranger

		Dieser Player spielt die SA-Songs, SA-Module und SA-Module
		ohne Playroutine im Modul. Zum Abspielen der Moduls mit
		Playroutine wird der Songreplayer verwendet, daher kann
		es nicht zu 100% ausgeschlossen werden, daß es zu 
		Kompatbilitätsproblemen kommen kann, wobei dazu zu sagen
		ist, daß eine Weiterentwicklung von Sonic Arranger derzeit
		sehr unwahrscheinlich ist.
		Der Player unterstützt Patternswitching, SubSongs, Volume,
		Balance, Analyzer und Voices.
		Es ist höchstwahrscheinlich der Nachfolger von @{"InStereo" link "In Stereo"}/
		Synth. SonicArranger ist ein kommerzielles Musikprogramm von
		Brain-Trace-Design. An dieser Stelle vielen Dank an Carsten
		Schlote für die Vollversion des SonicArrangers.
		Songende wurde nach schweißtriefender Arbeit eingebaut.
		Weiterhin sind Patternumschaltung und Subsongs möglich.
		Als Bonus gibt es eine Spielzeitberechnung.

		- Amplifierunterstützung
		- Spielzeitberechnung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Patternscroll
		- Spielzeitberechnung
@endnode

@node "SoundControl" "Soundcontrol"

 SoundControl

		Playroutine von Turbo/IFT übernommen. Es wurden alle
		typischen Anpassungen für Eagleplayer vorgenommen.

@endnode

@node "SoundFX 1.3" "SoundFX 1.3"

 SoundFX1.3

		Wenn es stimmt, daß dieses Programm kommerziell vertrieben
		wird/wurde, dann läufts mir kalt den Rücken runter. Die
		"Playvoice"-Routine wurde so was von offensichlich vom
		Soundtracker kopiert, nee Leute, so ja nu nich.
		Ansonsten wurde alles nötige angepaßt - inclusive Pattern-
		umschaltung und Moduleinfo, wie es sich für einen Sound-
		tracker gehört.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@node "SoundFX 2.0" "SoundFX 2.0"

 SoundFX2.0

		Weiterentwicklung des @{"SoundFX1.3" link "SoundFX 1.3"}, unterstützt 31 Samples
		( AHA ! ) , ansonsten konnten kaum Neuerungen erkannt werden.

		- Amplifierunterstützung
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@Node "Soundtracker 2.6" "Soundtracker 2.6"

 Soundtracker2.6

		Weiterentwicklung der legendären D.O.C. Soundtracker, 31
		Samples, gesplittete Patterns (jede Spur mit eigenem
		Pattern), aber genausowenig SpecialFX, wie alle alten
		Soundtracker.

		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Amplifierunterstützung
		- PatternScroll
		- Moduleinfo
		- Sampleinfo
@endnode

@node "Soundmaster" "Soundmaster"

 SoundMaster

		Playroutine im Modul. Sollte alles normale für solche Player
		unterstützen. Ich bräuchte mal `n gutes Testmodul.
		Wir haben mit Mühe und Not ein's gebastelt, das nur pieps
		macht.

		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@node "SoundMon" "SoundMon"

 SoundMon

		Ein echter C64-Abklatsch und so sieht er auch aus. Läuft aber
		unter Kick 2.0 und arbeitet bedingt (wenn man ST-00:Modules
		assigned) auch mit FestPlatten zusammen. Ich finde es ist
		echt erstaunlich, wie man mit solch einen Teil überhaupt was
		hinkriegt, aber die Module klingen erstaunlich gut.
		SoundMon wird oft in Intros wegen seines guten Klangs und
		wegen der Kürze der Module verwendet.
		Playroutine liegt jetzt im FastRAM. Songende wird erkannt.
		Eine Längenberechnung wurde ebenfalls eingebaut.

		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Amplifierunterstützung
		- Moduleinfo
		- Sampleinfo
@endnode

@node "SoundMon 2.2" "SoundMon 2.2"

 SoundMon 2.2

		Remake des @{"SoundMon" link "Soundmon"}.

		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Amplifierunterstützung
@endnode

@node "Soundtracker Pro 3.0" "Soundtracker Pro 3.0"

 Soundtracker Pro 3.0

		Soundtracker Pro ist ein Tracker im Stil des allseits
                bekannten Protrackers von Marco Nelissen. Das Modul
                wird durch den Eagleplayer vor dem Abspielen in
                Protracker umkonvertiert. Alle nicht protrackerrelevanten
                Features werden daher nicht unterstuetzt.

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
                - Abspeichern als Protracker
@endnode

@node "Soundtracker Pro II" "Soundtracker Pro II"

 Soundtracker Pro II

		Soundtracker Pro ist ein Tracker im Stil des allseits
                bekannten Protrackers, geschrieben von Marco Nelissen.
                Mangels einer Replayroutine fuer dieses Format, habe ich
                einen Player selbst geschrieben, der allerdings noch nicht
                alle Features des Soundtracker Pro unterstuetzt (compilierte
                Playlisten, Multiple Loops, einige Kommandos).
		

		- Amplifier
		- Patternscroll
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- intern im Eagleplayer
@endnode

@node "Syntracker" "Syntracker"

 Syntracker

		Syntracker stammt von Bastian Spiegel (Twice/Lego), der
		später auch @{"Art of Noise" link "Art of Noise"} entwickelt hat.
		Eine schön übersichtliche Playroutine, allerdings merkt man
		dem Programm an, daß es wohl der erste Versuch eines Trackers
		war, ich konnte die eigentliche Playroutine von 4100 Bytes auf
		3400 Bytes kürzen. Die Playroutine ist absolut soundtracker-
		typisch aufgebaut, unterstützt aber trotzdem synthetische
		Instrumente. Patternumschaltung, Songenderkennung, ModulesInfo
		und Save sind angepaßt.
		Das Hauptprogramm sieht aus wie ein 4 stimmiger Oktalyzer und
		hat so einige Fehler.

		Die Playroutine scheint im Speicher herumzuwühlen, den Fehler
		konnten wir bis jetzt noch nicht 100%ig eliminieren !!!

		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Scopes

@endnode

@node "Startrekker" "Startrekker"

 Startrekker

		Es wird die 4-Stimmige AM-Abspielroutine des @{"Audio Sculpture" link "Audio Sculpture"}
		verwendet. Startrekker wurde von Exolon of Fairlight ge-
		schrieben. Als besonderes Extra ist das .NT file nicht un-
		bedingt erforderlich. Probleme gibt es nur dann, wenn es
		sich um ein Module handelt, das mit AM-Samples arbeitet und
		das NT-File nicht geladen werden kann (man hört dann halt
		nichts bei diesen Samples). Ansonsten unterstützt der
		Startrekkerplayer alle Möglichkeiten der anderen Tracker,
		inclusive Songend und Moduleinfo. Der Startrekker ist intern
		im EaglePlayer und unterstützt Songloading (auch gepackte
		Songs). Eine Einstellung des Default-Instrumenten-Dirs ist
		über den @{"Manager" alink "EP_Engine.guide/Manager"} möglich. Die Samples dürfen gepackt werden
		(Powerpacker, File Imploder, CrM, LH, XPK, Stc, Pack, XFD
		usw.).

		- Amplifier
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Autorsuche
		- Songloading
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Startrekker Packer" "Startrekker Packer"

 Startrekker Packer

		Ein Packformat des @{"Startrekker" link "Startrekker"}.

		- Amplifier
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Stonetracker" "Stonetracker"

 Stonetracker

		Keine Informationen verfügbar.
@endnode

@node "TFMX" "TFMX"

 TFMX

		Von Chris Hülsbeck erschaffenes Soundsystem.
		Hier in 3 Varianten implementiert:
		1. TFMX V1.5
		2. TFMX Pro
		3. TFMX 7 Stimmig (Idee von J.Hippel,Code J.Hippel ? & C.H.)

		TFMX stellt das Nonplusultra unter den professionellen Musik-
		editoren dar und klingt unter der Hand eines Profis zum
		schwärmen. Besonders betrachtenswert ist der Verlauf der
		Samples im Stereoscope, wie Halleffekte simuliert werden,
		einfach geil.
		Alle drei wurden an den Eagleplayer angepaßt in Bezug auf
		Lautstärkeregelung usw., sogar Patternscroller wird
		unterstützt. SongEnde & Restart werden erkannt (boah eh).

		Einen TFMX mit Playroutine im Modul, wie beim Powerplayer
		(ich kann einfach nicht glauben, wie man so ein Teil POWER..
		nennen kann) behauptet, gibt es nicht !!
		(von Frank Riffel/DELIRIUM bestätigt)
		S.Fuhrmann meinte wohl Hippel damit, der arme....

        Der ab der Version 1.54 beiliegende TFMX 7V Player verdient noch
        etwas mehr Achtung. Man kann hier die Mixrate einstellen (über den
        "Config"-Schalter im @{"Manager" alink "EP_Engine.Guide/Manager"}) Besonders für Besitzer langsamer
        Amigas dürfte dieses eine enorme Entlastung darstellen, da sich die
        Restperformance des Rechners doch, bei verminderter Klangqualität,
        erheblich verbessern läßt. Umgekehrt verhält es sich natürlich
        analog.

		- Save Modul		(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode

@node "TFMX_1.5" "TFMX_1.5"

 siehe @{"TFMX" link "TFMX"}

@endnode

@node "TFMX_Pro" "TFMX_Pro"

 siehe @{"TFMX" link "TFMX"}

@endnode

@node "TFMX_7v" "TFMX_7v"

 siehe @{"TFMX" link "TFMX"}

@endnode

@node "THX" "THX"

 THX
                THX ist ein Trackerähnliches Programm zur Erzeugung
                synthetischer Klänge vom Schlage der guten alten
                C64-Sounds oder auch @{"Hippel" link "Hippel"}/@{"FutureComposer" link "Future Composer 1.3"} Musiken.
                Das Programm stammt von Martin Wodok und läuft
                Gott sei Dank auf einem Intuition-Screen. Aus
                dem sowieso alles andere als schnellem Replay
                wurde der an der Stelle sinnlose 68020er Code
                entfernt, so daß der Abspieler auch mit einem
                68000er Amiga laufen sollte. Beim Anpassen
                des Abspielers wurden ansonsten die üblichen
                Features eingebaut.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Patternscroll

@endnode


@node "The Player" "The Player"

 Player-P40A/P40B/P41A/P50A/P60A

		Hierbei handlet es sich wieder um einen @{"ProTracker-Packer" link Protracker},
		der uns Ripper ein bischen auf`s Glatteis führen soll. Im
		ersten Augenblick liegt das Module nämlich auf festen
		Adressen, deshalb wurde in die Init-Routine eine EntRelog-
		Routine eingebaut (Ätsch !!! :-) )
		Die PlayRoutine war mal wieder selbstmodifizierend und hard-
		warehacked, aber sehr schnell. Der zweite Interrupt wurde
		entfernt. Es war eine Sau-Arbeit, diese Playroutinen anzu-
		passen, rippt man die eine P40A, dann spielt das andere
		P40A-module nicht mehr richtig und so weiter.
		Mehrere Enforcer-Bugs wurde removed und die Player sollten
		jetzt sicherer laufen als früher.
		Bei dem P50A handelt es sich um den besten Packer, den ich jeh
		gesehen habe. Er schlägt Promizer4.0, Propacker, Prorunner und
		wie sie alle heißen um Längen und hat dabei weniger Fehler
		als diese. Dafür stürzt der Packer selber sehr gerne ab.
		Creator: Jarno Paananen !

		Ab Eagleplayer V1.50 sind die Player V4.x, sowie P50/P60 alle
		intern und die Probleme mit dem Abspielen sind endgültig
		behoben. Außerdem sollten die Player endlich eine 
		bombensichere Checkroutine besitzen.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode



@node "Tim Follin II" "Tim Follin II"

 Tim Follin II

		Ein Soundformat, welches vor sehr synthetisch klingt. Wir
		haben z.Z. nur 4 Module. Wer noch ein paar zu verschenken
		hat, kann ja mal schreiben.

		- Amplifierunterstützung
		- Save Modul	(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
@endnode


@node "TME" "TME"

 TME

		The Musical Enlightment, ein Soundprogramm, für das ich
		leider nur ein Module habe, so daß ein ausgiebiger Test
		unmöglich war. Die Playroutine gab`s bei Delirium,
		allerdings wieder fast "nackig", nur Subsongs wurden
		unterstützt und dabei greift der TME an nur einer, wieder-
		hole einer Stelle auf die Audio-Hardware zu ......
		Jetzt ist der TME einer der wenigen Player, bei dem es nicht
		ein einziges gesperrtes Gadget im Hauptfenster des
		Eagleplayers gibt. Die korrekte Länge wird außerdem
		berechnet und auch richtig gesaved (in der registrierten
		Version).

@endnode

@node "Trackerpacker 1" "Trackerpacker 1"

 Trackerpacker 1

		Ein von der Gruppe "Mexx" häufig benutztes Musikformat.

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Trackerpacker 2" "Trackerpacker 2"

 Trackerpacker 2

		Ein von der Gruppe "Mexx" häufig benutztes Musikformat. Der
		Player erkennt 2 verschiedene Typen, einen mit Vorblock
		"MEXX_TP2"+Songnamen, 28 Bytes lang, bzw. ohne.

		Lief früher unter dem Namen "MEXXPacker".

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Trackerpacker 3" "Trackerpacker 3"

 Trackerpacker 3

		Nachfolger des @{"Trackerpacker 2" link "Trackerpacker 2"} (logisch  eigentlich), selbe
		Packrate, nur anderer Patternaufbau. Nach "P60A" zweite Wahl
		in Geschwindigkeit und Packrate, bei Benutzung von Pattern-
		break in vollem Umfang der derzeit beste Player. [außer
		@{"Protracker" link Protracker} :) ]
		Auch die Playroutine ist brauchbar. Anscheinend hat sich
		das Meckern doch gelohnt :)

		- Amplifierunterstützung
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Sampleinfo
		- Moduleinfo
		- Patternscroll
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Tronic" "Tronic"

 Tronic

		Der Tronic ist es mit hoher Wahrscheinlichkeit KEIN Tracker.
		Die Playroutine wurde von Marley/IFT gerippt und als
		Deliplayer rausgebracht. Ich habe dann noch Laustärke/
		Balance/Voices, sowie Analyzerunterstützung und Songend
		eingebaut.
		Ein Bug in der Playroutine wurde entfernt.
@endnode

@node "Unic-Tracker" "Unic-Tracker"

 Unic-Tracker

		Ich bin mir noch nicht schlüssig, ob es sich hierbei wieder
		mal um einen Soundkodierer handelt oder Laxity of Kefrens einen
		eigenen Tracker entwickelte. Jedenfalls war die Playroutine
		genau wie der @{"Propacker 1.0a" link "Propacker 1.0"} ein wüstes Etwas mit allen
		Schikanen, die man eigentlich vermeidet. Nach etlichen Flüchen
		(Buggs) präsentieren wir nun einen Unic-Tracker, der ohne
		selbstmodifizierenden Code auskommt, nur mit dem CIA-Interrupt
		arbeitet und somit auch unter NTSC läuft. Die Unic-Tracker-
		playroutine ist sowieso ziemlich kurios, es sieht so aus, als
		ob Laxity eine Noisetrackerplayroutine in eine Protrackerroutine
		umbauen wollte, komisch, komisch.
		Ich habe sicherheitshalber erstmal die Protrackerfunktionen
		"Sampleoffset" und "Tempo" hinzugefügt, so daß die meisten
		Protrackermodule hinhauen. (eigener Konverter)
		Besonderheit des Unic-Trackers : Er kürzt die Patterns um ¼ !
		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.

		- Amplifier
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Autorsuche
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode


@Node "Unic-Tracker 2" "Unic-Tracker 2"

 Unic-Tracker 2

		Im "Desert Dream" verwendetes "Unic"-Format ohne Kennung und
		Modulname, dafür aber tierisch wilde Playroutine. Ich habe
		aus Faulheit die alte Unic-Routine umgebaut, fertig !!!

		P.S. Die Module liegen im Demo auf $1532 , Endadresse bei
		     $152e

		Ab V1.50 des Eagleplayers ist diese Playroutine intern im
		Eagleplayer.

		- Amplifier
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Vectordean" "Vectordean"

 Vectordean

		Ein Soundsystem, welches Subsongs unterstützt und gleich in
		mehrern Fileformaten auftritt.

		1. *.sng  + *.ins
		2. *.RDAT + *.RSMP
		3. VD			(ein File)

		* Amplifierunterstützung
@endnode

@node "VSS" "VSS"

 VSS

		Voodoo Supreme Synthesizer, wurde wahrscheinlich direkt vom
		Autor angepaßt, bekam von mir noch eine Voices-Routine,
		einen CIAB-Timer, Analyzerunterstützung und Speedregelung
		im Eagleplayer verpaßt. Bei dem Demosong Voo4
		gefällt mir besonders der Look der Samples, echt cool
		gemacht.
		Problem mit dem A4000 beseitigt.
@endnode

@node "Wantonpacker" "Wantonpacker"

 Wantonpacker

		Ein Packer von Wanton of Bloodsuckers. Hier handelt es sich
		lediglich um einen Kodierer.

		- Amplifier
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer
@endnode

@node "Wizard of Sound" "Wizard of Sound"

 Wizard of Sound

		Ich habe - außer beim eigentlichen Programm - noch nie
		ein Wizard of Sound Modul gefunden, wahrscheinlich weil das
		Teil niemandem gefallen hat ...
		Laßt mal, mir auch nicht, ich habe eine Ewigkeit zugebracht,
		dieses Programm anzupassen. Mal davon abgesehen, daß es sich
		um den absoluten Spaghetticode handelt, besaß alleine die
		kurze Playroutine 2 kB, wiederhole 2 kByte Reloc. Wahnsinn,
		und das, wo nur die Hälfte der Register benutzt ist.
		Auch die Erkennung gestaltet sich schwierig. Ich erkenne das
		Modul im wesentlichen daran, daß es immer 9000 Bytes lang
		ist (die Kommandos werden zwar auch gecheckt,aber die
		Trefferquote ist gering, da so gut wie alle von den 255
		Möglichkeiten eines Bytes von WOS genutzt werden).
		Songend, Analyzer, Lautstärke usw. sind selbstverständlich.
		Die Samples dürfen gepackt werden (Powerpacker,
		File Imploder, CrunchOMania, LH, XPK, Stc, Pack)
		Der Player unterstützt eine Configroutine und ist in der
		Lage, sein Instrumentendirectory als Konfiguration zu
		sichern. ("EP:Configs/EP-Wos.Cfg")
		Das Directory, aus dem die Instrumente geladen werden sollen,
		kann über das Konfigurationsgadget des @{"Managers" alink "EP_Engine.Guide/Manager"} eingestellt
		werden (anclicken, Pfad eingeben).
@endnode


@node "XANN-Packer" "XANN-Packer"

 XANN-Packer

		In irgendeinem uralten Demo fanden sich mal ein paar Module.
		Da diese Routine nicht sehr lang ist, wurde sie integriert.

		- Amplifier
		- Patternscroll
		- Save Modul			(@{"registrierte Version" ALink "EP_Registration.Guide/Main"})
		- Moduleinfo
		- Sampleinfo
		- Spielzeitberechnung
		- intern im Eagleplayer

@endnode


@node "XMOD" "XMOD"

 XMOD

		Eine Art Customplayer ala @{"GMOD" link "GMOD"}. Mir persönlich ist unbekannt,
		wo es herkommt und ich besitze, wie kann es anders sein,
		wieder mal nur ein Testmodul. Bitte helft mir!
@endnode

@node "Fehler in den Playern" "Fehler in den Playern"


   Fehler in den Playroutinen
  ----------------------------

 Bei Tests mit fast allen Playern kamen verschiedene Fehler ans Tageslicht.
 Hier ist nun eine Zusammenstellung der möglicherweise fehlerhaften bzw.
 unsicher laufenden Player:



	@{"ActivisionPro" link "Activision Pro"}
	@{"Customplay" link "Customplay"}
	@{"David Whittaker" link "David Whittaker"}
	@{"GMOD" link "GMOD"}
	@{"Hippel" link "Hippel"}
	@{"Syntracker" link "Syntracker"}
	@{"XMOD" link "XMOD"}

 Generell kann man sagen: Alle Soundsysteme mit Playroutine im Modul sind in
 gewisser Weise gefährdet, genauso wie Soundsysteme, die uralt sind. Selbst
 die Soundtrackerclones sind teilweise unsicher, da der @{"'Standard'" link "Protracker"} oft nicht
 oder nur teilweise beachtet wird.

@endnode


@node "Entfernte Player" "Entfernte Player"


  Entfernte Player
 ------------------


 Folgende Player wurden im Laufe der Zeit vom Eagleplayerpaket entfernt.
 Sollten Sie einen dieser Player in ihrem Eagleplayersverzeichnis haben,
 löschen Sie diesen bitte. Diese Player sind meist fehlerhaft, alt oder
 heißen anders.



  - Icetracker		(wird vom @{"Soundtracker 2.6" link "Soundtracker 2.6"} übernommen)
  - Martin Walker 	( = @{"Activision Pro" link "Activision Pro"} )
  - Psygnosis Special	(Entfernt, da es sich bei dem entsprechenden Modul
			 um ein @{"Game Music Creator" link "Game Music Creator"} Modul handelt. Die Leute
			 von Infect scheinen überhaupt nichts mehr zu
			 peilen. Die machen sogar aus GMC irgendwelche
			 @{"Custommodule" link "Customplay"}.)
  - Kris		(heißt @{"Chiptracker" link Chiptracker} )
  - Strangeplayer	(heißt @{"Propacker_1.0" link "Propacker_1.0"} )
  - Hannitracker	(heißt @{"Propacker_1.0" link "ProPacker_1.0"} )
  - Mexxpacker		(heißt @{"Trackerpacker 2" link "Trackerpacker 2"} )
  - MTH			(heißt jetzt @{"Benn Daglish" link "Benn Daglish"}

@endnode

